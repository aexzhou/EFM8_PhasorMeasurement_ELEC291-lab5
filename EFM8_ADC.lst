0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Mon Mar 04 00:29:45 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Get_ADC
0000             30            public _LCDprint
0000             31            public _LCD_4BIT
0000             32            public _WriteCommand
0000             33            public _WriteData
0000             34            public _LCD_byte
0000             35            public _LCD_pulse
0000             36            public _Volts_at_Pin
0000             37            public _ADC_at_Pin
0000             38            public _InitPinADC
0000             39            public _TIMER0_Init
0000             40            public _waitus
0000             41            public _waitms
0000             42            public _Timer3us
0000             43            public _InitADC
0000             44            public __c51_external_startup
0000             45            public _LCDprint_PARM_3
0000             46            public _LCDprint_PARM_2
0000             47            public _overflow_count
0000             48   ;--------------------------------------------------------
0000             49   ; Special Function Registers
0000             50   ;--------------------------------------------------------
0000             51   _ACC            DATA 0xe0
0000             52   _ADC0ASAH       DATA 0xb6
0000             53   _ADC0ASAL       DATA 0xb5
0000             54   _ADC0ASCF       DATA 0xa1
0000             55   _ADC0ASCT       DATA 0xc7
0000             56   _ADC0CF0        DATA 0xbc
0000             57   _ADC0CF1        DATA 0xb9
0000             58   _ADC0CF2        DATA 0xdf
0000             59   _ADC0CN0        DATA 0xe8
0000             60   _ADC0CN1        DATA 0xb2
0000             61   _ADC0CN2        DATA 0xb3
0000             62   _ADC0GTH        DATA 0xc4
0000             63   _ADC0GTL        DATA 0xc3
0000             64   _ADC0H          DATA 0xbe
0000             65   _ADC0L          DATA 0xbd
0000             66   _ADC0LTH        DATA 0xc6
0000             67   _ADC0LTL        DATA 0xc5
0000             68   _ADC0MX         DATA 0xbb
0000             69   _B              DATA 0xf0
0000             70   _CKCON0         DATA 0x8e
0000             71   _CKCON1         DATA 0xa6
0000             72   _CLEN0          DATA 0xc6
0000             73   _CLIE0          DATA 0xc7
0000             74   _CLIF0          DATA 0xe8
0000             75   _CLKSEL         DATA 0xa9
0000             76   _CLOUT0         DATA 0xd1
0000             77   _CLU0CF         DATA 0xb1
0000             78   _CLU0FN         DATA 0xaf
0000             79   _CLU0MX         DATA 0x84
0000             80   _CLU1CF         DATA 0xb3
0000             81   _CLU1FN         DATA 0xb2
0000             82   _CLU1MX         DATA 0x85
0000             83   _CLU2CF         DATA 0xb6
0000             84   _CLU2FN         DATA 0xb5
0000             85   _CLU2MX         DATA 0x91
0000             86   _CLU3CF         DATA 0xbf
0000             87   _CLU3FN         DATA 0xbe
0000             88   _CLU3MX         DATA 0xae
0000             89   _CMP0CN0        DATA 0x9b
0000             90   _CMP0CN1        DATA 0x99
0000             91   _CMP0MD         DATA 0x9d
0000             92   _CMP0MX         DATA 0x9f
0000             93   _CMP1CN0        DATA 0xbf
0000             94   _CMP1CN1        DATA 0xac
0000             95   _CMP1MD         DATA 0xab
0000             96   _CMP1MX         DATA 0xaa
0000             97   _CRC0CN0        DATA 0xce
0000             98   _CRC0CN1        DATA 0x86
0000             99   _CRC0CNT        DATA 0xd3
0000            100   _CRC0DAT        DATA 0xcb
0000            101   _CRC0FLIP       DATA 0xcf
0000            102   _CRC0IN         DATA 0xca
0000            103   _CRC0ST         DATA 0xd2
0000            104   _DAC0CF0        DATA 0x91
0000            105   _DAC0CF1        DATA 0x92
0000            106   _DAC0H          DATA 0x85
0000            107   _DAC0L          DATA 0x84
0000            108   _DAC1CF0        DATA 0x93
0000            109   _DAC1CF1        DATA 0x94
0000            110   _DAC1H          DATA 0x8a
0000            111   _DAC1L          DATA 0x89
0000            112   _DAC2CF0        DATA 0x95
0000            113   _DAC2CF1        DATA 0x96
0000            114   _DAC2H          DATA 0x8c
0000            115   _DAC2L          DATA 0x8b
0000            116   _DAC3CF0        DATA 0x9a
0000            117   _DAC3CF1        DATA 0x9c
0000            118   _DAC3H          DATA 0x8e
0000            119   _DAC3L          DATA 0x8d
0000            120   _DACGCF0        DATA 0x88
0000            121   _DACGCF1        DATA 0x98
0000            122   _DACGCF2        DATA 0xa2
0000            123   _DERIVID        DATA 0xad
0000            124   _DEVICEID       DATA 0xb5
0000            125   _DPH            DATA 0x83
0000            126   _DPL            DATA 0x82
0000            127   _EIE1           DATA 0xe6
0000            128   _EIE2           DATA 0xf3
0000            129   _EIP1           DATA 0xbb
0000            130   _EIP1H          DATA 0xee
0000            131   _EIP2           DATA 0xed
0000            132   _EIP2H          DATA 0xf6
0000            133   _EMI0CN         DATA 0xe7
0000            134   _FLKEY          DATA 0xb7
0000            135   _HFO0CAL        DATA 0xc7
0000            136   _HFO1CAL        DATA 0xd6
0000            137   _HFOCN          DATA 0xef
0000            138   _I2C0ADM        DATA 0xff
0000            139   _I2C0CN0        DATA 0xba
0000            140   _I2C0DIN        DATA 0xbc
0000            141   _I2C0DOUT       DATA 0xbb
0000            142   _I2C0FCN0       DATA 0xad
0000            143   _I2C0FCN1       DATA 0xab
0000            144   _I2C0FCT        DATA 0xf5
0000            145   _I2C0SLAD       DATA 0xbd
0000            146   _I2C0STAT       DATA 0xb9
0000            147   _IE             DATA 0xa8
0000            148   _IP             DATA 0xb8
0000            149   _IPH            DATA 0xf2
0000            150   _IT01CF         DATA 0xe4
0000            151   _LFO0CN         DATA 0xb1
0000            152   _P0             DATA 0x80
0000            153   _P0MASK         DATA 0xfe
0000            154   _P0MAT          DATA 0xfd
0000            155   _P0MDIN         DATA 0xf1
0000            156   _P0MDOUT        DATA 0xa4
0000            157   _P0SKIP         DATA 0xd4
0000            158   _P1             DATA 0x90
0000            159   _P1MASK         DATA 0xee
0000            160   _P1MAT          DATA 0xed
0000            161   _P1MDIN         DATA 0xf2
0000            162   _P1MDOUT        DATA 0xa5
0000            163   _P1SKIP         DATA 0xd5
0000            164   _P2             DATA 0xa0
0000            165   _P2MASK         DATA 0xfc
0000            166   _P2MAT          DATA 0xfb
0000            167   _P2MDIN         DATA 0xf3
0000            168   _P2MDOUT        DATA 0xa6
0000            169   _P2SKIP         DATA 0xcc
0000            170   _P3             DATA 0xb0
0000            171   _P3MDIN         DATA 0xf4
0000            172   _P3MDOUT        DATA 0x9c
0000            173   _PCA0CENT       DATA 0x9e
0000            174   _PCA0CLR        DATA 0x9c
0000            175   _PCA0CN0        DATA 0xd8
0000            176   _PCA0CPH0       DATA 0xfc
0000            177   _PCA0CPH1       DATA 0xea
0000            178   _PCA0CPH2       DATA 0xec
0000            179   _PCA0CPH3       DATA 0xf5
0000            180   _PCA0CPH4       DATA 0x85
0000            181   _PCA0CPH5       DATA 0xde
0000            182   _PCA0CPL0       DATA 0xfb
0000            183   _PCA0CPL1       DATA 0xe9
0000            184   _PCA0CPL2       DATA 0xeb
0000            185   _PCA0CPL3       DATA 0xf4
0000            186   _PCA0CPL4       DATA 0x84
0000            187   _PCA0CPL5       DATA 0xdd
0000            188   _PCA0CPM0       DATA 0xda
0000            189   _PCA0CPM1       DATA 0xdb
0000            190   _PCA0CPM2       DATA 0xdc
0000            191   _PCA0CPM3       DATA 0xae
0000            192   _PCA0CPM4       DATA 0xaf
0000            193   _PCA0CPM5       DATA 0xcc
0000            194   _PCA0H          DATA 0xfa
0000            195   _PCA0L          DATA 0xf9
0000            196   _PCA0MD         DATA 0xd9
0000            197   _PCA0POL        DATA 0x96
0000            198   _PCA0PWM        DATA 0xf7
0000            199   _PCON0          DATA 0x87
0000            200   _PCON1          DATA 0xcd
0000            201   _PFE0CN         DATA 0xc1
0000            202   _PRTDRV         DATA 0xf6
0000            203   _PSCTL          DATA 0x8f
0000            204   _PSTAT0         DATA 0xaa
0000            205   _PSW            DATA 0xd0
0000            206   _REF0CN         DATA 0xd1
0000            207   _REG0CN         DATA 0xc9
0000            208   _REVID          DATA 0xb6
0000            209   _RSTSRC         DATA 0xef
0000            210   _SBCON1         DATA 0x94
0000            211   _SBRLH1         DATA 0x96
0000            212   _SBRLL1         DATA 0x95
0000            213   _SBUF           DATA 0x99
0000            214   _SBUF0          DATA 0x99
0000            215   _SBUF1          DATA 0x92
0000            216   _SCON           DATA 0x98
0000            217   _SCON0          DATA 0x98
0000            218   _SCON1          DATA 0xc8
0000            219   _SFRPAGE        DATA 0xa7
0000            220   _SFRPGCN        DATA 0xbc
0000            221   _SFRSTACK       DATA 0xd7
0000            222   _SMB0ADM        DATA 0xd6
0000            223   _SMB0ADR        DATA 0xd7
0000            224   _SMB0CF         DATA 0xc1
0000            225   _SMB0CN0        DATA 0xc0
0000            226   _SMB0DAT        DATA 0xc2
0000            227   _SMB0FCN0       DATA 0xc3
0000            228   _SMB0FCN1       DATA 0xc4
0000            229   _SMB0FCT        DATA 0xef
0000            230   _SMB0RXLN       DATA 0xc5
0000            231   _SMB0TC         DATA 0xac
0000            232   _SMOD1          DATA 0x93
0000            233   _SP             DATA 0x81
0000            234   _SPI0CFG        DATA 0xa1
0000            235   _SPI0CKR        DATA 0xa2
0000            236   _SPI0CN0        DATA 0xf8
0000            237   _SPI0DAT        DATA 0xa3
0000            238   _SPI0FCN0       DATA 0x9a
0000            239   _SPI0FCN1       DATA 0x9b
0000            240   _SPI0FCT        DATA 0xf7
0000            241   _SPI0PCF        DATA 0xdf
0000            242   _TCON           DATA 0x88
0000            243   _TH0            DATA 0x8c
0000            244   _TH1            DATA 0x8d
0000            245   _TL0            DATA 0x8a
0000            246   _TL1            DATA 0x8b
0000            247   _TMOD           DATA 0x89
0000            248   _TMR2CN0        DATA 0xc8
0000            249   _TMR2CN1        DATA 0xfd
0000            250   _TMR2H          DATA 0xcf
0000            251   _TMR2L          DATA 0xce
0000            252   _TMR2RLH        DATA 0xcb
0000            253   _TMR2RLL        DATA 0xca
0000            254   _TMR3CN0        DATA 0x91
0000            255   _TMR3CN1        DATA 0xfe
0000            256   _TMR3H          DATA 0x95
0000            257   _TMR3L          DATA 0x94
0000            258   _TMR3RLH        DATA 0x93
0000            259   _TMR3RLL        DATA 0x92
0000            260   _TMR4CN0        DATA 0x98
0000            261   _TMR4CN1        DATA 0xff
0000            262   _TMR4H          DATA 0xa5
0000            263   _TMR4L          DATA 0xa4
0000            264   _TMR4RLH        DATA 0xa3
0000            265   _TMR4RLL        DATA 0xa2
0000            266   _TMR5CN0        DATA 0xc0
0000            267   _TMR5CN1        DATA 0xf1
0000            268   _TMR5H          DATA 0xd5
0000            269   _TMR5L          DATA 0xd4
0000            270   _TMR5RLH        DATA 0xd3
0000            271   _TMR5RLL        DATA 0xd2
0000            272   _UART0PCF       DATA 0xd9
0000            273   _UART1FCN0      DATA 0x9d
0000            274   _UART1FCN1      DATA 0xd8
0000            275   _UART1FCT       DATA 0xfa
0000            276   _UART1LIN       DATA 0x9e
0000            277   _UART1PCF       DATA 0xda
0000            278   _VDM0CN         DATA 0xff
0000            279   _WDTCN          DATA 0x97
0000            280   _XBR0           DATA 0xe1
0000            281   _XBR1           DATA 0xe2
0000            282   _XBR2           DATA 0xe3
0000            283   _XOSC0CN        DATA 0x86
0000            284   _DPTR           DATA 0x8382
0000            285   _TMR2RL         DATA 0xcbca
0000            286   _TMR3RL         DATA 0x9392
0000            287   _TMR4RL         DATA 0xa3a2
0000            288   _TMR5RL         DATA 0xd3d2
0000            289   _TMR0           DATA 0x8c8a
0000            290   _TMR1           DATA 0x8d8b
0000            291   _TMR2           DATA 0xcfce
0000            292   _TMR3           DATA 0x9594
0000            293   _TMR4           DATA 0xa5a4
0000            294   _TMR5           DATA 0xd5d4
0000            295   _SBRL1          DATA 0x9695
0000            296   _PCA0           DATA 0xfaf9
0000            297   _PCA0CP0        DATA 0xfcfb
0000            298   _PCA0CP1        DATA 0xeae9
0000            299   _PCA0CP2        DATA 0xeceb
0000            300   _PCA0CP3        DATA 0xf5f4
0000            301   _PCA0CP4        DATA 0x8584
0000            302   _PCA0CP5        DATA 0xdedd
0000            303   _ADC0ASA        DATA 0xb6b5
0000            304   _ADC0GT         DATA 0xc4c3
0000            305   _ADC0           DATA 0xbebd
0000            306   _ADC0LT         DATA 0xc6c5
0000            307   _DAC0           DATA 0x8584
0000            308   _DAC1           DATA 0x8a89
0000            309   _DAC2           DATA 0x8c8b
0000            310   _DAC3           DATA 0x8e8d
0000            311   ;--------------------------------------------------------
0000            312   ; special function bits
0000            313   ;--------------------------------------------------------
0000            314   _ACC_0          BIT 0xe0
0000            315   _ACC_1          BIT 0xe1
0000            316   _ACC_2          BIT 0xe2
0000            317   _ACC_3          BIT 0xe3
0000            318   _ACC_4          BIT 0xe4
0000            319   _ACC_5          BIT 0xe5
0000            320   _ACC_6          BIT 0xe6
0000            321   _ACC_7          BIT 0xe7
0000            322   _TEMPE          BIT 0xe8
0000            323   _ADGN0          BIT 0xe9
0000            324   _ADGN1          BIT 0xea
0000            325   _ADWINT         BIT 0xeb
0000            326   _ADBUSY         BIT 0xec
0000            327   _ADINT          BIT 0xed
0000            328   _IPOEN          BIT 0xee
0000            329   _ADEN           BIT 0xef
0000            330   _B_0            BIT 0xf0
0000            331   _B_1            BIT 0xf1
0000            332   _B_2            BIT 0xf2
0000            333   _B_3            BIT 0xf3
0000            334   _B_4            BIT 0xf4
0000            335   _B_5            BIT 0xf5
0000            336   _B_6            BIT 0xf6
0000            337   _B_7            BIT 0xf7
0000            338   _C0FIF          BIT 0xe8
0000            339   _C0RIF          BIT 0xe9
0000            340   _C1FIF          BIT 0xea
0000            341   _C1RIF          BIT 0xeb
0000            342   _C2FIF          BIT 0xec
0000            343   _C2RIF          BIT 0xed
0000            344   _C3FIF          BIT 0xee
0000            345   _C3RIF          BIT 0xef
0000            346   _D1SRC0         BIT 0x88
0000            347   _D1SRC1         BIT 0x89
0000            348   _D1AMEN         BIT 0x8a
0000            349   _D01REFSL       BIT 0x8b
0000            350   _D3SRC0         BIT 0x8c
0000            351   _D3SRC1         BIT 0x8d
0000            352   _D3AMEN         BIT 0x8e
0000            353   _D23REFSL       BIT 0x8f
0000            354   _D0UDIS         BIT 0x98
0000            355   _D1UDIS         BIT 0x99
0000            356   _D2UDIS         BIT 0x9a
0000            357   _D3UDIS         BIT 0x9b
0000            358   _EX0            BIT 0xa8
0000            359   _ET0            BIT 0xa9
0000            360   _EX1            BIT 0xaa
0000            361   _ET1            BIT 0xab
0000            362   _ES0            BIT 0xac
0000            363   _ET2            BIT 0xad
0000            364   _ESPI0          BIT 0xae
0000            365   _EA             BIT 0xaf
0000            366   _PX0            BIT 0xb8
0000            367   _PT0            BIT 0xb9
0000            368   _PX1            BIT 0xba
0000            369   _PT1            BIT 0xbb
0000            370   _PS0            BIT 0xbc
0000            371   _PT2            BIT 0xbd
0000            372   _PSPI0          BIT 0xbe
0000            373   _P0_0           BIT 0x80
0000            374   _P0_1           BIT 0x81
0000            375   _P0_2           BIT 0x82
0000            376   _P0_3           BIT 0x83
0000            377   _P0_4           BIT 0x84
0000            378   _P0_5           BIT 0x85
0000            379   _P0_6           BIT 0x86
0000            380   _P0_7           BIT 0x87
0000            381   _P1_0           BIT 0x90
0000            382   _P1_1           BIT 0x91
0000            383   _P1_2           BIT 0x92
0000            384   _P1_3           BIT 0x93
0000            385   _P1_4           BIT 0x94
0000            386   _P1_5           BIT 0x95
0000            387   _P1_6           BIT 0x96
0000            388   _P1_7           BIT 0x97
0000            389   _P2_0           BIT 0xa0
0000            390   _P2_1           BIT 0xa1
0000            391   _P2_2           BIT 0xa2
0000            392   _P2_3           BIT 0xa3
0000            393   _P2_4           BIT 0xa4
0000            394   _P2_5           BIT 0xa5
0000            395   _P2_6           BIT 0xa6
0000            396   _P3_0           BIT 0xb0
0000            397   _P3_1           BIT 0xb1
0000            398   _P3_2           BIT 0xb2
0000            399   _P3_3           BIT 0xb3
0000            400   _P3_4           BIT 0xb4
0000            401   _P3_7           BIT 0xb7
0000            402   _CCF0           BIT 0xd8
0000            403   _CCF1           BIT 0xd9
0000            404   _CCF2           BIT 0xda
0000            405   _CCF3           BIT 0xdb
0000            406   _CCF4           BIT 0xdc
0000            407   _CCF5           BIT 0xdd
0000            408   _CR             BIT 0xde
0000            409   _CF             BIT 0xdf
0000            410   _PARITY         BIT 0xd0
0000            411   _F1             BIT 0xd1
0000            412   _OV             BIT 0xd2
0000            413   _RS0            BIT 0xd3
0000            414   _RS1            BIT 0xd4
0000            415   _F0             BIT 0xd5
0000            416   _AC             BIT 0xd6
0000            417   _CY             BIT 0xd7
0000            418   _RI             BIT 0x98
0000            419   _TI             BIT 0x99
0000            420   _RB8            BIT 0x9a
0000            421   _TB8            BIT 0x9b
0000            422   _REN            BIT 0x9c
0000            423   _CE             BIT 0x9d
0000            424   _SMODE          BIT 0x9e
0000            425   _RI1            BIT 0xc8
0000            426   _TI1            BIT 0xc9
0000            427   _RBX1           BIT 0xca
0000            428   _TBX1           BIT 0xcb
0000            429   _REN1           BIT 0xcc
0000            430   _PERR1          BIT 0xcd
0000            431   _OVR1           BIT 0xce
0000            432   _SI             BIT 0xc0
0000            433   _ACK            BIT 0xc1
0000            434   _ARBLOST        BIT 0xc2
0000            435   _ACKRQ          BIT 0xc3
0000            436   _STO            BIT 0xc4
0000            437   _STA            BIT 0xc5
0000            438   _TXMODE         BIT 0xc6
0000            439   _MASTER         BIT 0xc7
0000            440   _SPIEN          BIT 0xf8
0000            441   _TXNF           BIT 0xf9
0000            442   _NSSMD0         BIT 0xfa
0000            443   _NSSMD1         BIT 0xfb
0000            444   _RXOVRN         BIT 0xfc
0000            445   _MODF           BIT 0xfd
0000            446   _WCOL           BIT 0xfe
0000            447   _SPIF           BIT 0xff
0000            448   _IT0            BIT 0x88
0000            449   _IE0            BIT 0x89
0000            450   _IT1            BIT 0x8a
0000            451   _IE1            BIT 0x8b
0000            452   _TR0            BIT 0x8c
0000            453   _TF0            BIT 0x8d
0000            454   _TR1            BIT 0x8e
0000            455   _TF1            BIT 0x8f
0000            456   _T2XCLK0        BIT 0xc8
0000            457   _T2XCLK1        BIT 0xc9
0000            458   _TR2            BIT 0xca
0000            459   _T2SPLIT        BIT 0xcb
0000            460   _TF2CEN         BIT 0xcc
0000            461   _TF2LEN         BIT 0xcd
0000            462   _TF2L           BIT 0xce
0000            463   _TF2H           BIT 0xcf
0000            464   _T4XCLK0        BIT 0x98
0000            465   _T4XCLK1        BIT 0x99
0000            466   _TR4            BIT 0x9a
0000            467   _T4SPLIT        BIT 0x9b
0000            468   _TF4CEN         BIT 0x9c
0000            469   _TF4LEN         BIT 0x9d
0000            470   _TF4L           BIT 0x9e
0000            471   _TF4H           BIT 0x9f
0000            472   _T5XCLK0        BIT 0xc0
0000            473   _T5XCLK1        BIT 0xc1
0000            474   _TR5            BIT 0xc2
0000            475   _T5SPLIT        BIT 0xc3
0000            476   _TF5CEN         BIT 0xc4
0000            477   _TF5LEN         BIT 0xc5
0000            478   _TF5L           BIT 0xc6
0000            479   _TF5H           BIT 0xc7
0000            480   _RIE            BIT 0xd8
0000            481   _RXTO0          BIT 0xd9
0000            482   _RXTO1          BIT 0xda
0000            483   _RFRQ           BIT 0xdb
0000            484   _TIE            BIT 0xdc
0000            485   _TXHOLD         BIT 0xdd
0000            486   _TXNF1          BIT 0xde
0000            487   _TFRQ           BIT 0xdf
0000            488   ;--------------------------------------------------------
0000            489   ; overlayable register banks
0000            490   ;--------------------------------------------------------
0000            491            rbank0 segment data overlay
0000            492   ;--------------------------------------------------------
0000            493   ; internal ram data
0000            494   ;--------------------------------------------------------
0000            495            rseg R_DSEG
0000            496   _overflow_count:
0000            497            ds 1
0001            498   _LCDprint_PARM_2:
0001            499            ds 1
0002            500   _main_v_1_79:
0002            501            ds 16
0012            502   _main_buffer_1_79:
0012            503            ds 20
0026            504   _main_period_ref_1_79:
0026            505            ds 4
002A            506   _main_freq_ref_1_79:
002A            507            ds 4
002E            508   _main_quarterPeriod_ref_1_79:
002E            509            ds 4
0032            510   _main_prev_period_ref_1_79:
0032            511            ds 4
0036            512   _main_vrms_ref_1_79:
0036            513            ds 4
003A            514   _main_freq_spl_1_79:
003A            515            ds 4
003E            516   _main_prev_period_spl_1_79:
003E            517            ds 4
0042            518   ;--------------------------------------------------------
0042            519   ; overlayable items in internal ram 
0042            520   ;--------------------------------------------------------
0000            521            rseg    R_OSEG
0000            522            rseg    R_OSEG
0000            523   _InitPinADC_PARM_2:
0000            524            ds 1
0001            525            rseg    R_OSEG
0001            526   ;--------------------------------------------------------
0001            527   ; indirectly addressable internal ram data
0001            528   ;--------------------------------------------------------
0000            529            rseg R_ISEG
0000            530   ;--------------------------------------------------------
0000            531   ; absolute internal ram data
0000            532   ;--------------------------------------------------------
0000            533            DSEG
0000            534   ;--------------------------------------------------------
0000            535   ; bit data
0000            536   ;--------------------------------------------------------
0000            537            rseg R_BSEG
0000            538   _LCDprint_PARM_3:
0000            539            DBIT    1
0001            540   ;--------------------------------------------------------
0001            541   ; paged external ram data
0001            542   ;--------------------------------------------------------
0000            543            rseg R_PSEG
0000            544   ;--------------------------------------------------------
0000            545   ; external ram data
0000            546   ;--------------------------------------------------------
0000            547            rseg R_XSEG
0000            548   ;--------------------------------------------------------
0000            549   ; absolute external ram data
0000            550   ;--------------------------------------------------------
0000            551            XSEG
0000            552   ;--------------------------------------------------------
0000            553   ; external initialized ram data
0000            554   ;--------------------------------------------------------
0000            555            rseg R_IXSEG
0000            556            rseg R_HOME
0000            557            rseg R_GSINIT
0000            558            rseg R_CSEG
0000            559   ;--------------------------------------------------------
0000            560   ; Reset entry point and interrupt vectors
0000            561   ;--------------------------------------------------------
0000            562            CSEG at 0x0000
0000 020000     563            ljmp    _crt0
0003            564   ;--------------------------------------------------------
0003            565   ; global & static initialisations
0003            566   ;--------------------------------------------------------
0000            567            rseg R_HOME
0000            568            rseg R_GSINIT
0000            569            rseg R_GSINIT
0000            570   ;--------------------------------------------------------
0000            571   ; data variables initialization
0000            572   ;--------------------------------------------------------
0000            573            rseg R_DINIT
0000            574            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            575   ;--------------------------------------------------------
0000            576   ; code
0000            577   ;--------------------------------------------------------
0000            578            rseg R_CSEG
0000            579   ;------------------------------------------------------------
0000            580   ;Allocation info for local variables in function '_c51_external_startup'
0000            581   ;------------------------------------------------------------
0000            582   ;------------------------------------------------------------
0000            583   ;        C:\ELEC291\Lab5\EFM8_ADC.c:29: char _c51_external_startup (void)
0000            584   ;        -----------------------------------------
0000            585   ;         function _c51_external_startup
0000            586   ;        -----------------------------------------
0000            587   __c51_external_startup:
0000            588            using   0
0000            589   ;        C:\ELEC291\Lab5\EFM8_ADC.c:32: SFRPAGE = 0x00;
0000 75A700     590            mov     _SFRPAGE,#0x00
0003            591   ;        C:\ELEC291\Lab5\EFM8_ADC.c:33: WDTCN = 0xDE; //First key
0003 7597DE     592            mov     _WDTCN,#0xDE
0006            593   ;        C:\ELEC291\Lab5\EFM8_ADC.c:34: WDTCN = 0xAD; //Second key
0006 7597AD     594            mov     _WDTCN,#0xAD
0009            595   ;        C:\ELEC291\Lab5\EFM8_ADC.c:36: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     596            mov     _VDM0CN,#0x80
000C            597   ;        C:\ELEC291\Lab5\EFM8_ADC.c:37: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     598            mov     _RSTSRC,#0x06
000F            599   ;        C:\ELEC291\Lab5\EFM8_ADC.c:44: SFRPAGE = 0x10;
000F 75A710     600            mov     _SFRPAGE,#0x10
0012            601   ;        C:\ELEC291\Lab5\EFM8_ADC.c:45: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     602            mov     _PFE0CN,#0x20
0015            603   ;        C:\ELEC291\Lab5\EFM8_ADC.c:46: SFRPAGE = 0x00;
0015 75A700     604            mov     _SFRPAGE,#0x00
0018            605   ;        C:\ELEC291\Lab5\EFM8_ADC.c:67: CLKSEL = 0x00;
0018 75A900     606            mov     _CLKSEL,#0x00
001B            607   ;        C:\ELEC291\Lab5\EFM8_ADC.c:68: CLKSEL = 0x00;
001B 75A900     608            mov     _CLKSEL,#0x00
001E            609   ;        C:\ELEC291\Lab5\EFM8_ADC.c:69: while ((CLKSEL & 0x80) == 0);
001E            610   L002001?:
001E E5A9       611            mov     a,_CLKSEL
0020 30E700     612            jnb     acc.7,L002001?
0023            613   ;        C:\ELEC291\Lab5\EFM8_ADC.c:70: CLKSEL = 0x03;
0023 75A903     614            mov     _CLKSEL,#0x03
0026            615   ;        C:\ELEC291\Lab5\EFM8_ADC.c:71: CLKSEL = 0x03;
0026 75A903     616            mov     _CLKSEL,#0x03
0029            617   ;        C:\ELEC291\Lab5\EFM8_ADC.c:72: while ((CLKSEL & 0x80) == 0);
0029            618   L002004?:
0029 E5A9       619            mov     a,_CLKSEL
002B 30E780     620            jnb     acc.7,L002004?
002E            621   ;        C:\ELEC291\Lab5\EFM8_ADC.c:77: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     622            orl     _P0MDOUT,#0x10
0031            623   ;        C:\ELEC291\Lab5\EFM8_ADC.c:78: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     624            mov     _XBR0,#0x01
0034            625   ;        C:\ELEC291\Lab5\EFM8_ADC.c:79: XBR1     = 0X00;
0034 75E200     626            mov     _XBR1,#0x00
0037            627   ;        C:\ELEC291\Lab5\EFM8_ADC.c:80: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     628            mov     _XBR2,#0x40
003A            629   ;        C:\ELEC291\Lab5\EFM8_ADC.c:86: SCON0 = 0x10;
003A 759810     630            mov     _SCON0,#0x10
003D            631   ;        C:\ELEC291\Lab5\EFM8_ADC.c:87: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*PRESCALAR));
003D 758DE6     632            mov     _TH1,#0xE6
0040            633   ;        C:\ELEC291\Lab5\EFM8_ADC.c:88: TL1 = TH1;      // Init Timer1
0040 858D8B     634            mov     _TL1,_TH1
0043            635   ;        C:\ELEC291\Lab5\EFM8_ADC.c:89: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     636            anl     _TMOD,#0x0F
0046            637   ;        C:\ELEC291\Lab5\EFM8_ADC.c:90: TMOD |=  0x20;                       
0046 438920     638            orl     _TMOD,#0x20
0049            639   ;        C:\ELEC291\Lab5\EFM8_ADC.c:91: TR1 = 1; // START Timer1
0049 D28E       640            setb    _TR1
004B            641   ;        C:\ELEC291\Lab5\EFM8_ADC.c:92: TI = 1;  // Indicate TX0 ready
004B D299       642            setb    _TI
004D            643   ;        C:\ELEC291\Lab5\EFM8_ADC.c:94: return 0;
004D 758200     644            mov     dpl,#0x00
0050 22         645            ret
0051            646   ;------------------------------------------------------------
0051            647   ;Allocation info for local variables in function 'InitADC'
0051            648   ;------------------------------------------------------------
0051            649   ;------------------------------------------------------------
0051            650   ;        C:\ELEC291\Lab5\EFM8_ADC.c:98: void InitADC (void)
0051            651   ;        -----------------------------------------
0051            652   ;         function InitADC
0051            653   ;        -----------------------------------------
0051            654   _InitADC:
0051            655   ;        C:\ELEC291\Lab5\EFM8_ADC.c:100: SFRPAGE = 0x00;
0051 75A700     656            mov     _SFRPAGE,#0x00
0054            657   ;        C:\ELEC291\Lab5\EFM8_ADC.c:101: ADEN=0; // Disable ADC
0054 C2EF       658            clr     _ADEN
0056            659   ;        C:\ELEC291\Lab5\EFM8_ADC.c:106: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     660            mov     _ADC0CN1,#0x80
0059            661   ;        C:\ELEC291\Lab5\EFM8_ADC.c:110: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     662            mov     _ADC0CF0,#0x20
005C            663   ;        C:\ELEC291\Lab5\EFM8_ADC.c:114: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     664            mov     _ADC0CF1,#0x1E
005F            665   ;        C:\ELEC291\Lab5\EFM8_ADC.c:123: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     666            mov     _ADC0CN0,#0x00
0062            667   ;        C:\ELEC291\Lab5\EFM8_ADC.c:128: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     668            mov     _ADC0CF2,#0x3F
0065            669   ;        C:\ELEC291\Lab5\EFM8_ADC.c:132: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     670            mov     _ADC0CN2,#0x00
0068            671   ;        C:\ELEC291\Lab5\EFM8_ADC.c:134: ADEN=1; // Enable ADC
0068 D2EF       672            setb    _ADEN
006A 22         673            ret
006B            674   ;------------------------------------------------------------
006B            675   ;Allocation info for local variables in function 'Timer3us'
006B            676   ;------------------------------------------------------------
006B            677   ;us                        Allocated to registers r2 
006B            678   ;i                         Allocated to registers r3 
006B            679   ;------------------------------------------------------------
006B            680   ;        C:\ELEC291\Lab5\EFM8_ADC.c:141: void Timer3us(unsigned char us)
006B            681   ;        -----------------------------------------
006B            682   ;         function Timer3us
006B            683   ;        -----------------------------------------
006B            684   _Timer3us:
006B AA82       685            mov     r2,dpl
006D            686   ;        C:\ELEC291\Lab5\EFM8_ADC.c:146: CKCON0|=0b_0100_0000;
006D 438E40     687            orl     _CKCON0,#0x40
0070            688   ;        C:\ELEC291\Lab5\EFM8_ADC.c:149: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     689            mov     _TMR3RL,#0xB8
0073 7593FF     690            mov     (_TMR3RL >> 8),#0xFF
0076            691   ;        C:\ELEC291\Lab5\EFM8_ADC.c:150: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     692            mov     _TMR3,_TMR3RL
0079 859395     693            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            694   ;        C:\ELEC291\Lab5\EFM8_ADC.c:152: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     695            mov     _TMR3CN0,#0x04
007F            696   ;        C:\ELEC291\Lab5\EFM8_ADC.c:153: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       697            mov     r3,#0x00
0081            698   L004004?:
0081 C3         699            clr     c
0082 EB         700            mov     a,r3
0083 9A         701            subb    a,r2
0084 5000       702            jnc     L004007?
0086            703   ;        C:\ELEC291\Lab5\EFM8_ADC.c:155: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            704   L004001?:
0086 E591       705            mov     a,_TMR3CN0
0088 30E780     706            jnb     acc.7,L004001?
008B            707   ;        C:\ELEC291\Lab5\EFM8_ADC.c:156: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     708            anl     _TMR3CN0,#0x7F
008E            709   ;        C:\ELEC291\Lab5\EFM8_ADC.c:153: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         710            inc     r3
008F 8000       711            sjmp    L004004?
0091            712   L004007?:
0091            713   ;        C:\ELEC291\Lab5\EFM8_ADC.c:158: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     714            mov     _TMR3CN0,#0x00
0094 22         715            ret
0095            716   ;------------------------------------------------------------
0095            717   ;Allocation info for local variables in function 'waitms'
0095            718   ;------------------------------------------------------------
0095            719   ;ms                        Allocated to registers r2 r3 
0095            720   ;j                         Allocated to registers r4 r5 
0095            721   ;k                         Allocated to registers r6 
0095            722   ;------------------------------------------------------------
0095            723   ;        C:\ELEC291\Lab5\EFM8_ADC.c:161: void waitms (unsigned int ms)
0095            724   ;        -----------------------------------------
0095            725   ;         function waitms
0095            726   ;        -----------------------------------------
0095            727   _waitms:
0095 AA82       728            mov     r2,dpl
0097 AB83       729            mov     r3,dph
0099            730   ;        C:\ELEC291\Lab5\EFM8_ADC.c:165: for(j=0; j<ms; j++)
0099 7C00       731            mov     r4,#0x00
009B 7D00       732            mov     r5,#0x00
009D            733   L005005?:
009D C3         734            clr     c
009E EC         735            mov     a,r4
009F 9A         736            subb    a,r2
00A0 ED         737            mov     a,r5
00A1 9B         738            subb    a,r3
00A2 5000       739            jnc     L005009?
00A4            740   ;        C:\ELEC291\Lab5\EFM8_ADC.c:166: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       741            mov     r6,#0x00
00A6            742   L005001?:
00A6 BE04C0     743            cjne    r6,#0x04,L005018?
00A9            744   L005018?:
00A9 5000       745            jnc     L005007?
00AB 7582FA     746            mov     dpl,#0xFA
00AE C002       747            push    ar2
00B0 C003       748            push    ar3
00B2 C004       749            push    ar4
00B4 C005       750            push    ar5
00B6 C006       751            push    ar6
00B8 120000     752            lcall   _Timer3us
00BB D006       753            pop     ar6
00BD D005       754            pop     ar5
00BF D004       755            pop     ar4
00C1 D003       756            pop     ar3
00C3 D002       757            pop     ar2
00C5 0E         758            inc     r6
00C6 8000       759            sjmp    L005001?
00C8            760   L005007?:
00C8            761   ;        C:\ELEC291\Lab5\EFM8_ADC.c:165: for(j=0; j<ms; j++)
00C8 0C         762            inc     r4
00C9 BC0000     763            cjne    r4,#0x00,L005005?
00CC 0D         764            inc     r5
00CD 8000       765            sjmp    L005005?
00CF            766   L005009?:
00CF 22         767            ret
00D0            768   ;------------------------------------------------------------
00D0            769   ;Allocation info for local variables in function 'waitus'
00D0            770   ;------------------------------------------------------------
00D0            771   ;us                        Allocated to registers r2 r3 r4 r5 
00D0            772   ;j                         Allocated to registers r4 r5 
00D0            773   ;j_max                     Allocated to registers r6 r7 
00D0            774   ;k                         Allocated to registers r3 
00D0            775   ;k_max                     Allocated to registers r2 
00D0            776   ;------------------------------------------------------------
00D0            777   ;        C:\ELEC291\Lab5\EFM8_ADC.c:170: void waitus (unsigned long us){                 
00D0            778   ;        -----------------------------------------
00D0            779   ;         function waitus
00D0            780   ;        -----------------------------------------
00D0            781   _waitus:
00D0            782   ;        C:\ELEC291\Lab5\EFM8_ADC.c:172: unsigned int j_max = us % 50000; // pre-calc this to save cpu resources
00D0 AA82       783            mov     r2,dpl
00D2 AB83       784            mov     r3,dph
00D4 ACF0       785            mov     r4,b
00D6 FD         786            mov     r5,a
00D7 750050     787            mov     __modulong_PARM_2,#0x50
00DA 7501C3     788            mov     (__modulong_PARM_2 + 1),#0xC3
00DD 750200     789            mov     (__modulong_PARM_2 + 2),#0x00
00E0 750300     790            mov     (__modulong_PARM_2 + 3),#0x00
00E3 C002       791            push    ar2
00E5 C003       792            push    ar3
00E7 C004       793            push    ar4
00E9 C005       794            push    ar5
00EB 120000     795            lcall   __modulong
00EE AE82       796            mov     r6,dpl
00F0 AF83       797            mov     r7,dph
00F2 D005       798            pop     ar5
00F4 D004       799            pop     ar4
00F6 D003       800            pop     ar3
00F8 D002       801            pop     ar2
00FA            802   ;        C:\ELEC291\Lab5\EFM8_ADC.c:174: unsigned char k_max = (char)us/50000;
00FA EA         803            mov     a,r2
00FB 33         804            rlc     a
00FC 95E0       805            subb    a,acc
00FE FB         806            mov     r3,a
00FF FC         807            mov     r4,a
0100 FD         808            mov     r5,a
0101 750050     809            mov     __divslong_PARM_2,#0x50
0104 7501C3     810            mov     (__divslong_PARM_2 + 1),#0xC3
0107 750200     811            mov     (__divslong_PARM_2 + 2),#0x00
010A 750300     812            mov     (__divslong_PARM_2 + 3),#0x00
010D 8A82       813            mov     dpl,r2
010F 8B83       814            mov     dph,r3
0111 8CF0       815            mov     b,r4
0113 ED         816            mov     a,r5
0114 C006       817            push    ar6
0116 C007       818            push    ar7
0118 120000     819            lcall   __divslong
011B AA82       820            mov     r2,dpl
011D ACF0       821            mov     r4,b
011F FD         822            mov     r5,a
0120 D007       823            pop     ar7
0122 D006       824            pop     ar6
0124            825   ;        C:\ELEC291\Lab5\EFM8_ADC.c:176: for(k = 0; k<k_max; k++){
0124 7B00       826            mov     r3,#0x00
0126            827   L006005?:
0126 C3         828            clr     c
0127 EB         829            mov     a,r3
0128 9A         830            subb    a,r2
0129 5000       831            jnc     L006009?
012B            832   ;        C:\ELEC291\Lab5\EFM8_ADC.c:177: for(j = 0; j<j_max; j++){
012B 7C00       833            mov     r4,#0x00
012D 7D00       834            mov     r5,#0x00
012F            835   L006001?:
012F C3         836            clr     c
0130 EC         837            mov     a,r4
0131 9E         838            subb    a,r6
0132 ED         839            mov     a,r5
0133 9F         840            subb    a,r7
0134 5000       841            jnc     L006007?
0136            842   ;        C:\ELEC291\Lab5\EFM8_ADC.c:178: Timer3us(1);
0136 758201     843            mov     dpl,#0x01
0139 C002       844            push    ar2
013B C003       845            push    ar3
013D C004       846            push    ar4
013F C005       847            push    ar5
0141 C006       848            push    ar6
0143 C007       849            push    ar7
0145 120000     850            lcall   _Timer3us
0148 D007       851            pop     ar7
014A D006       852            pop     ar6
014C D005       853            pop     ar5
014E D004       854            pop     ar4
0150 D003       855            pop     ar3
0152 D002       856            pop     ar2
0154            857   ;        C:\ELEC291\Lab5\EFM8_ADC.c:177: for(j = 0; j<j_max; j++){
0154 0C         858            inc     r4
0155 BC0020     859            cjne    r4,#0x00,L006001?
0158 0D         860            inc     r5
0159 8000       861            sjmp    L006001?
015B            862   L006007?:
015B            863   ;        C:\ELEC291\Lab5\EFM8_ADC.c:176: for(k = 0; k<k_max; k++){
015B 0B         864            inc     r3
015C 8000       865            sjmp    L006005?
015E            866   L006009?:
015E 22         867            ret
015F            868   ;------------------------------------------------------------
015F            869   ;Allocation info for local variables in function 'TIMER0_Init'
015F            870   ;------------------------------------------------------------
015F            871   ;------------------------------------------------------------
015F            872   ;        C:\ELEC291\Lab5\EFM8_ADC.c:183: void TIMER0_Init(void)
015F            873   ;        -----------------------------------------
015F            874   ;         function TIMER0_Init
015F            875   ;        -----------------------------------------
015F            876   _TIMER0_Init:
015F            877   ;        C:\ELEC291\Lab5\EFM8_ADC.c:185: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
015F 5389F0     878            anl     _TMOD,#0xF0
0162            879   ;        C:\ELEC291\Lab5\EFM8_ADC.c:186: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit counter
0162 438901     880            orl     _TMOD,#0x01
0165            881   ;        C:\ELEC291\Lab5\EFM8_ADC.c:187: TR0=0; // Stop Timer/Counter 0
0165 C28C       882            clr     _TR0
0167 22         883            ret
0168            884   ;------------------------------------------------------------
0168            885   ;Allocation info for local variables in function 'InitPinADC'
0168            886   ;------------------------------------------------------------
0168            887   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0168            888   ;portno                    Allocated to registers r2 
0168            889   ;mask                      Allocated to registers r3 
0168            890   ;------------------------------------------------------------
0168            891   ;        C:\ELEC291\Lab5\EFM8_ADC.c:192: void InitPinADC (unsigned char portno, unsigned char pinno)
0168            892   ;        -----------------------------------------
0168            893   ;         function InitPinADC
0168            894   ;        -----------------------------------------
0168            895   _InitPinADC:
0168 AA82       896            mov     r2,dpl
016A            897   ;        C:\ELEC291\Lab5\EFM8_ADC.c:196: mask=1<<pinno;
016A 85C8F0     898            mov     b,_InitPinADC_PARM_2
016D 05F0       899            inc     b
016F 7401       900            mov     a,#0x01
0171 8000       901            sjmp    L008013?
0173            902   L008011?:
0173 25E0       903            add     a,acc
0175            904   L008013?:
0175 D5F0E0     905            djnz    b,L008011?
0178 FB         906            mov     r3,a
0179            907   ;        C:\ELEC291\Lab5\EFM8_ADC.c:198: SFRPAGE = 0x20;
0179 75A720     908            mov     _SFRPAGE,#0x20
017C            909   ;        C:\ELEC291\Lab5\EFM8_ADC.c:199: switch (portno)
017C BA0020     910            cjne    r2,#0x00,L008014?
017F 8000       911            sjmp    L008001?
0181            912   L008014?:
0181 BA01A0     913            cjne    r2,#0x01,L008015?
0184 8000       914            sjmp    L008002?
0186            915   L008015?:
0186            916   ;        C:\ELEC291\Lab5\EFM8_ADC.c:201: case 0:
0186 BA0220     917            cjne    r2,#0x02,L008005?
0189 8000       918            sjmp    L008003?
018B            919   L008001?:
018B            920   ;        C:\ELEC291\Lab5\EFM8_ADC.c:202: P0MDIN &= (~mask); // Set pin as analog input
018B EB         921            mov     a,r3
018C F4         922            cpl     a
018D FA         923            mov     r2,a
018E 52F1       924            anl     _P0MDIN,a
0190            925   ;        C:\ELEC291\Lab5\EFM8_ADC.c:203: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0190 EB         926            mov     a,r3
0191 42D4       927            orl     _P0SKIP,a
0193            928   ;        C:\ELEC291\Lab5\EFM8_ADC.c:204: break;
0193            929   ;        C:\ELEC291\Lab5\EFM8_ADC.c:205: case 1:
0193 8000       930            sjmp    L008005?
0195            931   L008002?:
0195            932   ;        C:\ELEC291\Lab5\EFM8_ADC.c:206: P1MDIN &= (~mask); // Set pin as analog input
0195 EB         933            mov     a,r3
0196 F4         934            cpl     a
0197 FA         935            mov     r2,a
0198 52F2       936            anl     _P1MDIN,a
019A            937   ;        C:\ELEC291\Lab5\EFM8_ADC.c:207: P1SKIP |= mask; // Skip Crossbar decoding for this pin
019A EB         938            mov     a,r3
019B 42D5       939            orl     _P1SKIP,a
019D            940   ;        C:\ELEC291\Lab5\EFM8_ADC.c:208: break;
019D            941   ;        C:\ELEC291\Lab5\EFM8_ADC.c:209: case 2:
019D 8000       942            sjmp    L008005?
019F            943   L008003?:
019F            944   ;        C:\ELEC291\Lab5\EFM8_ADC.c:210: P2MDIN &= (~mask); // Set pin as analog input
019F EB         945            mov     a,r3
01A0 F4         946            cpl     a
01A1 FA         947            mov     r2,a
01A2 52F3       948            anl     _P2MDIN,a
01A4            949   ;        C:\ELEC291\Lab5\EFM8_ADC.c:211: P2SKIP |= mask; // Skip Crossbar decoding for this pin
01A4 EB         950            mov     a,r3
01A5 42CC       951            orl     _P2SKIP,a
01A7            952   ;        C:\ELEC291\Lab5\EFM8_ADC.c:215: }
01A7            953   L008005?:
01A7            954   ;        C:\ELEC291\Lab5\EFM8_ADC.c:216: SFRPAGE = 0x00;
01A7 75A700     955            mov     _SFRPAGE,#0x00
01AA 22         956            ret
01AB            957   ;------------------------------------------------------------
01AB            958   ;Allocation info for local variables in function 'ADC_at_Pin'
01AB            959   ;------------------------------------------------------------
01AB            960   ;pin                       Allocated to registers 
01AB            961   ;------------------------------------------------------------
01AB            962   ;        C:\ELEC291\Lab5\EFM8_ADC.c:220: unsigned int ADC_at_Pin(unsigned char pin)
01AB            963   ;        -----------------------------------------
01AB            964   ;         function ADC_at_Pin
01AB            965   ;        -----------------------------------------
01AB            966   _ADC_at_Pin:
01AB 8582BB     967            mov     _ADC0MX,dpl
01AE            968   ;        C:\ELEC291\Lab5\EFM8_ADC.c:223: ADINT = 0;
01AE C2ED       969            clr     _ADINT
01B0            970   ;        C:\ELEC291\Lab5\EFM8_ADC.c:224: ADBUSY = 1;     // Convert voltage at the pin
01B0 D2EC       971            setb    _ADBUSY
01B2            972   ;        C:\ELEC291\Lab5\EFM8_ADC.c:225: while (!ADINT); // Wait for conversion to complete
01B2            973   L009001?:
01B2 30EDA0     974            jnb     _ADINT,L009001?
01B5            975   ;        C:\ELEC291\Lab5\EFM8_ADC.c:226: return (ADC0);
01B5 85BD82     976            mov     dpl,_ADC0
01B8 85BE83     977            mov     dph,(_ADC0 >> 8)
01BB 22         978            ret
01BC            979   ;------------------------------------------------------------
01BC            980   ;Allocation info for local variables in function 'Volts_at_Pin'
01BC            981   ;------------------------------------------------------------
01BC            982   ;pin                       Allocated to registers r2 
01BC            983   ;------------------------------------------------------------
01BC            984   ;        C:\ELEC291\Lab5\EFM8_ADC.c:229: float Volts_at_Pin(unsigned char pin)
01BC            985   ;        -----------------------------------------
01BC            986   ;         function Volts_at_Pin
01BC            987   ;        -----------------------------------------
01BC            988   _Volts_at_Pin:
01BC            989   ;        C:\ELEC291\Lab5\EFM8_ADC.c:231: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111); //b/c 14 bit adc
01BC 120000     990            lcall   _ADC_at_Pin
01BF 120000     991            lcall   ___uint2fs
01C2 AA82       992            mov     r2,dpl
01C4 AB83       993            mov     r3,dph
01C6 ACF0       994            mov     r4,b
01C8 FD         995            mov     r5,a
01C9 C002       996            push    ar2
01CB C003       997            push    ar3
01CD C004       998            push    ar4
01CF C005       999            push    ar5
01D1 906C8B    1000            mov     dptr,#0x6C8B
01D4 75F053    1001            mov     b,#0x53
01D7 7440      1002            mov     a,#0x40
01D9 120000    1003            lcall   ___fsmul
01DC AA82      1004            mov     r2,dpl
01DE AB83      1005            mov     r3,dph
01E0 ACF0      1006            mov     r4,b
01E2 FD        1007            mov     r5,a
01E3 E581      1008            mov     a,sp
01E5 24FC      1009            add     a,#0xfc
01E7 F581      1010            mov     sp,a
01E9 E4        1011            clr     a
01EA C0E0      1012            push    acc
01EC 74FC      1013            mov     a,#0xFC
01EE C0E0      1014            push    acc
01F0 747F      1015            mov     a,#0x7F
01F2 C0E0      1016            push    acc
01F4 7446      1017            mov     a,#0x46
01F6 C0E0      1018            push    acc
01F8 8A82      1019            mov     dpl,r2
01FA 8B83      1020            mov     dph,r3
01FC 8CF0      1021            mov     b,r4
01FE ED        1022            mov     a,r5
01FF 120000    1023            lcall   ___fsdiv
0202 AA82      1024            mov     r2,dpl
0204 AB83      1025            mov     r3,dph
0206 ACF0      1026            mov     r4,b
0208 FD        1027            mov     r5,a
0209 E581      1028            mov     a,sp
020B 24FC      1029            add     a,#0xfc
020D F581      1030            mov     sp,a
020F 8A82      1031            mov     dpl,r2
0211 8B83      1032            mov     dph,r3
0213 8CF0      1033            mov     b,r4
0215 ED        1034            mov     a,r5
0216 22        1035            ret
0217           1036   ;------------------------------------------------------------
0217           1037   ;Allocation info for local variables in function 'LCD_pulse'
0217           1038   ;------------------------------------------------------------
0217           1039   ;------------------------------------------------------------
0217           1040   ;        C:\ELEC291\Lab5\EFM8_ADC.c:235: void LCD_pulse (void)
0217           1041   ;        -----------------------------------------
0217           1042   ;         function LCD_pulse
0217           1043   ;        -----------------------------------------
0217           1044   _LCD_pulse:
0217           1045   ;        C:\ELEC291\Lab5\EFM8_ADC.c:237: LCD_E=1;
0217 D2A0      1046            setb    _P2_0
0219           1047   ;        C:\ELEC291\Lab5\EFM8_ADC.c:238: Timer3us(40);
0219 758228    1048            mov     dpl,#0x28
021C 120000    1049            lcall   _Timer3us
021F           1050   ;        C:\ELEC291\Lab5\EFM8_ADC.c:239: LCD_E=0;
021F C2A0      1051            clr     _P2_0
0221 22        1052            ret
0222           1053   ;------------------------------------------------------------
0222           1054   ;Allocation info for local variables in function 'LCD_byte'
0222           1055   ;------------------------------------------------------------
0222           1056   ;x                         Allocated to registers r2 
0222           1057   ;------------------------------------------------------------
0222           1058   ;        C:\ELEC291\Lab5\EFM8_ADC.c:241: void LCD_byte (unsigned char x)
0222           1059   ;        -----------------------------------------
0222           1060   ;         function LCD_byte
0222           1061   ;        -----------------------------------------
0222           1062   _LCD_byte:
0222 AA82      1063            mov     r2,dpl
0224           1064   ;        C:\ELEC291\Lab5\EFM8_ADC.c:244: ACC=x; //Send high nible
0224 8AE0      1065            mov     _ACC,r2
0226           1066   ;        C:\ELEC291\Lab5\EFM8_ADC.c:245: LCD_D7=ACC_7;
0226 A2E7      1067            mov     c,_ACC_7
0228 9290      1068            mov     _P1_0,c
022A           1069   ;        C:\ELEC291\Lab5\EFM8_ADC.c:246: LCD_D6=ACC_6;
022A A2E6      1070            mov     c,_ACC_6
022C 9291      1071            mov     _P1_1,c
022E           1072   ;        C:\ELEC291\Lab5\EFM8_ADC.c:247: LCD_D5=ACC_5;
022E A2E5      1073            mov     c,_ACC_5
0230 9292      1074            mov     _P1_2,c
0232           1075   ;        C:\ELEC291\Lab5\EFM8_ADC.c:248: LCD_D4=ACC_4;
0232 A2E4      1076            mov     c,_ACC_4
0234 9293      1077            mov     _P1_3,c
0236           1078   ;        C:\ELEC291\Lab5\EFM8_ADC.c:249: LCD_pulse();
0236 C002      1079            push    ar2
0238 120000    1080            lcall   _LCD_pulse
023B           1081   ;        C:\ELEC291\Lab5\EFM8_ADC.c:250: Timer3us(40);
023B 758228    1082            mov     dpl,#0x28
023E 120000    1083            lcall   _Timer3us
0241 D002      1084            pop     ar2
0243           1085   ;        C:\ELEC291\Lab5\EFM8_ADC.c:251: ACC=x; //Send low nible
0243 8AE0      1086            mov     _ACC,r2
0245           1087   ;        C:\ELEC291\Lab5\EFM8_ADC.c:252: LCD_D7=ACC_3;
0245 A2E3      1088            mov     c,_ACC_3
0247 9290      1089            mov     _P1_0,c
0249           1090   ;        C:\ELEC291\Lab5\EFM8_ADC.c:253: LCD_D6=ACC_2;
0249 A2E2      1091            mov     c,_ACC_2
024B 9291      1092            mov     _P1_1,c
024D           1093   ;        C:\ELEC291\Lab5\EFM8_ADC.c:254: LCD_D5=ACC_1;
024D A2E1      1094            mov     c,_ACC_1
024F 9292      1095            mov     _P1_2,c
0251           1096   ;        C:\ELEC291\Lab5\EFM8_ADC.c:255: LCD_D4=ACC_0;
0251 A2E0      1097            mov     c,_ACC_0
0253 9293      1098            mov     _P1_3,c
0255           1099   ;        C:\ELEC291\Lab5\EFM8_ADC.c:256: LCD_pulse();
0255 020000    1100            ljmp    _LCD_pulse
0258           1101   ;------------------------------------------------------------
0258           1102   ;Allocation info for local variables in function 'WriteData'
0258           1103   ;------------------------------------------------------------
0258           1104   ;x                         Allocated to registers r2 
0258           1105   ;------------------------------------------------------------
0258           1106   ;        C:\ELEC291\Lab5\EFM8_ADC.c:259: void WriteData (unsigned char x)
0258           1107   ;        -----------------------------------------
0258           1108   ;         function WriteData
0258           1109   ;        -----------------------------------------
0258           1110   _WriteData:
0258 AA82      1111            mov     r2,dpl
025A           1112   ;        C:\ELEC291\Lab5\EFM8_ADC.c:261: LCD_RS=1;
025A D297      1113            setb    _P1_7
025C           1114   ;        C:\ELEC291\Lab5\EFM8_ADC.c:262: LCD_byte(x);
025C 8A82      1115            mov     dpl,r2
025E 120000    1116            lcall   _LCD_byte
0261           1117   ;        C:\ELEC291\Lab5\EFM8_ADC.c:263: waitms(2);
0261 900002    1118            mov     dptr,#0x0002
0264 020000    1119            ljmp    _waitms
0267           1120   ;------------------------------------------------------------
0267           1121   ;Allocation info for local variables in function 'WriteCommand'
0267           1122   ;------------------------------------------------------------
0267           1123   ;x                         Allocated to registers r2 
0267           1124   ;------------------------------------------------------------
0267           1125   ;        C:\ELEC291\Lab5\EFM8_ADC.c:266: void WriteCommand (unsigned char x)
0267           1126   ;        -----------------------------------------
0267           1127   ;         function WriteCommand
0267           1128   ;        -----------------------------------------
0267           1129   _WriteCommand:
0267 AA82      1130            mov     r2,dpl
0269           1131   ;        C:\ELEC291\Lab5\EFM8_ADC.c:268: LCD_RS=0;
0269 C297      1132            clr     _P1_7
026B           1133   ;        C:\ELEC291\Lab5\EFM8_ADC.c:269: LCD_byte(x);
026B 8A82      1134            mov     dpl,r2
026D 120000    1135            lcall   _LCD_byte
0270           1136   ;        C:\ELEC291\Lab5\EFM8_ADC.c:270: waitms(5);
0270 900005    1137            mov     dptr,#0x0005
0273 020000    1138            ljmp    _waitms
0276           1139   ;------------------------------------------------------------
0276           1140   ;Allocation info for local variables in function 'LCD_4BIT'
0276           1141   ;------------------------------------------------------------
0276           1142   ;------------------------------------------------------------
0276           1143   ;        C:\ELEC291\Lab5\EFM8_ADC.c:273: void LCD_4BIT (void)
0276           1144   ;        -----------------------------------------
0276           1145   ;         function LCD_4BIT
0276           1146   ;        -----------------------------------------
0276           1147   _LCD_4BIT:
0276           1148   ;        C:\ELEC291\Lab5\EFM8_ADC.c:275: LCD_E=0; // Resting state of LCD's enable is zero
0276 C2A0      1149            clr     _P2_0
0278           1150   ;        C:\ELEC291\Lab5\EFM8_ADC.c:277: waitms(20);
0278 900014    1151            mov     dptr,#0x0014
027B 120000    1152            lcall   _waitms
027E           1153   ;        C:\ELEC291\Lab5\EFM8_ADC.c:279: WriteCommand(0x33);
027E 758233    1154            mov     dpl,#0x33
0281 120000    1155            lcall   _WriteCommand
0284           1156   ;        C:\ELEC291\Lab5\EFM8_ADC.c:280: WriteCommand(0x33);
0284 758233    1157            mov     dpl,#0x33
0287 120000    1158            lcall   _WriteCommand
028A           1159   ;        C:\ELEC291\Lab5\EFM8_ADC.c:281: WriteCommand(0x32); // Change to 4-bit mode
028A 758232    1160            mov     dpl,#0x32
028D 120000    1161            lcall   _WriteCommand
0290           1162   ;        C:\ELEC291\Lab5\EFM8_ADC.c:284: WriteCommand(0x28);
0290 758228    1163            mov     dpl,#0x28
0293 120000    1164            lcall   _WriteCommand
0296           1165   ;        C:\ELEC291\Lab5\EFM8_ADC.c:285: WriteCommand(0x0c);
0296 75820C    1166            mov     dpl,#0x0C
0299 120000    1167            lcall   _WriteCommand
029C           1168   ;        C:\ELEC291\Lab5\EFM8_ADC.c:286: WriteCommand(0x01); // Clear screen command (takes some time)
029C 758201    1169            mov     dpl,#0x01
029F 120000    1170            lcall   _WriteCommand
02A2           1171   ;        C:\ELEC291\Lab5\EFM8_ADC.c:287: waitms(20); // Wait for clear screen command to finsih.
02A2 900014    1172            mov     dptr,#0x0014
02A5 020000    1173            ljmp    _waitms
02A8           1174   ;------------------------------------------------------------
02A8           1175   ;Allocation info for local variables in function 'LCDprint'
02A8           1176   ;------------------------------------------------------------
02A8           1177   ;line                      Allocated with name '_LCDprint_PARM_2'
02A8           1178   ;string                    Allocated to registers r2 r3 r4 
02A8           1179   ;j                         Allocated to registers r5 r6 
02A8           1180   ;------------------------------------------------------------
02A8           1181   ;        C:\ELEC291\Lab5\EFM8_ADC.c:290: void LCDprint(char * string, unsigned char line, bit clear)
02A8           1182   ;        -----------------------------------------
02A8           1183   ;         function LCDprint
02A8           1184   ;        -----------------------------------------
02A8           1185   _LCDprint:
02A8 AA82      1186            mov     r2,dpl
02AA AB83      1187            mov     r3,dph
02AC ACF0      1188            mov     r4,b
02AE           1189   ;        C:\ELEC291\Lab5\EFM8_ADC.c:294: WriteCommand(line==2?0xc0:0x80);
02AE 7402      1190            mov     a,#0x02
02B0 B5B8E8    1191            cjne    a,_LCDprint_PARM_2,L016013?
02B3 7DC0      1192            mov     r5,#0xC0
02B5 8000      1193            sjmp    L016014?
02B7           1194   L016013?:
02B7 7D80      1195            mov     r5,#0x80
02B9           1196   L016014?:
02B9 8D82      1197            mov     dpl,r5
02BB C002      1198            push    ar2
02BD C003      1199            push    ar3
02BF C004      1200            push    ar4
02C1 120000    1201            lcall   _WriteCommand
02C4           1202   ;        C:\ELEC291\Lab5\EFM8_ADC.c:295: waitms(5);
02C4 900005    1203            mov     dptr,#0x0005
02C7 120000    1204            lcall   _waitms
02CA D004      1205            pop     ar4
02CC D003      1206            pop     ar3
02CE D002      1207            pop     ar2
02D0           1208   ;        C:\ELEC291\Lab5\EFM8_ADC.c:296: for(j=0; string[j]!=0; j++)     WriteData(string[j]);// Write the message
02D0 7D00      1209            mov     r5,#0x00
02D2 7E00      1210            mov     r6,#0x00
02D4           1211   L016003?:
02D4 ED        1212            mov     a,r5
02D5 2A        1213            add     a,r2
02D6 FF        1214            mov     r7,a
02D7 EE        1215            mov     a,r6
02D8 3B        1216            addc    a,r3
02D9 F8        1217            mov     r0,a
02DA 8C01      1218            mov     ar1,r4
02DC 8F82      1219            mov     dpl,r7
02DE 8883      1220            mov     dph,r0
02E0 89F0      1221            mov     b,r1
02E2 120000    1222            lcall   __gptrget
02E5 FF        1223            mov     r7,a
02E6 6000      1224            jz      L016006?
02E8 8F82      1225            mov     dpl,r7
02EA C002      1226            push    ar2
02EC C003      1227            push    ar3
02EE C004      1228            push    ar4
02F0 C005      1229            push    ar5
02F2 C006      1230            push    ar6
02F4 120000    1231            lcall   _WriteData
02F7 D006      1232            pop     ar6
02F9 D005      1233            pop     ar5
02FB D004      1234            pop     ar4
02FD D003      1235            pop     ar3
02FF D002      1236            pop     ar2
0301 0D        1237            inc     r5
0302 BD0068    1238            cjne    r5,#0x00,L016003?
0305 0E        1239            inc     r6
0306 8000      1240            sjmp    L016003?
0308           1241   L016006?:
0308           1242   ;        C:\ELEC291\Lab5\EFM8_ADC.c:297: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0308 306828    1243            jnb     _LCDprint_PARM_3,L016011?
030B 8D02      1244            mov     ar2,r5
030D 8E03      1245            mov     ar3,r6
030F           1246   L016007?:
030F C3        1247            clr     c
0310 EA        1248            mov     a,r2
0311 9410      1249            subb    a,#0x10
0313 EB        1250            mov     a,r3
0314 6480      1251            xrl     a,#0x80
0316 9480      1252            subb    a,#0x80
0318 5000      1253            jnc     L016011?
031A 758220    1254            mov     dpl,#0x20
031D C002      1255            push    ar2
031F C003      1256            push    ar3
0321 120000    1257            lcall   _WriteData
0324 D003      1258            pop     ar3
0326 D002      1259            pop     ar2
0328 0A        1260            inc     r2
0329 BA0068    1261            cjne    r2,#0x00,L016007?
032C 0B        1262            inc     r3
032D 8000      1263            sjmp    L016007?
032F           1264   L016011?:
032F 22        1265            ret
0330           1266   ;------------------------------------------------------------
0330           1267   ;Allocation info for local variables in function 'Get_ADC'
0330           1268   ;------------------------------------------------------------
0330           1269   ;------------------------------------------------------------
0330           1270   ;        C:\ELEC291\Lab5\EFM8_ADC.c:300: unsigned int Get_ADC(void)
0330           1271   ;        -----------------------------------------
0330           1272   ;         function Get_ADC
0330           1273   ;        -----------------------------------------
0330           1274   _Get_ADC:
0330           1275   ;        C:\ELEC291\Lab5\EFM8_ADC.c:302: ADINT = 0;
0330 C2ED      1276            clr     _ADINT
0332           1277   ;        C:\ELEC291\Lab5\EFM8_ADC.c:303: ADBUSY = 1;
0332 D2EC      1278            setb    _ADBUSY
0334           1279   ;        C:\ELEC291\Lab5\EFM8_ADC.c:304: while (!ADINT);
0334           1280   L017001?:
0334 30EDA8    1281            jnb     _ADINT,L017001?
0337           1282   ;        C:\ELEC291\Lab5\EFM8_ADC.c:305: return (ADC0);
0337 85BD82    1283            mov     dpl,_ADC0
033A 85BE83    1284            mov     dph,(_ADC0 >> 8)
033D 22        1285            ret
033E           1286   ;------------------------------------------------------------
033E           1287   ;Allocation info for local variables in function 'main'
033E           1288   ;------------------------------------------------------------
033E           1289   ;v                         Allocated with name '_main_v_1_79'
033E           1290   ;buffer                    Allocated with name '_main_buffer_1_79'
033E           1291   ;overflow                  Allocated with name '_main_overflow_1_79'
033E           1292   ;halfPeriod_ref            Allocated to registers r2 r3 r4 r5 
033E           1293   ;period_ref                Allocated with name '_main_period_ref_1_79'
033E           1294   ;freq_ref                  Allocated with name '_main_freq_ref_1_79'
033E           1295   ;quarterPeriod_ref         Allocated with name '_main_quarterPeriod_ref_1_79'
033E           1296   ;prev_period_ref           Allocated with name '_main_prev_period_ref_1_79'
033E           1297   ;vrms_ref                  Allocated with name '_main_vrms_ref_1_79'
033E           1298   ;halfPeriod_spl            Allocated to registers r2 r3 r4 r5 
033E           1299   ;period_spl                Allocated to registers r2 r3 r4 r5 
033E           1300   ;freq_spl                  Allocated with name '_main_freq_spl_1_79'
033E           1301   ;quarterperiod_spl         Allocated with name '_main_quarterperiod_spl_1_79'
033E           1302   ;prev_period_spl           Allocated with name '_main_prev_period_spl_1_79'
033E           1303   ;------------------------------------------------------------
033E           1304   ;        C:\ELEC291\Lab5\EFM8_ADC.c:309: void main (void)
033E           1305   ;        -----------------------------------------
033E           1306   ;         function main
033E           1307   ;        -----------------------------------------
033E           1308   _main:
033E           1309   ;        C:\ELEC291\Lab5\EFM8_ADC.c:328: LCD_4BIT();
033E 120000    1310            lcall   _LCD_4BIT
0341           1311   ;        C:\ELEC291\Lab5\EFM8_ADC.c:329: TIMER0_Init();
0341 120000    1312            lcall   _TIMER0_Init
0344           1313   ;        C:\ELEC291\Lab5\EFM8_ADC.c:331: waitms(500); // Give PuTTy a chance to start before sending
0344 9001F4    1314            mov     dptr,#0x01F4
0347 120000    1315            lcall   _waitms
034A           1316   ;        C:\ELEC291\Lab5\EFM8_ADC.c:332: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
034A 74E8      1317            mov     a,#__str_0
034C C0E0      1318            push    acc
034E 74C1      1319            mov     a,#(__str_0 >> 8)
0350 C0E0      1320            push    acc
0352 7480      1321            mov     a,#0x80
0354 C0E0      1322            push    acc
0356 120000    1323            lcall   _printf
0359 1581      1324            dec     sp
035B 1581      1325            dec     sp
035D 1581      1326            dec     sp
035F           1327   ;        C:\ELEC291\Lab5\EFM8_ADC.c:337: __FILE__, __DATE__, __TIME__);
035F           1328   ;        C:\ELEC291\Lab5\EFM8_ADC.c:336: "Compiled: %s, %s\n\n",
035F 7468      1329            mov     a,#__str_4
0361 C0E0      1330            push    acc
0363 74C2      1331            mov     a,#(__str_4 >> 8)
0365 C0E0      1332            push    acc
0367 7480      1333            mov     a,#0x80
0369 C0E0      1334            push    acc
036B 74A8      1335            mov     a,#__str_3
036D C0E0      1336            push    acc
036F 74C2      1337            mov     a,#(__str_3 >> 8)
0371 C0E0      1338            push    acc
0373 7480      1339            mov     a,#0x80
0375 C0E0      1340            push    acc
0377 74E8      1341            mov     a,#__str_2
0379 C0E0      1342            push    acc
037B 74C2      1343            mov     a,#(__str_2 >> 8)
037D C0E0      1344            push    acc
037F 7480      1345            mov     a,#0x80
0381 C0E0      1346            push    acc
0383 7428      1347            mov     a,#__str_1
0385 C0E0      1348            push    acc
0387 74C3      1349            mov     a,#(__str_1 >> 8)
0389 C0E0      1350            push    acc
038B 7480      1351            mov     a,#0x80
038D C0E0      1352            push    acc
038F 120000    1353            lcall   _printf
0392 E581      1354            mov     a,sp
0394 24F4      1355            add     a,#0xf4
0396 F581      1356            mov     sp,a
0398           1357   ;        C:\ELEC291\Lab5\EFM8_ADC.c:339: InitPinADC(2, 2); // Configure P2.2 as analog input
0398 75C802    1358            mov     _InitPinADC_PARM_2,#0x02
039B 758202    1359            mov     dpl,#0x02
039E 120000    1360            lcall   _InitPinADC
03A1           1361   ;        C:\ELEC291\Lab5\EFM8_ADC.c:340: InitPinADC(2, 3); // Configure P2.3 as analog input
03A1 75C803    1362            mov     _InitPinADC_PARM_2,#0x03
03A4 758202    1363            mov     dpl,#0x02
03A7 120000    1364            lcall   _InitPinADC
03AA           1365   ;        C:\ELEC291\Lab5\EFM8_ADC.c:341: InitPinADC(2, 4); // Configure P2.4 as analog input
03AA 75C804    1366            mov     _InitPinADC_PARM_2,#0x04
03AD 758202    1367            mov     dpl,#0x02
03B0 120000    1368            lcall   _InitPinADC
03B3           1369   ;        C:\ELEC291\Lab5\EFM8_ADC.c:342: InitPinADC(2, 5); // Configure P2.5 as analog input
03B3 75C805    1370            mov     _InitPinADC_PARM_2,#0x05
03B6 758202    1371            mov     dpl,#0x02
03B9 120000    1372            lcall   _InitPinADC
03BC           1373   ;        C:\ELEC291\Lab5\EFM8_ADC.c:343: InitPinADC(0, 1);
03BC 75C801    1374            mov     _InitPinADC_PARM_2,#0x01
03BF 758200    1375            mov     dpl,#0x00
03C2 120000    1376            lcall   _InitPinADC
03C5           1377   ;        C:\ELEC291\Lab5\EFM8_ADC.c:344: InitADC();
03C5 120000    1378            lcall   _InitADC
03C8           1379   ;        C:\ELEC291\Lab5\EFM8_ADC.c:346: prev_period_ref = 10000;        // initilize these to a period value thats impossible to get
03C8 759000    1380            mov     _main_prev_period_ref_1_79,#0x00
03CB 759140    1381            mov     (_main_prev_period_ref_1_79 + 1),#0x40
03CE 75921C    1382            mov     (_main_prev_period_ref_1_79 + 2),#0x1C
03D1 759346    1383            mov     (_main_prev_period_ref_1_79 + 3),#0x46
03D4           1384   ;        C:\ELEC291\Lab5\EFM8_ADC.c:347: prev_period_spl = 10000;
03D4 758000    1385            mov     _main_prev_period_spl_1_79,#0x00
03D7 758140    1386            mov     (_main_prev_period_spl_1_79 + 1),#0x40
03DA 75821C    1387            mov     (_main_prev_period_spl_1_79 + 2),#0x1C
03DD 758346    1388            mov     (_main_prev_period_spl_1_79 + 3),#0x46
03E0           1389   ;        C:\ELEC291\Lab5\EFM8_ADC.c:349: while(1)
03E0           1390   L018045?:
03E0           1391   ;        C:\ELEC291\Lab5\EFM8_ADC.c:353: ADC0MX=QFP32_MUX_P2_5;          // <---- PORT FOR REFERENCE SIGNAL
03E0 75BB12    1392            mov     _ADC0MX,#0x12
03E3           1393   ;        C:\ELEC291\Lab5\EFM8_ADC.c:355: ADINT = 0;
03E3 C2ED      1394            clr     _ADINT
03E5           1395   ;        C:\ELEC291\Lab5\EFM8_ADC.c:356: ADBUSY=1;
03E5 D2EC      1396            setb    _ADBUSY
03E7           1397   ;        C:\ELEC291\Lab5\EFM8_ADC.c:357: while (!ADINT);                         // wait for conversion to complete
03E7           1398   L018001?:
03E7 30EDA8    1399            jnb     _ADINT,L018001?
03EA           1400   ;        C:\ELEC291\Lab5\EFM8_ADC.c:358: while (Get_ADC()!=0);   // wait for signal to be 0
03EA           1401   L018004?:
03EA 120000    1402            lcall   _Get_ADC
03ED E582      1403            mov     a,dpl
03EF 8583F0    1404            mov     b,dph
03F2 45F0      1405            orl     a,b
03F4 7000      1406            jnz     L018004?
03F6           1407   ;        C:\ELEC291\Lab5\EFM8_ADC.c:359: while (Get_ADC()==0);   // wait for signal to be pos
03F6           1408   L018007?:
03F6 120000    1409            lcall   _Get_ADC
03F9 E582      1410            mov     a,dpl
03FB 8583F0    1411            mov     b,dph
03FE 45F0      1412            orl     a,b
0400 6000      1413            jz      L018007?
0402           1414   ;        C:\ELEC291\Lab5\EFM8_ADC.c:360: overflow_count = 0;             // reset timer 
0402 75F800    1415            mov     _overflow_count,#0x00
0405           1416   ;        C:\ELEC291\Lab5\EFM8_ADC.c:361: TL0=0;
0405 758A00    1417            mov     _TL0,#0x00
0408           1418   ;        C:\ELEC291\Lab5\EFM8_ADC.c:362: TH0=0;
0408 758C00    1419            mov     _TH0,#0x00
040B           1420   ;        C:\ELEC291\Lab5\EFM8_ADC.c:363: TR0=1; // start timer 0                 
040B D28C      1421            setb    _TR0
040D           1422   ;        C:\ELEC291\Lab5\EFM8_ADC.c:364: while (Get_ADC()!=0){
040D           1423   L018012?:
040D 120000    1424            lcall   _Get_ADC
0410 E582      1425            mov     a,dpl
0412 8583F0    1426            mov     b,dph
0415 45F0      1427            orl     a,b
0417 6000      1428            jz      L018014?
0419           1429   ;        C:\ELEC291\Lab5\EFM8_ADC.c:365: if (TF0==1){
0419           1430   ;        C:\ELEC291\Lab5\EFM8_ADC.c:366: TF0=0;
0419 108DE8    1431            jbc     _TF0,L018074?
041C 8000      1432            sjmp    L018012?
041E           1433   L018074?:
041E           1434   ;        C:\ELEC291\Lab5\EFM8_ADC.c:367: overflow_count++;       // count overflows
041E 05F8      1435            inc     _overflow_count
0420 8000      1436            sjmp    L018012?
0422           1437   L018014?:
0422           1438   ;        C:\ELEC291\Lab5\EFM8_ADC.c:370: TR0=0; // stop timer 0
0422 C28C      1439            clr     _TR0
0424           1440   ;        C:\ELEC291\Lab5\EFM8_ADC.c:371: halfPeriod_ref=(overflow_count*65536.0 + TH0*256.0 + TL0)*(12.0/SYSCLK);        // {TH0,TL0} -> [15:0]
0424 85F882    1441            mov     dpl,_overflow_count
0427 120000    1442            lcall   ___uchar2fs
042A AE82      1443            mov     r6,dpl
042C AF83      1444            mov     r7,dph
042E A8F0      1445            mov     r0,b
0430 F9        1446            mov     r1,a
0431 C006      1447            push    ar6
0433 C007      1448            push    ar7
0435 C000      1449            push    ar0
0437 C001      1450            push    ar1
0439 900000    1451            mov     dptr,#0x0000
043C 75F080    1452            mov     b,#0x80
043F 7447      1453            mov     a,#0x47
0441 120000    1454            lcall   ___fsmul
0444 AE82      1455            mov     r6,dpl
0446 AF83      1456            mov     r7,dph
0448 A8F0      1457            mov     r0,b
044A F9        1458            mov     r1,a
044B E581      1459            mov     a,sp
044D 24FC      1460            add     a,#0xfc
044F F581      1461            mov     sp,a
0451 858C82    1462            mov     dpl,_TH0
0454 C006      1463            push    ar6
0456 C007      1464            push    ar7
0458 C000      1465            push    ar0
045A C001      1466            push    ar1
045C 120000    1467            lcall   ___uchar2fs
045F AA82      1468            mov     r2,dpl
0461 AB83      1469            mov     r3,dph
0463 ACF0      1470            mov     r4,b
0465 FD        1471            mov     r5,a
0466 C002      1472            push    ar2
0468 C003      1473            push    ar3
046A C004      1474            push    ar4
046C C005      1475            push    ar5
046E 900000    1476            mov     dptr,#0x0000
0471 75F080    1477            mov     b,#0x80
0474 7443      1478            mov     a,#0x43
0476 120000    1479            lcall   ___fsmul
0479 AA82      1480            mov     r2,dpl
047B AB83      1481            mov     r3,dph
047D ACF0      1482            mov     r4,b
047F FD        1483            mov     r5,a
0480 E581      1484            mov     a,sp
0482 24FC      1485            add     a,#0xfc
0484 F581      1486            mov     sp,a
0486 D001      1487            pop     ar1
0488 D000      1488            pop     ar0
048A D007      1489            pop     ar7
048C D006      1490            pop     ar6
048E C002      1491            push    ar2
0490 C003      1492            push    ar3
0492 C004      1493            push    ar4
0494 C005      1494            push    ar5
0496 8E82      1495            mov     dpl,r6
0498 8F83      1496            mov     dph,r7
049A 88F0      1497            mov     b,r0
049C E9        1498            mov     a,r1
049D 120000    1499            lcall   ___fsadd
04A0 AA82      1500            mov     r2,dpl
04A2 AB83      1501            mov     r3,dph
04A4 ACF0      1502            mov     r4,b
04A6 FD        1503            mov     r5,a
04A7 E581      1504            mov     a,sp
04A9 24FC      1505            add     a,#0xfc
04AB F581      1506            mov     sp,a
04AD AE8A      1507            mov     r6,_TL0
04AF 7F00      1508            mov     r7,#0x00
04B1 8E82      1509            mov     dpl,r6
04B3 8F83      1510            mov     dph,r7
04B5 C002      1511            push    ar2
04B7 C003      1512            push    ar3
04B9 C004      1513            push    ar4
04BB C005      1514            push    ar5
04BD 120000    1515            lcall   ___sint2fs
04C0 AE82      1516            mov     r6,dpl
04C2 AF83      1517            mov     r7,dph
04C4 A8F0      1518            mov     r0,b
04C6 F9        1519            mov     r1,a
04C7 D005      1520            pop     ar5
04C9 D004      1521            pop     ar4
04CB D003      1522            pop     ar3
04CD D002      1523            pop     ar2
04CF C006      1524            push    ar6
04D1 C007      1525            push    ar7
04D3 C000      1526            push    ar0
04D5 C001      1527            push    ar1
04D7 8A82      1528            mov     dpl,r2
04D9 8B83      1529            mov     dph,r3
04DB 8CF0      1530            mov     b,r4
04DD ED        1531            mov     a,r5
04DE 120000    1532            lcall   ___fsadd
04E1 AA82      1533            mov     r2,dpl
04E3 AB83      1534            mov     r3,dph
04E5 ACF0      1535            mov     r4,b
04E7 FD        1536            mov     r5,a
04E8 E581      1537            mov     a,sp
04EA 24FC      1538            add     a,#0xfc
04EC F581      1539            mov     sp,a
04EE C002      1540            push    ar2
04F0 C003      1541            push    ar3
04F2 C004      1542            push    ar4
04F4 C005      1543            push    ar5
04F6 90F4FC    1544            mov     dptr,#0xF4FC
04F9 75F032    1545            mov     b,#0x32
04FC 7434      1546            mov     a,#0x34
04FE 120000    1547            lcall   ___fsmul
0501 AA82      1548            mov     r2,dpl
0503 AB83      1549            mov     r3,dph
0505 ACF0      1550            mov     r4,b
0507 FD        1551            mov     r5,a
0508 E581      1552            mov     a,sp
050A 24FC      1553            add     a,#0xfc
050C F581      1554            mov     sp,a
050E           1555   ;        C:\ELEC291\Lab5\EFM8_ADC.c:373: overflow_count = 0;             
050E 75F800    1556            mov     _overflow_count,#0x00
0511           1557   ;        C:\ELEC291\Lab5\EFM8_ADC.c:374: TL0=0;
0511 758A00    1558            mov     _TL0,#0x00
0514           1559   ;        C:\ELEC291\Lab5\EFM8_ADC.c:375: TH0=0;
0514 758C00    1560            mov     _TH0,#0x00
0517           1561   ;        C:\ELEC291\Lab5\EFM8_ADC.c:377: period_ref = 2.0*halfPeriod_ref;
0517 C002      1562            push    ar2
0519 C003      1563            push    ar3
051B C004      1564            push    ar4
051D C005      1565            push    ar5
051F 900000    1566            mov     dptr,#(0x00&0x00ff)
0522 E4        1567            clr     a
0523 F5F0      1568            mov     b,a
0525 7440      1569            mov     a,#0x40
0527 120000    1570            lcall   ___fsmul
052A 8582A0    1571            mov     _main_period_ref_1_79,dpl
052D 8583A1    1572            mov     (_main_period_ref_1_79 + 1),dph
0530 85F0A2    1573            mov     (_main_period_ref_1_79 + 2),b
0533 F5A3      1574            mov     (_main_period_ref_1_79 + 3),a
0535 E581      1575            mov     a,sp
0537 24FC      1576            add     a,#0xfc
0539 F581      1577            mov     sp,a
053B           1578   ;        C:\ELEC291\Lab5\EFM8_ADC.c:379: if(period_ref <= 0.0002){       // freq never exceeds 5000 Hz, ignore all that is above that            
053B 7417      1579            mov     a,#0x17
053D C0E0      1580            push    acc
053F 74B7      1581            mov     a,#0xB7
0541 C0E0      1582            push    acc
0543 7451      1583            mov     a,#0x51
0545 C0E0      1584            push    acc
0547 7439      1585            mov     a,#0x39
0549 C0E0      1586            push    acc
054B 85A082    1587            mov     dpl,_main_period_ref_1_79
054E 85A183    1588            mov     dph,(_main_period_ref_1_79 + 1)
0551 85A2F0    1589            mov     b,(_main_period_ref_1_79 + 2)
0554 E5A3      1590            mov     a,(_main_period_ref_1_79 + 3)
0556 120000    1591            lcall   ___fsgt
0559 AE82      1592            mov     r6,dpl
055B E581      1593            mov     a,sp
055D 24FC      1594            add     a,#0xfc
055F F581      1595            mov     sp,a
0561 EE        1596            mov     a,r6
0562 7000      1597            jnz     L018016?
0564           1598   ;        C:\ELEC291\Lab5\EFM8_ADC.c:380: period_ref = prev_period_ref;
0564 8590A0    1599            mov     _main_period_ref_1_79,_main_prev_period_ref_1_79
0567 8591A1    1600            mov     (_main_period_ref_1_79 + 1),(_main_prev_period_ref_1_79 + 1)
056A 8592A2    1601            mov     (_main_period_ref_1_79 + 2),(_main_prev_period_ref_1_79 + 2)
056D 8593A3    1602            mov     (_main_period_ref_1_79 + 3),(_main_prev_period_ref_1_79 + 3)
0570 8000      1603            sjmp    L018017?
0572           1604   L018016?:
0572           1605   ;        C:\ELEC291\Lab5\EFM8_ADC.c:382: prev_period_ref = period_ref;
0572 85A090    1606            mov     _main_prev_period_ref_1_79,_main_period_ref_1_79
0575 85A191    1607            mov     (_main_prev_period_ref_1_79 + 1),(_main_period_ref_1_79 + 1)
0578 85A292    1608            mov     (_main_prev_period_ref_1_79 + 2),(_main_period_ref_1_79 + 2)
057B 85A393    1609            mov     (_main_prev_period_ref_1_79 + 3),(_main_period_ref_1_79 + 3)
057E           1610   L018017?:
057E           1611   ;        C:\ELEC291\Lab5\EFM8_ADC.c:384: freq_ref = 1.0/period_ref;
057E C0A0      1612            push    _main_period_ref_1_79
0580 C0A1      1613            push    (_main_period_ref_1_79 + 1)
0582 C0A2      1614            push    (_main_period_ref_1_79 + 2)
0584 C0A3      1615            push    (_main_period_ref_1_79 + 3)
0586 900000    1616            mov     dptr,#0x0000
0589 75F080    1617            mov     b,#0x80
058C 743F      1618            mov     a,#0x3F
058E 120000    1619            lcall   ___fsdiv
0591 8582F0    1620            mov     _main_freq_ref_1_79,dpl
0594 8583F1    1621            mov     (_main_freq_ref_1_79 + 1),dph
0597 85F0F2    1622            mov     (_main_freq_ref_1_79 + 2),b
059A F5F3      1623            mov     (_main_freq_ref_1_79 + 3),a
059C E581      1624            mov     a,sp
059E 24FC      1625            add     a,#0xfc
05A0 F581      1626            mov     sp,a
05A2           1627   ;        C:\ELEC291\Lab5\EFM8_ADC.c:385: quarterPeriod_ref = period_ref/4.0;
05A2 E4        1628            clr     a
05A3 C0E0      1629            push    acc
05A5 C0E0      1630            push    acc
05A7 7480      1631            mov     a,#0x80
05A9 C0E0      1632            push    acc
05AB 7440      1633            mov     a,#0x40
05AD C0E0      1634            push    acc
05AF 85A082    1635            mov     dpl,_main_period_ref_1_79
05B2 85A183    1636            mov     dph,(_main_period_ref_1_79 + 1)
05B5 85A2F0    1637            mov     b,(_main_period_ref_1_79 + 2)
05B8 E5A3      1638            mov     a,(_main_period_ref_1_79 + 3)
05BA 120000    1639            lcall   ___fsdiv
05BD 858240    1640            mov     _main_quarterPeriod_ref_1_79,dpl
05C0 858341    1641            mov     (_main_quarterPeriod_ref_1_79 + 1),dph
05C3 85F042    1642            mov     (_main_quarterPeriod_ref_1_79 + 2),b
05C6 F543      1643            mov     (_main_quarterPeriod_ref_1_79 + 3),a
05C8 E581      1644            mov     a,sp
05CA 24FC      1645            add     a,#0xfc
05CC F581      1646            mov     sp,a
05CE           1647   ;        C:\ELEC291\Lab5\EFM8_ADC.c:388: ADINT = 0;
05CE C2ED      1648            clr     _ADINT
05D0           1649   ;        C:\ELEC291\Lab5\EFM8_ADC.c:389: ADBUSY=1;
05D0 D2EC      1650            setb    _ADBUSY
05D2           1651   ;        C:\ELEC291\Lab5\EFM8_ADC.c:390: while (!ADINT);                         // wait for conversion to complete
05D2           1652   L018018?:
05D2 30EDA8    1653            jnb     _ADINT,L018018?
05D5           1654   ;        C:\ELEC291\Lab5\EFM8_ADC.c:391: while (Get_ADC()!=0);   // wait for signal to be 0
05D5           1655   L018021?:
05D5 120000    1656            lcall   _Get_ADC
05D8 E582      1657            mov     a,dpl
05DA 8583F0    1658            mov     b,dph
05DD 45F0      1659            orl     a,b
05DF 7000      1660            jnz     L018021?
05E1           1661   ;        C:\ELEC291\Lab5\EFM8_ADC.c:392: while (Get_ADC()==0);   // wait for signal to be pos
05E1           1662   L018024?:
05E1 120000    1663            lcall   _Get_ADC
05E4 E582      1664            mov     a,dpl
05E6 8583F0    1665            mov     b,dph
05E9 45F0      1666            orl     a,b
05EB 6000      1667            jz      L018024?
05ED           1668   ;        C:\ELEC291\Lab5\EFM8_ADC.c:393: waitms(quarterPeriod_ref*1000);
05ED C040      1669            push    _main_quarterPeriod_ref_1_79
05EF C041      1670            push    (_main_quarterPeriod_ref_1_79 + 1)
05F1 C042      1671            push    (_main_quarterPeriod_ref_1_79 + 2)
05F3 C043      1672            push    (_main_quarterPeriod_ref_1_79 + 3)
05F5 900000    1673            mov     dptr,#0x0000
05F8 75F07A    1674            mov     b,#0x7A
05FB 7444      1675            mov     a,#0x44
05FD 120000    1676            lcall   ___fsmul
0600 AE82      1677            mov     r6,dpl
0602 AF83      1678            mov     r7,dph
0604 A8F0      1679            mov     r0,b
0606 F9        1680            mov     r1,a
0607 E581      1681            mov     a,sp
0609 24FC      1682            add     a,#0xfc
060B F581      1683            mov     sp,a
060D 8E82      1684            mov     dpl,r6
060F 8F83      1685            mov     dph,r7
0611 88F0      1686            mov     b,r0
0613 E9        1687            mov     a,r1
0614 120000    1688            lcall   ___fs2uint
0617 120000    1689            lcall   _waitms
061A           1690   ;        C:\ELEC291\Lab5\EFM8_ADC.c:394: vrms_ref = Volts_at_Pin(QFP32_MUX_P2_5); // grabs vmax 1/4 T later from 0-cross
061A 758212    1691            mov     dpl,#0x12
061D 120000    1692            lcall   _Volts_at_Pin
0620 8582E0    1693            mov     _main_vrms_ref_1_79,dpl
0623 8583E1    1694            mov     (_main_vrms_ref_1_79 + 1),dph
0626 85F0E2    1695            mov     (_main_vrms_ref_1_79 + 2),b
0629 F5E3      1696            mov     (_main_vrms_ref_1_79 + 3),a
062B           1697   ;        C:\ELEC291\Lab5\EFM8_ADC.c:398: ADC0MX=QFP32_MUX_P2_4;
062B 75BB11    1698            mov     _ADC0MX,#0x11
062E           1699   ;        C:\ELEC291\Lab5\EFM8_ADC.c:399: ADINT = 0;
062E C2ED      1700            clr     _ADINT
0630           1701   ;        C:\ELEC291\Lab5\EFM8_ADC.c:400: ADBUSY=1;
0630 D2EC      1702            setb    _ADBUSY
0632           1703   ;        C:\ELEC291\Lab5\EFM8_ADC.c:401: while (!ADINT);                         // wait for conversion to complete
0632           1704   L018027?:
0632 30EDA8    1705            jnb     _ADINT,L018027?
0635           1706   ;        C:\ELEC291\Lab5\EFM8_ADC.c:402: while (Get_ADC()!=0);   // wait for signal to be 0
0635           1707   L018030?:
0635 120000    1708            lcall   _Get_ADC
0638 E582      1709            mov     a,dpl
063A 8583F0    1710            mov     b,dph
063D 45F0      1711            orl     a,b
063F 7000      1712            jnz     L018030?
0641           1713   ;        C:\ELEC291\Lab5\EFM8_ADC.c:403: while (Get_ADC()==0);   // wait for signal to be pos
0641           1714   L018033?:
0641 120000    1715            lcall   _Get_ADC
0644 E582      1716            mov     a,dpl
0646 8583F0    1717            mov     b,dph
0649 45F0      1718            orl     a,b
064B 6000      1719            jz      L018033?
064D           1720   ;        C:\ELEC291\Lab5\EFM8_ADC.c:404: overflow_count = 0;             // reset timer 
064D 75F800    1721            mov     _overflow_count,#0x00
0650           1722   ;        C:\ELEC291\Lab5\EFM8_ADC.c:405: TL0=0;
0650 758A00    1723            mov     _TL0,#0x00
0653           1724   ;        C:\ELEC291\Lab5\EFM8_ADC.c:406: TH0=0;
0653 758C00    1725            mov     _TH0,#0x00
0656           1726   ;        C:\ELEC291\Lab5\EFM8_ADC.c:407: TR0=1; // start timer 0                 
0656 D28C      1727            setb    _TR0
0658           1728   ;        C:\ELEC291\Lab5\EFM8_ADC.c:408: while (Get_ADC()!=0){
0658           1729   L018038?:
0658 120000    1730            lcall   _Get_ADC
065B E582      1731            mov     a,dpl
065D 8583F0    1732            mov     b,dph
0660 45F0      1733            orl     a,b
0662 6000      1734            jz      L018040?
0664           1735   ;        C:\ELEC291\Lab5\EFM8_ADC.c:409: if (TF0==1){
0664           1736   ;        C:\ELEC291\Lab5\EFM8_ADC.c:410: TF0=0;
0664 108DE8    1737            jbc     _TF0,L018083?
0667 8000      1738            sjmp    L018038?
0669           1739   L018083?:
0669           1740   ;        C:\ELEC291\Lab5\EFM8_ADC.c:411: overflow_count++;       // count overflows
0669 05F8      1741            inc     _overflow_count
066B 8000      1742            sjmp    L018038?
066D           1743   L018040?:
066D           1744   ;        C:\ELEC291\Lab5\EFM8_ADC.c:414: TR0=0; // stop timer 0
066D C28C      1745            clr     _TR0
066F           1746   ;        C:\ELEC291\Lab5\EFM8_ADC.c:415: halfPeriod_spl=(overflow_count*65536.0 + TH0*256.0 + TL0)*(12.0/SYSCLK);        // {TH0,TL0} -> [15:0]
066F 85F882    1747            mov     dpl,_overflow_count
0672 120000    1748            lcall   ___uchar2fs
0675 AE82      1749            mov     r6,dpl
0677 AF83      1750            mov     r7,dph
0679 A8F0      1751            mov     r0,b
067B F9        1752            mov     r1,a
067C C006      1753            push    ar6
067E C007      1754            push    ar7
0680 C000      1755            push    ar0
0682 C001      1756            push    ar1
0684 900000    1757            mov     dptr,#0x0000
0687 75F080    1758            mov     b,#0x80
068A 7447      1759            mov     a,#0x47
068C 120000    1760            lcall   ___fsmul
068F AE82      1761            mov     r6,dpl
0691 AF83      1762            mov     r7,dph
0693 A8F0      1763            mov     r0,b
0695 F9        1764            mov     r1,a
0696 E581      1765            mov     a,sp
0698 24FC      1766            add     a,#0xfc
069A F581      1767            mov     sp,a
069C 858C82    1768            mov     dpl,_TH0
069F C006      1769            push    ar6
06A1 C007      1770            push    ar7
06A3 C000      1771            push    ar0
06A5 C001      1772            push    ar1
06A7 120000    1773            lcall   ___uchar2fs
06AA AA82      1774            mov     r2,dpl
06AC AB83      1775            mov     r3,dph
06AE ACF0      1776            mov     r4,b
06B0 FD        1777            mov     r5,a
06B1 C002      1778            push    ar2
06B3 C003      1779            push    ar3
06B5 C004      1780            push    ar4
06B7 C005      1781            push    ar5
06B9 900000    1782            mov     dptr,#0x0000
06BC 75F080    1783            mov     b,#0x80
06BF 7443      1784            mov     a,#0x43
06C1 120000    1785            lcall   ___fsmul
06C4 AA82      1786            mov     r2,dpl
06C6 AB83      1787            mov     r3,dph
06C8 ACF0      1788            mov     r4,b
06CA FD        1789            mov     r5,a
06CB E581      1790            mov     a,sp
06CD 24FC      1791            add     a,#0xfc
06CF F581      1792            mov     sp,a
06D1 D001      1793            pop     ar1
06D3 D000      1794            pop     ar0
06D5 D007      1795            pop     ar7
06D7 D006      1796            pop     ar6
06D9 C002      1797            push    ar2
06DB C003      1798            push    ar3
06DD C004      1799            push    ar4
06DF C005      1800            push    ar5
06E1 8E82      1801            mov     dpl,r6
06E3 8F83      1802            mov     dph,r7
06E5 88F0      1803            mov     b,r0
06E7 E9        1804            mov     a,r1
06E8 120000    1805            lcall   ___fsadd
06EB AA82      1806            mov     r2,dpl
06ED AB83      1807            mov     r3,dph
06EF ACF0      1808            mov     r4,b
06F1 FD        1809            mov     r5,a
06F2 E581      1810            mov     a,sp
06F4 24FC      1811            add     a,#0xfc
06F6 F581      1812            mov     sp,a
06F8 AE8A      1813            mov     r6,_TL0
06FA 7F00      1814            mov     r7,#0x00
06FC 8E82      1815            mov     dpl,r6
06FE 8F83      1816            mov     dph,r7
0700 C002      1817            push    ar2
0702 C003      1818            push    ar3
0704 C004      1819            push    ar4
0706 C005      1820            push    ar5
0708 120000    1821            lcall   ___sint2fs
070B AE82      1822            mov     r6,dpl
070D AF83      1823            mov     r7,dph
070F A8F0      1824            mov     r0,b
0711 F9        1825            mov     r1,a
0712 D005      1826            pop     ar5
0714 D004      1827            pop     ar4
0716 D003      1828            pop     ar3
0718 D002      1829            pop     ar2
071A C006      1830            push    ar6
071C C007      1831            push    ar7
071E C000      1832            push    ar0
0720 C001      1833            push    ar1
0722 8A82      1834            mov     dpl,r2
0724 8B83      1835            mov     dph,r3
0726 8CF0      1836            mov     b,r4
0728 ED        1837            mov     a,r5
0729 120000    1838            lcall   ___fsadd
072C AA82      1839            mov     r2,dpl
072E AB83      1840            mov     r3,dph
0730 ACF0      1841            mov     r4,b
0732 FD        1842            mov     r5,a
0733 E581      1843            mov     a,sp
0735 24FC      1844            add     a,#0xfc
0737 F581      1845            mov     sp,a
0739 C002      1846            push    ar2
073B C003      1847            push    ar3
073D C004      1848            push    ar4
073F C005      1849            push    ar5
0741 90F4FC    1850            mov     dptr,#0xF4FC
0744 75F032    1851            mov     b,#0x32
0747 7434      1852            mov     a,#0x34
0749 120000    1853            lcall   ___fsmul
074C AA82      1854            mov     r2,dpl
074E AB83      1855            mov     r3,dph
0750 ACF0      1856            mov     r4,b
0752 FD        1857            mov     r5,a
0753 E581      1858            mov     a,sp
0755 24FC      1859            add     a,#0xfc
0757 F581      1860            mov     sp,a
0759           1861   ;        C:\ELEC291\Lab5\EFM8_ADC.c:417: overflow_count = 0;             
0759 75F800    1862            mov     _overflow_count,#0x00
075C           1863   ;        C:\ELEC291\Lab5\EFM8_ADC.c:418: TL0=0;
075C 758A00    1864            mov     _TL0,#0x00
075F           1865   ;        C:\ELEC291\Lab5\EFM8_ADC.c:419: TH0=0;
075F 758C00    1866            mov     _TH0,#0x00
0762           1867   ;        C:\ELEC291\Lab5\EFM8_ADC.c:421: period_spl = 2.0*halfPeriod_spl;
0762 C002      1868            push    ar2
0764 C003      1869            push    ar3
0766 C004      1870            push    ar4
0768 C005      1871            push    ar5
076A 900000    1872            mov     dptr,#(0x00&0x00ff)
076D E4        1873            clr     a
076E F5F0      1874            mov     b,a
0770 7440      1875            mov     a,#0x40
0772 120000    1876            lcall   ___fsmul
0775 AA82      1877            mov     r2,dpl
0777 AB83      1878            mov     r3,dph
0779 ACF0      1879            mov     r4,b
077B FD        1880            mov     r5,a
077C E581      1881            mov     a,sp
077E 24FC      1882            add     a,#0xfc
0780 F581      1883            mov     sp,a
0782           1884   ;        C:\ELEC291\Lab5\EFM8_ADC.c:423: if(period_spl <= 0.0002){                       
0782 C002      1885            push    ar2
0784 C003      1886            push    ar3
0786 C004      1887            push    ar4
0788 C005      1888            push    ar5
078A 7417      1889            mov     a,#0x17
078C C0E0      1890            push    acc
078E 74B7      1891            mov     a,#0xB7
0790 C0E0      1892            push    acc
0792 7451      1893            mov     a,#0x51
0794 C0E0      1894            push    acc
0796 7439      1895            mov     a,#0x39
0798 C0E0      1896            push    acc
079A 8A82      1897            mov     dpl,r2
079C 8B83      1898            mov     dph,r3
079E 8CF0      1899            mov     b,r4
07A0 ED        1900            mov     a,r5
07A1 120000    1901            lcall   ___fsgt
07A4 AE82      1902            mov     r6,dpl
07A6 E581      1903            mov     a,sp
07A8 24FC      1904            add     a,#0xfc
07AA F581      1905            mov     sp,a
07AC D005      1906            pop     ar5
07AE D004      1907            pop     ar4
07B0 D003      1908            pop     ar3
07B2 D002      1909            pop     ar2
07B4 EE        1910            mov     a,r6
07B5 7000      1911            jnz     L018042?
07B7           1912   ;        C:\ELEC291\Lab5\EFM8_ADC.c:424: period_spl = prev_period_spl;
07B7 AA80      1913            mov     r2,_main_prev_period_spl_1_79
07B9 AB81      1914            mov     r3,(_main_prev_period_spl_1_79 + 1)
07BB AC82      1915            mov     r4,(_main_prev_period_spl_1_79 + 2)
07BD AD83      1916            mov     r5,(_main_prev_period_spl_1_79 + 3)
07BF 8000      1917            sjmp    L018043?
07C1           1918   L018042?:
07C1           1919   ;        C:\ELEC291\Lab5\EFM8_ADC.c:426: prev_period_spl = period_spl;
07C1 8A80      1920            mov     _main_prev_period_spl_1_79,r2
07C3 8B81      1921            mov     (_main_prev_period_spl_1_79 + 1),r3
07C5 8C82      1922            mov     (_main_prev_period_spl_1_79 + 2),r4
07C7 8D83      1923            mov     (_main_prev_period_spl_1_79 + 3),r5
07C9           1924   L018043?:
07C9           1925   ;        C:\ELEC291\Lab5\EFM8_ADC.c:428: freq_spl = 1.0/period_spl;
07C9 C002      1926            push    ar2
07CB C003      1927            push    ar3
07CD C004      1928            push    ar4
07CF C005      1929            push    ar5
07D1 C002      1930            push    ar2
07D3 C003      1931            push    ar3
07D5 C004      1932            push    ar4
07D7 C005      1933            push    ar5
07D9 900000    1934            mov     dptr,#0x0000
07DC 75F080    1935            mov     b,#0x80
07DF 743F      1936            mov     a,#0x3F
07E1 120000    1937            lcall   ___fsdiv
07E4 858230    1938            mov     _main_freq_spl_1_79,dpl
07E7 858331    1939            mov     (_main_freq_spl_1_79 + 1),dph
07EA 85F032    1940            mov     (_main_freq_spl_1_79 + 2),b
07ED F533      1941            mov     (_main_freq_spl_1_79 + 3),a
07EF E581      1942            mov     a,sp
07F1 24FC      1943            add     a,#0xfc
07F3 F581      1944            mov     sp,a
07F5           1945   ;        C:\ELEC291\Lab5\EFM8_ADC.c:439: printf("Reference Signal Data        |Sample Signal Data            \n");
07F5 74A8      1946            mov     a,#__str_5
07F7 C0E0      1947            push    acc
07F9 74C9      1948            mov     a,#(__str_5 >> 8)
07FB C0E0      1949            push    acc
07FD 7480      1950            mov     a,#0x80
07FF C0E0      1951            push    acc
0801 120000    1952            lcall   _printf
0804 1581      1953            dec     sp
0806 1581      1954            dec     sp
0808 1581      1955            dec     sp
080A           1956   ;        C:\ELEC291\Lab5\EFM8_ADC.c:440: printf("---------------------------------------------------------\n");
080A 74E8      1957            mov     a,#__str_6
080C C0E0      1958            push    acc
080E 74C9      1959            mov     a,#(__str_6 >> 8)
0810 C0E0      1960            push    acc
0812 7480      1961            mov     a,#0x80
0814 C0E0      1962            push    acc
0816 120000    1963            lcall   _printf
0819 1581      1964            dec     sp
081B 1581      1965            dec     sp
081D 1581      1966            dec     sp
081F           1967   ;        C:\ELEC291\Lab5\EFM8_ADC.c:441: printf("Ref Period(T):  %7.6f s  | Spl Period(T):  %7.6f s \n",period_ref*1000, period_spl*1000);
081F 900000    1968            mov     dptr,#0x0000
0822 75F07A    1969            mov     b,#0x7A
0825 7444      1970            mov     a,#0x44
0827 120000    1971            lcall   ___fsmul
082A AA82      1972            mov     r2,dpl
082C AB83      1973            mov     r3,dph
082E ACF0      1974            mov     r4,b
0830 FD        1975            mov     r5,a
0831 E581      1976            mov     a,sp
0833 24FC      1977            add     a,#0xfc
0835 F581      1978            mov     sp,a
0837 C002      1979            push    ar2
0839 C003      1980            push    ar3
083B C004      1981            push    ar4
083D C005      1982            push    ar5
083F C0A0      1983            push    _main_period_ref_1_79
0841 C0A1      1984            push    (_main_period_ref_1_79 + 1)
0843 C0A2      1985            push    (_main_period_ref_1_79 + 2)
0845 C0A3      1986            push    (_main_period_ref_1_79 + 3)
0847 900000    1987            mov     dptr,#0x0000
084A 75F07A    1988            mov     b,#0x7A
084D 7444      1989            mov     a,#0x44
084F 120000    1990            lcall   ___fsmul
0852 AE82      1991            mov     r6,dpl
0854 AF83      1992            mov     r7,dph
0856 A8F0      1993            mov     r0,b
0858 F9        1994            mov     r1,a
0859 E581      1995            mov     a,sp
085B 24FC      1996            add     a,#0xfc
085D F581      1997            mov     sp,a
085F C006      1998            push    ar6
0861 C007      1999            push    ar7
0863 C000      2000            push    ar0
0865 C001      2001            push    ar1
0867 7428      2002            mov     a,#__str_7
0869 C0E0      2003            push    acc
086B 74CA      2004            mov     a,#(__str_7 >> 8)
086D C0E0      2005            push    acc
086F 7480      2006            mov     a,#0x80
0871 C0E0      2007            push    acc
0873 120000    2008            lcall   _printf
0876 E581      2009            mov     a,sp
0878 24F5      2010            add     a,#0xf5
087A F581      2011            mov     sp,a
087C           2012   ;        C:\ELEC291\Lab5\EFM8_ADC.c:442: printf("Ref Freq(f)  :  %7.6f Hz | Spl Freq(f)  :  %7.6f Hz\n",freq_ref, freq_spl);
087C C030      2013            push    _main_freq_spl_1_79
087E C031      2014            push    (_main_freq_spl_1_79 + 1)
0880 C032      2015            push    (_main_freq_spl_1_79 + 2)
0882 C033      2016            push    (_main_freq_spl_1_79 + 3)
0884 C0F0      2017            push    _main_freq_ref_1_79
0886 C0F1      2018            push    (_main_freq_ref_1_79 + 1)
0888 C0F2      2019            push    (_main_freq_ref_1_79 + 2)
088A C0F3      2020            push    (_main_freq_ref_1_79 + 3)
088C 7468      2021            mov     a,#__str_8
088E C0E0      2022            push    acc
0890 74CA      2023            mov     a,#(__str_8 >> 8)
0892 C0E0      2024            push    acc
0894 7480      2025            mov     a,#0x80
0896 C0E0      2026            push    acc
0898 120000    2027            lcall   _printf
089B E581      2028            mov     a,sp
089D 24F5      2029            add     a,#0xf5
089F F581      2030            mov     sp,a
08A1           2031   ;        C:\ELEC291\Lab5\EFM8_ADC.c:443: printf("Vmax (ref)   :  %4.4f V\n",vrms_ref);
08A1 C0E0      2032            push    _main_vrms_ref_1_79
08A3 C0E1      2033            push    (_main_vrms_ref_1_79 + 1)
08A5 C0E2      2034            push    (_main_vrms_ref_1_79 + 2)
08A7 C0E3      2035            push    (_main_vrms_ref_1_79 + 3)
08A9 74A8      2036            mov     a,#__str_9
08AB C0E0      2037            push    acc
08AD 74CA      2038            mov     a,#(__str_9 >> 8)
08AF C0E0      2039            push    acc
08B1 7480      2040            mov     a,#0x80
08B3 C0E0      2041            push    acc
08B5 120000    2042            lcall   _printf
08B8 E581      2043            mov     a,sp
08BA 24F9      2044            add     a,#0xf9
08BC F581      2045            mov     sp,a
08BE           2046   ;        C:\ELEC291\Lab5\EFM8_ADC.c:444: printf("%7.6f\n", quarterPeriod_ref);
08BE C040      2047            push    _main_quarterPeriod_ref_1_79
08C0 C041      2048            push    (_main_quarterPeriod_ref_1_79 + 1)
08C2 C042      2049            push    (_main_quarterPeriod_ref_1_79 + 2)
08C4 C043      2050            push    (_main_quarterPeriod_ref_1_79 + 3)
08C6 74E8      2051            mov     a,#__str_10
08C8 C0E0      2052            push    acc
08CA 74CA      2053            mov     a,#(__str_10 >> 8)
08CC C0E0      2054            push    acc
08CE 7480      2055            mov     a,#0x80
08D0 C0E0      2056            push    acc
08D2 120000    2057            lcall   _printf
08D5 E581      2058            mov     a,sp
08D7 24F9      2059            add     a,#0xf9
08D9 F581      2060            mov     sp,a
08DB           2061   ;        C:\ELEC291\Lab5\EFM8_ADC.c:445: printf("\033[A\033[A\033[A\033[A\033[A\033[A");
08DB 7428      2062            mov     a,#__str_11
08DD C0E0      2063            push    acc
08DF 74CB      2064            mov     a,#(__str_11 >> 8)
08E1 C0E0      2065            push    acc
08E3 7480      2066            mov     a,#0x80
08E5 C0E0      2067            push    acc
08E7 120000    2068            lcall   _printf
08EA 1581      2069            dec     sp
08EC 1581      2070            dec     sp
08EE 1581      2071            dec     sp
08F0           2072   ;        C:\ELEC291\Lab5\EFM8_ADC.c:447: sprintf(buffer,"Rf:%2d Sp:%2d Hz",(int)freq_ref%1000, (int)freq_spl%1000);
08F0 853082    2073            mov     dpl,_main_freq_spl_1_79
08F3 853183    2074            mov     dph,(_main_freq_spl_1_79 + 1)
08F6 8532F0    2075            mov     b,(_main_freq_spl_1_79 + 2)
08F9 E533      2076            mov     a,(_main_freq_spl_1_79 + 3)
08FB 120000    2077            lcall   ___fs2sint
08FE 7500E8    2078            mov     __modsint_PARM_2,#0xE8
0901 750103    2079            mov     (__modsint_PARM_2 + 1),#0x03
0904 120000    2080            lcall   __modsint
0907 AA82      2081            mov     r2,dpl
0909 AB83      2082            mov     r3,dph
090B 85F082    2083            mov     dpl,_main_freq_ref_1_79
090E 85F183    2084            mov     dph,(_main_freq_ref_1_79 + 1)
0911 85F2F0    2085            mov     b,(_main_freq_ref_1_79 + 2)
0914 E5F3      2086            mov     a,(_main_freq_ref_1_79 + 3)
0916 C002      2087            push    ar2
0918 C003      2088            push    ar3
091A 120000    2089            lcall   ___fs2sint
091D 7500E8    2090            mov     __modsint_PARM_2,#0xE8
0920 750103    2091            mov     (__modsint_PARM_2 + 1),#0x03
0923 120000    2092            lcall   __modsint
0926 AC82      2093            mov     r4,dpl
0928 AD83      2094            mov     r5,dph
092A C004      2095            push    ar4
092C C005      2096            push    ar5
092E 7438      2097            mov     a,#__str_12
0930 C0E0      2098            push    acc
0932 74CC      2099            mov     a,#(__str_12 >> 8)
0934 C0E0      2100            push    acc
0936 7480      2101            mov     a,#0x80
0938 C0E0      2102            push    acc
093A 7450      2103            mov     a,#_main_buffer_1_79
093C C0E0      2104            push    acc
093E 74B4      2105            mov     a,#(_main_buffer_1_79 >> 8)
0940 C0E0      2106            push    acc
0942 7440      2107            mov     a,#0x40
0944 C0E0      2108            push    acc
0946 120000    2109            lcall   _sprintf
0949 E581      2110            mov     a,sp
094B 24F6      2111            add     a,#0xf6
094D F581      2112            mov     sp,a
094F           2113   ;        C:\ELEC291\Lab5\EFM8_ADC.c:448: LCDprint(buffer,1,1);
094F 75B801    2114            mov     _LCDprint_PARM_2,#0x01
0952 D268      2115            setb    _LCDprint_PARM_3
0954 90B450    2116            mov     dptr,#_main_buffer_1_79
0957 75F040    2117            mov     b,#0x40
095A 120000    2118            lcall   _LCDprint
095D           2119   ;        C:\ELEC291\Lab5\EFM8_ADC.c:450: sprintf(buffer,"Vr:%4.4f V",vrms_ref);
095D C0E0      2120            push    _main_vrms_ref_1_79
095F C0E1      2121            push    (_main_vrms_ref_1_79 + 1)
0961 C0E2      2122            push    (_main_vrms_ref_1_79 + 2)
0963 C0E3      2123            push    (_main_vrms_ref_1_79 + 3)
0965 74B8      2124            mov     a,#__str_13
0967 C0E0      2125            push    acc
0969 74CC      2126            mov     a,#(__str_13 >> 8)
096B C0E0      2127            push    acc
096D 7480      2128            mov     a,#0x80
096F C0E0      2129            push    acc
0971 7450      2130            mov     a,#_main_buffer_1_79
0973 C0E0      2131            push    acc
0975 74B4      2132            mov     a,#(_main_buffer_1_79 >> 8)
0977 C0E0      2133            push    acc
0979 7440      2134            mov     a,#0x40
097B C0E0      2135            push    acc
097D 120000    2136            lcall   _sprintf
0980 E581      2137            mov     a,sp
0982 24F6      2138            add     a,#0xf6
0984 F581      2139            mov     sp,a
0986           2140   ;        C:\ELEC291\Lab5\EFM8_ADC.c:451: LCDprint(buffer,2,1);
0986 75B802    2141            mov     _LCDprint_PARM_2,#0x02
0989 D268      2142            setb    _LCDprint_PARM_3
098B 90B450    2143            mov     dptr,#_main_buffer_1_79
098E 75F040    2144            mov     b,#0x40
0991 120000    2145            lcall   _LCDprint
0994           2146   ;        C:\ELEC291\Lab5\EFM8_ADC.c:453: waitms(500);
0994 9001F4    2147            mov     dptr,#0x01F4
0997 120000    2148            lcall   _waitms
099A 020000    2149            ljmp    L018045?
099D           2150            rseg R_CSEG
099D           2151   
0000           2152            rseg R_XINIT
0000           2153   
0000           2154            rseg R_CONST
0000           2155   __str_0:
0000 1B        2156            db 0x1B
0001 5B324A    2157            db '[2J'
0004 00        2158            db 0x00
0005           2159   __str_1:
0005 41444320  2160            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        2161            db 0x0A
0016 46696C65  2162            db 'File: %s'
     3A202573
001E 0A        2163            db 0x0A
001F 436F6D70  2164            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        2165            db 0x0A
0030 0A        2166            db 0x0A
0031 00        2167            db 0x00
0032           2168   __str_2:
0032 433A      2169            db 'C:'
0034 5C        2170            db 0x5C
0035 454C4543  2171            db 'ELEC291'
     323931
003C 5C        2172            db 0x5C
003D 4C616235  2173            db 'Lab5'
0041 5C        2174            db 0x5C
0042 45464D38  2175            db 'EFM8_ADC.c'
     5F414443
     2E63
004C 00        2176            db 0x00
004D           2177   __str_3:
004D 4D617220  2178            db 'Mar  4 2024'
     20342032
     303234
0058 00        2179            db 0x00
0059           2180   __str_4:
0059 30303A32  2181            db '00:29:45'
     393A3435
0061 00        2182            db 0x00
0062           2183   __str_5:
0062 52656665  2184            db 'Reference Signal Data        |Sample Signal Data            '
     72656E63
     65205369
     676E616C
     20446174
     61202020
     20202020
     207C5361
     6D706C65
     20536967
     6E616C20
     44617461
     20202020
     20202020
     20202020
009E 0A        2185            db 0x0A
009F 00        2186            db 0x00
00A0           2187   __str_6:
00A0 2D2D2D2D  2188            db '---------------------------------------------------------'
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D
00D9 0A        2189            db 0x0A
00DA 00        2190            db 0x00
00DB           2191   __str_7:
00DB 52656620  2192            db 'Ref Period(T):  %7.6f s  | Spl Period(T):  %7.6f s '
     50657269
     6F642854
     293A2020
     25372E36
     66207320
     207C2053
     706C2050
     6572696F
     64285429
     3A202025
     372E3666
     207320
010E 0A        2193            db 0x0A
010F 00        2194            db 0x00
0110           2195   __str_8:
0110 52656620  2196            db 'Ref Freq(f)  :  %7.6f Hz | Spl Freq(f)  :  %7.6f Hz'
     46726571
     28662920
     203A2020
     25372E36
     6620487A
     207C2053
     706C2046
     72657128
     66292020
     3A202025
     372E3666
     20487A
0143 0A        2197            db 0x0A
0144 00        2198            db 0x00
0145           2199   __str_9:
0145 566D6178  2200            db 'Vmax (ref)   :  %4.4f V'
     20287265
     66292020
     203A2020
     25342E34
     662056
015C 0A        2201            db 0x0A
015D 00        2202            db 0x00
015E           2203   __str_10:
015E 25372E36  2204            db '%7.6f'
     66
0163 0A        2205            db 0x0A
0164 00        2206            db 0x00
0165           2207   __str_11:
0165 1B        2208            db 0x1B
0166 5B41      2209            db '[A'
0168 1B        2210            db 0x1B
0169 5B41      2211            db '[A'
016B 1B        2212            db 0x1B
016C 5B41      2213            db '[A'
016E 1B        2214            db 0x1B
016F 5B41      2215            db '[A'
0171 1B        2216            db 0x1B
0172 5B41      2217            db '[A'
0174 1B        2218            db 0x1B
0175 5B41      2219            db '[A'
0177 00        2220            db 0x00
0178           2221   __str_12:
0178 52663A25  2222            db 'Rf:%2d Sp:%2d Hz'
     32642053
     703A2532
     6420487A
0188 00        2223            db 0x00
0189           2224   __str_13:
0189 56723A25  2225            db 'Vr:%4.4f V'
     342E3466
     2056
0193 00        2226            db 0x00
0194           2227   
0003           2228            CSEG
0003           2229   
0003           2230   end
