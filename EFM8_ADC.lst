0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Mon Mar 04 22:34:14 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Get_ADC
0000             30            public _LCDprint
0000             31            public _LCD_4BIT
0000             32            public _WriteCommand
0000             33            public _WriteData
0000             34            public _LCD_byte
0000             35            public _LCD_pulse
0000             36            public _Volts_at_Pin
0000             37            public _ADC_at_Pin
0000             38            public _InitPinADC
0000             39            public _TIMER0_Init
0000             40            public _waitus
0000             41            public _waitms
0000             42            public _Timer3us
0000             43            public _InitADC
0000             44            public __c51_external_startup
0000             45            public _LCDprint_PARM_3
0000             46            public _LCDprint_PARM_2
0000             47            public _overflow_count
0000             48   ;--------------------------------------------------------
0000             49   ; Special Function Registers
0000             50   ;--------------------------------------------------------
0000             51   _ACC            DATA 0xe0
0000             52   _ADC0ASAH       DATA 0xb6
0000             53   _ADC0ASAL       DATA 0xb5
0000             54   _ADC0ASCF       DATA 0xa1
0000             55   _ADC0ASCT       DATA 0xc7
0000             56   _ADC0CF0        DATA 0xbc
0000             57   _ADC0CF1        DATA 0xb9
0000             58   _ADC0CF2        DATA 0xdf
0000             59   _ADC0CN0        DATA 0xe8
0000             60   _ADC0CN1        DATA 0xb2
0000             61   _ADC0CN2        DATA 0xb3
0000             62   _ADC0GTH        DATA 0xc4
0000             63   _ADC0GTL        DATA 0xc3
0000             64   _ADC0H          DATA 0xbe
0000             65   _ADC0L          DATA 0xbd
0000             66   _ADC0LTH        DATA 0xc6
0000             67   _ADC0LTL        DATA 0xc5
0000             68   _ADC0MX         DATA 0xbb
0000             69   _B              DATA 0xf0
0000             70   _CKCON0         DATA 0x8e
0000             71   _CKCON1         DATA 0xa6
0000             72   _CLEN0          DATA 0xc6
0000             73   _CLIE0          DATA 0xc7
0000             74   _CLIF0          DATA 0xe8
0000             75   _CLKSEL         DATA 0xa9
0000             76   _CLOUT0         DATA 0xd1
0000             77   _CLU0CF         DATA 0xb1
0000             78   _CLU0FN         DATA 0xaf
0000             79   _CLU0MX         DATA 0x84
0000             80   _CLU1CF         DATA 0xb3
0000             81   _CLU1FN         DATA 0xb2
0000             82   _CLU1MX         DATA 0x85
0000             83   _CLU2CF         DATA 0xb6
0000             84   _CLU2FN         DATA 0xb5
0000             85   _CLU2MX         DATA 0x91
0000             86   _CLU3CF         DATA 0xbf
0000             87   _CLU3FN         DATA 0xbe
0000             88   _CLU3MX         DATA 0xae
0000             89   _CMP0CN0        DATA 0x9b
0000             90   _CMP0CN1        DATA 0x99
0000             91   _CMP0MD         DATA 0x9d
0000             92   _CMP0MX         DATA 0x9f
0000             93   _CMP1CN0        DATA 0xbf
0000             94   _CMP1CN1        DATA 0xac
0000             95   _CMP1MD         DATA 0xab
0000             96   _CMP1MX         DATA 0xaa
0000             97   _CRC0CN0        DATA 0xce
0000             98   _CRC0CN1        DATA 0x86
0000             99   _CRC0CNT        DATA 0xd3
0000            100   _CRC0DAT        DATA 0xcb
0000            101   _CRC0FLIP       DATA 0xcf
0000            102   _CRC0IN         DATA 0xca
0000            103   _CRC0ST         DATA 0xd2
0000            104   _DAC0CF0        DATA 0x91
0000            105   _DAC0CF1        DATA 0x92
0000            106   _DAC0H          DATA 0x85
0000            107   _DAC0L          DATA 0x84
0000            108   _DAC1CF0        DATA 0x93
0000            109   _DAC1CF1        DATA 0x94
0000            110   _DAC1H          DATA 0x8a
0000            111   _DAC1L          DATA 0x89
0000            112   _DAC2CF0        DATA 0x95
0000            113   _DAC2CF1        DATA 0x96
0000            114   _DAC2H          DATA 0x8c
0000            115   _DAC2L          DATA 0x8b
0000            116   _DAC3CF0        DATA 0x9a
0000            117   _DAC3CF1        DATA 0x9c
0000            118   _DAC3H          DATA 0x8e
0000            119   _DAC3L          DATA 0x8d
0000            120   _DACGCF0        DATA 0x88
0000            121   _DACGCF1        DATA 0x98
0000            122   _DACGCF2        DATA 0xa2
0000            123   _DERIVID        DATA 0xad
0000            124   _DEVICEID       DATA 0xb5
0000            125   _DPH            DATA 0x83
0000            126   _DPL            DATA 0x82
0000            127   _EIE1           DATA 0xe6
0000            128   _EIE2           DATA 0xf3
0000            129   _EIP1           DATA 0xbb
0000            130   _EIP1H          DATA 0xee
0000            131   _EIP2           DATA 0xed
0000            132   _EIP2H          DATA 0xf6
0000            133   _EMI0CN         DATA 0xe7
0000            134   _FLKEY          DATA 0xb7
0000            135   _HFO0CAL        DATA 0xc7
0000            136   _HFO1CAL        DATA 0xd6
0000            137   _HFOCN          DATA 0xef
0000            138   _I2C0ADM        DATA 0xff
0000            139   _I2C0CN0        DATA 0xba
0000            140   _I2C0DIN        DATA 0xbc
0000            141   _I2C0DOUT       DATA 0xbb
0000            142   _I2C0FCN0       DATA 0xad
0000            143   _I2C0FCN1       DATA 0xab
0000            144   _I2C0FCT        DATA 0xf5
0000            145   _I2C0SLAD       DATA 0xbd
0000            146   _I2C0STAT       DATA 0xb9
0000            147   _IE             DATA 0xa8
0000            148   _IP             DATA 0xb8
0000            149   _IPH            DATA 0xf2
0000            150   _IT01CF         DATA 0xe4
0000            151   _LFO0CN         DATA 0xb1
0000            152   _P0             DATA 0x80
0000            153   _P0MASK         DATA 0xfe
0000            154   _P0MAT          DATA 0xfd
0000            155   _P0MDIN         DATA 0xf1
0000            156   _P0MDOUT        DATA 0xa4
0000            157   _P0SKIP         DATA 0xd4
0000            158   _P1             DATA 0x90
0000            159   _P1MASK         DATA 0xee
0000            160   _P1MAT          DATA 0xed
0000            161   _P1MDIN         DATA 0xf2
0000            162   _P1MDOUT        DATA 0xa5
0000            163   _P1SKIP         DATA 0xd5
0000            164   _P2             DATA 0xa0
0000            165   _P2MASK         DATA 0xfc
0000            166   _P2MAT          DATA 0xfb
0000            167   _P2MDIN         DATA 0xf3
0000            168   _P2MDOUT        DATA 0xa6
0000            169   _P2SKIP         DATA 0xcc
0000            170   _P3             DATA 0xb0
0000            171   _P3MDIN         DATA 0xf4
0000            172   _P3MDOUT        DATA 0x9c
0000            173   _PCA0CENT       DATA 0x9e
0000            174   _PCA0CLR        DATA 0x9c
0000            175   _PCA0CN0        DATA 0xd8
0000            176   _PCA0CPH0       DATA 0xfc
0000            177   _PCA0CPH1       DATA 0xea
0000            178   _PCA0CPH2       DATA 0xec
0000            179   _PCA0CPH3       DATA 0xf5
0000            180   _PCA0CPH4       DATA 0x85
0000            181   _PCA0CPH5       DATA 0xde
0000            182   _PCA0CPL0       DATA 0xfb
0000            183   _PCA0CPL1       DATA 0xe9
0000            184   _PCA0CPL2       DATA 0xeb
0000            185   _PCA0CPL3       DATA 0xf4
0000            186   _PCA0CPL4       DATA 0x84
0000            187   _PCA0CPL5       DATA 0xdd
0000            188   _PCA0CPM0       DATA 0xda
0000            189   _PCA0CPM1       DATA 0xdb
0000            190   _PCA0CPM2       DATA 0xdc
0000            191   _PCA0CPM3       DATA 0xae
0000            192   _PCA0CPM4       DATA 0xaf
0000            193   _PCA0CPM5       DATA 0xcc
0000            194   _PCA0H          DATA 0xfa
0000            195   _PCA0L          DATA 0xf9
0000            196   _PCA0MD         DATA 0xd9
0000            197   _PCA0POL        DATA 0x96
0000            198   _PCA0PWM        DATA 0xf7
0000            199   _PCON0          DATA 0x87
0000            200   _PCON1          DATA 0xcd
0000            201   _PFE0CN         DATA 0xc1
0000            202   _PRTDRV         DATA 0xf6
0000            203   _PSCTL          DATA 0x8f
0000            204   _PSTAT0         DATA 0xaa
0000            205   _PSW            DATA 0xd0
0000            206   _REF0CN         DATA 0xd1
0000            207   _REG0CN         DATA 0xc9
0000            208   _REVID          DATA 0xb6
0000            209   _RSTSRC         DATA 0xef
0000            210   _SBCON1         DATA 0x94
0000            211   _SBRLH1         DATA 0x96
0000            212   _SBRLL1         DATA 0x95
0000            213   _SBUF           DATA 0x99
0000            214   _SBUF0          DATA 0x99
0000            215   _SBUF1          DATA 0x92
0000            216   _SCON           DATA 0x98
0000            217   _SCON0          DATA 0x98
0000            218   _SCON1          DATA 0xc8
0000            219   _SFRPAGE        DATA 0xa7
0000            220   _SFRPGCN        DATA 0xbc
0000            221   _SFRSTACK       DATA 0xd7
0000            222   _SMB0ADM        DATA 0xd6
0000            223   _SMB0ADR        DATA 0xd7
0000            224   _SMB0CF         DATA 0xc1
0000            225   _SMB0CN0        DATA 0xc0
0000            226   _SMB0DAT        DATA 0xc2
0000            227   _SMB0FCN0       DATA 0xc3
0000            228   _SMB0FCN1       DATA 0xc4
0000            229   _SMB0FCT        DATA 0xef
0000            230   _SMB0RXLN       DATA 0xc5
0000            231   _SMB0TC         DATA 0xac
0000            232   _SMOD1          DATA 0x93
0000            233   _SP             DATA 0x81
0000            234   _SPI0CFG        DATA 0xa1
0000            235   _SPI0CKR        DATA 0xa2
0000            236   _SPI0CN0        DATA 0xf8
0000            237   _SPI0DAT        DATA 0xa3
0000            238   _SPI0FCN0       DATA 0x9a
0000            239   _SPI0FCN1       DATA 0x9b
0000            240   _SPI0FCT        DATA 0xf7
0000            241   _SPI0PCF        DATA 0xdf
0000            242   _TCON           DATA 0x88
0000            243   _TH0            DATA 0x8c
0000            244   _TH1            DATA 0x8d
0000            245   _TL0            DATA 0x8a
0000            246   _TL1            DATA 0x8b
0000            247   _TMOD           DATA 0x89
0000            248   _TMR2CN0        DATA 0xc8
0000            249   _TMR2CN1        DATA 0xfd
0000            250   _TMR2H          DATA 0xcf
0000            251   _TMR2L          DATA 0xce
0000            252   _TMR2RLH        DATA 0xcb
0000            253   _TMR2RLL        DATA 0xca
0000            254   _TMR3CN0        DATA 0x91
0000            255   _TMR3CN1        DATA 0xfe
0000            256   _TMR3H          DATA 0x95
0000            257   _TMR3L          DATA 0x94
0000            258   _TMR3RLH        DATA 0x93
0000            259   _TMR3RLL        DATA 0x92
0000            260   _TMR4CN0        DATA 0x98
0000            261   _TMR4CN1        DATA 0xff
0000            262   _TMR4H          DATA 0xa5
0000            263   _TMR4L          DATA 0xa4
0000            264   _TMR4RLH        DATA 0xa3
0000            265   _TMR4RLL        DATA 0xa2
0000            266   _TMR5CN0        DATA 0xc0
0000            267   _TMR5CN1        DATA 0xf1
0000            268   _TMR5H          DATA 0xd5
0000            269   _TMR5L          DATA 0xd4
0000            270   _TMR5RLH        DATA 0xd3
0000            271   _TMR5RLL        DATA 0xd2
0000            272   _UART0PCF       DATA 0xd9
0000            273   _UART1FCN0      DATA 0x9d
0000            274   _UART1FCN1      DATA 0xd8
0000            275   _UART1FCT       DATA 0xfa
0000            276   _UART1LIN       DATA 0x9e
0000            277   _UART1PCF       DATA 0xda
0000            278   _VDM0CN         DATA 0xff
0000            279   _WDTCN          DATA 0x97
0000            280   _XBR0           DATA 0xe1
0000            281   _XBR1           DATA 0xe2
0000            282   _XBR2           DATA 0xe3
0000            283   _XOSC0CN        DATA 0x86
0000            284   _DPTR           DATA 0x8382
0000            285   _TMR2RL         DATA 0xcbca
0000            286   _TMR3RL         DATA 0x9392
0000            287   _TMR4RL         DATA 0xa3a2
0000            288   _TMR5RL         DATA 0xd3d2
0000            289   _TMR0           DATA 0x8c8a
0000            290   _TMR1           DATA 0x8d8b
0000            291   _TMR2           DATA 0xcfce
0000            292   _TMR3           DATA 0x9594
0000            293   _TMR4           DATA 0xa5a4
0000            294   _TMR5           DATA 0xd5d4
0000            295   _SBRL1          DATA 0x9695
0000            296   _PCA0           DATA 0xfaf9
0000            297   _PCA0CP0        DATA 0xfcfb
0000            298   _PCA0CP1        DATA 0xeae9
0000            299   _PCA0CP2        DATA 0xeceb
0000            300   _PCA0CP3        DATA 0xf5f4
0000            301   _PCA0CP4        DATA 0x8584
0000            302   _PCA0CP5        DATA 0xdedd
0000            303   _ADC0ASA        DATA 0xb6b5
0000            304   _ADC0GT         DATA 0xc4c3
0000            305   _ADC0           DATA 0xbebd
0000            306   _ADC0LT         DATA 0xc6c5
0000            307   _DAC0           DATA 0x8584
0000            308   _DAC1           DATA 0x8a89
0000            309   _DAC2           DATA 0x8c8b
0000            310   _DAC3           DATA 0x8e8d
0000            311   ;--------------------------------------------------------
0000            312   ; special function bits
0000            313   ;--------------------------------------------------------
0000            314   _ACC_0          BIT 0xe0
0000            315   _ACC_1          BIT 0xe1
0000            316   _ACC_2          BIT 0xe2
0000            317   _ACC_3          BIT 0xe3
0000            318   _ACC_4          BIT 0xe4
0000            319   _ACC_5          BIT 0xe5
0000            320   _ACC_6          BIT 0xe6
0000            321   _ACC_7          BIT 0xe7
0000            322   _TEMPE          BIT 0xe8
0000            323   _ADGN0          BIT 0xe9
0000            324   _ADGN1          BIT 0xea
0000            325   _ADWINT         BIT 0xeb
0000            326   _ADBUSY         BIT 0xec
0000            327   _ADINT          BIT 0xed
0000            328   _IPOEN          BIT 0xee
0000            329   _ADEN           BIT 0xef
0000            330   _B_0            BIT 0xf0
0000            331   _B_1            BIT 0xf1
0000            332   _B_2            BIT 0xf2
0000            333   _B_3            BIT 0xf3
0000            334   _B_4            BIT 0xf4
0000            335   _B_5            BIT 0xf5
0000            336   _B_6            BIT 0xf6
0000            337   _B_7            BIT 0xf7
0000            338   _C0FIF          BIT 0xe8
0000            339   _C0RIF          BIT 0xe9
0000            340   _C1FIF          BIT 0xea
0000            341   _C1RIF          BIT 0xeb
0000            342   _C2FIF          BIT 0xec
0000            343   _C2RIF          BIT 0xed
0000            344   _C3FIF          BIT 0xee
0000            345   _C3RIF          BIT 0xef
0000            346   _D1SRC0         BIT 0x88
0000            347   _D1SRC1         BIT 0x89
0000            348   _D1AMEN         BIT 0x8a
0000            349   _D01REFSL       BIT 0x8b
0000            350   _D3SRC0         BIT 0x8c
0000            351   _D3SRC1         BIT 0x8d
0000            352   _D3AMEN         BIT 0x8e
0000            353   _D23REFSL       BIT 0x8f
0000            354   _D0UDIS         BIT 0x98
0000            355   _D1UDIS         BIT 0x99
0000            356   _D2UDIS         BIT 0x9a
0000            357   _D3UDIS         BIT 0x9b
0000            358   _EX0            BIT 0xa8
0000            359   _ET0            BIT 0xa9
0000            360   _EX1            BIT 0xaa
0000            361   _ET1            BIT 0xab
0000            362   _ES0            BIT 0xac
0000            363   _ET2            BIT 0xad
0000            364   _ESPI0          BIT 0xae
0000            365   _EA             BIT 0xaf
0000            366   _PX0            BIT 0xb8
0000            367   _PT0            BIT 0xb9
0000            368   _PX1            BIT 0xba
0000            369   _PT1            BIT 0xbb
0000            370   _PS0            BIT 0xbc
0000            371   _PT2            BIT 0xbd
0000            372   _PSPI0          BIT 0xbe
0000            373   _P0_0           BIT 0x80
0000            374   _P0_1           BIT 0x81
0000            375   _P0_2           BIT 0x82
0000            376   _P0_3           BIT 0x83
0000            377   _P0_4           BIT 0x84
0000            378   _P0_5           BIT 0x85
0000            379   _P0_6           BIT 0x86
0000            380   _P0_7           BIT 0x87
0000            381   _P1_0           BIT 0x90
0000            382   _P1_1           BIT 0x91
0000            383   _P1_2           BIT 0x92
0000            384   _P1_3           BIT 0x93
0000            385   _P1_4           BIT 0x94
0000            386   _P1_5           BIT 0x95
0000            387   _P1_6           BIT 0x96
0000            388   _P1_7           BIT 0x97
0000            389   _P2_0           BIT 0xa0
0000            390   _P2_1           BIT 0xa1
0000            391   _P2_2           BIT 0xa2
0000            392   _P2_3           BIT 0xa3
0000            393   _P2_4           BIT 0xa4
0000            394   _P2_5           BIT 0xa5
0000            395   _P2_6           BIT 0xa6
0000            396   _P3_0           BIT 0xb0
0000            397   _P3_1           BIT 0xb1
0000            398   _P3_2           BIT 0xb2
0000            399   _P3_3           BIT 0xb3
0000            400   _P3_4           BIT 0xb4
0000            401   _P3_7           BIT 0xb7
0000            402   _CCF0           BIT 0xd8
0000            403   _CCF1           BIT 0xd9
0000            404   _CCF2           BIT 0xda
0000            405   _CCF3           BIT 0xdb
0000            406   _CCF4           BIT 0xdc
0000            407   _CCF5           BIT 0xdd
0000            408   _CR             BIT 0xde
0000            409   _CF             BIT 0xdf
0000            410   _PARITY         BIT 0xd0
0000            411   _F1             BIT 0xd1
0000            412   _OV             BIT 0xd2
0000            413   _RS0            BIT 0xd3
0000            414   _RS1            BIT 0xd4
0000            415   _F0             BIT 0xd5
0000            416   _AC             BIT 0xd6
0000            417   _CY             BIT 0xd7
0000            418   _RI             BIT 0x98
0000            419   _TI             BIT 0x99
0000            420   _RB8            BIT 0x9a
0000            421   _TB8            BIT 0x9b
0000            422   _REN            BIT 0x9c
0000            423   _CE             BIT 0x9d
0000            424   _SMODE          BIT 0x9e
0000            425   _RI1            BIT 0xc8
0000            426   _TI1            BIT 0xc9
0000            427   _RBX1           BIT 0xca
0000            428   _TBX1           BIT 0xcb
0000            429   _REN1           BIT 0xcc
0000            430   _PERR1          BIT 0xcd
0000            431   _OVR1           BIT 0xce
0000            432   _SI             BIT 0xc0
0000            433   _ACK            BIT 0xc1
0000            434   _ARBLOST        BIT 0xc2
0000            435   _ACKRQ          BIT 0xc3
0000            436   _STO            BIT 0xc4
0000            437   _STA            BIT 0xc5
0000            438   _TXMODE         BIT 0xc6
0000            439   _MASTER         BIT 0xc7
0000            440   _SPIEN          BIT 0xf8
0000            441   _TXNF           BIT 0xf9
0000            442   _NSSMD0         BIT 0xfa
0000            443   _NSSMD1         BIT 0xfb
0000            444   _RXOVRN         BIT 0xfc
0000            445   _MODF           BIT 0xfd
0000            446   _WCOL           BIT 0xfe
0000            447   _SPIF           BIT 0xff
0000            448   _IT0            BIT 0x88
0000            449   _IE0            BIT 0x89
0000            450   _IT1            BIT 0x8a
0000            451   _IE1            BIT 0x8b
0000            452   _TR0            BIT 0x8c
0000            453   _TF0            BIT 0x8d
0000            454   _TR1            BIT 0x8e
0000            455   _TF1            BIT 0x8f
0000            456   _T2XCLK0        BIT 0xc8
0000            457   _T2XCLK1        BIT 0xc9
0000            458   _TR2            BIT 0xca
0000            459   _T2SPLIT        BIT 0xcb
0000            460   _TF2CEN         BIT 0xcc
0000            461   _TF2LEN         BIT 0xcd
0000            462   _TF2L           BIT 0xce
0000            463   _TF2H           BIT 0xcf
0000            464   _T4XCLK0        BIT 0x98
0000            465   _T4XCLK1        BIT 0x99
0000            466   _TR4            BIT 0x9a
0000            467   _T4SPLIT        BIT 0x9b
0000            468   _TF4CEN         BIT 0x9c
0000            469   _TF4LEN         BIT 0x9d
0000            470   _TF4L           BIT 0x9e
0000            471   _TF4H           BIT 0x9f
0000            472   _T5XCLK0        BIT 0xc0
0000            473   _T5XCLK1        BIT 0xc1
0000            474   _TR5            BIT 0xc2
0000            475   _T5SPLIT        BIT 0xc3
0000            476   _TF5CEN         BIT 0xc4
0000            477   _TF5LEN         BIT 0xc5
0000            478   _TF5L           BIT 0xc6
0000            479   _TF5H           BIT 0xc7
0000            480   _RIE            BIT 0xd8
0000            481   _RXTO0          BIT 0xd9
0000            482   _RXTO1          BIT 0xda
0000            483   _RFRQ           BIT 0xdb
0000            484   _TIE            BIT 0xdc
0000            485   _TXHOLD         BIT 0xdd
0000            486   _TXNF1          BIT 0xde
0000            487   _TFRQ           BIT 0xdf
0000            488   ;--------------------------------------------------------
0000            489   ; overlayable register banks
0000            490   ;--------------------------------------------------------
0000            491            rbank0 segment data overlay
0000            492   ;--------------------------------------------------------
0000            493   ; internal ram data
0000            494   ;--------------------------------------------------------
0000            495            rseg R_DSEG
0000            496   _overflow_count:
0000            497            ds 1
0001            498   _LCDprint_PARM_2:
0001            499            ds 1
0002            500   _main_buffer_1_79:
0002            501            ds 20
0016            502   _main_period_ref_1_79:
0016            503            ds 4
001A            504   _main_freq_ref_1_79:
001A            505            ds 4
001E            506   _main_quarterPeriod_ref_1_79:
001E            507            ds 4
0022            508   _main_prev_period_ref_1_79:
0022            509            ds 4
0026            510   _main_vrms_ref_1_79:
0026            511            ds 4
002A            512   _main_period_spl_1_79:
002A            513            ds 4
002E            514   _main_freq_spl_1_79:
002E            515            ds 4
0032            516   _main_quarterPeriod_spl_1_79:
0032            517            ds 4
0036            518   _main_prev_period_spl_1_79:
0036            519            ds 4
003A            520   _main_phase_diff_deg_1_79:
003A            521            ds 4
003E            522   ;--------------------------------------------------------
003E            523   ; overlayable items in internal ram 
003E            524   ;--------------------------------------------------------
0000            525            rseg    R_OSEG
0000            526            rseg    R_OSEG
0000            527   _InitPinADC_PARM_2:
0000            528            ds 1
0001            529            rseg    R_OSEG
0001            530   ;--------------------------------------------------------
0001            531   ; indirectly addressable internal ram data
0001            532   ;--------------------------------------------------------
0000            533            rseg R_ISEG
0000            534   ;--------------------------------------------------------
0000            535   ; absolute internal ram data
0000            536   ;--------------------------------------------------------
0000            537            DSEG
0000            538   ;--------------------------------------------------------
0000            539   ; bit data
0000            540   ;--------------------------------------------------------
0000            541            rseg R_BSEG
0000            542   _LCDprint_PARM_3:
0000            543            DBIT    1
0001            544   ;--------------------------------------------------------
0001            545   ; paged external ram data
0001            546   ;--------------------------------------------------------
0000            547            rseg R_PSEG
0000            548   ;--------------------------------------------------------
0000            549   ; external ram data
0000            550   ;--------------------------------------------------------
0000            551            rseg R_XSEG
0000            552   ;--------------------------------------------------------
0000            553   ; absolute external ram data
0000            554   ;--------------------------------------------------------
0000            555            XSEG
0000            556   ;--------------------------------------------------------
0000            557   ; external initialized ram data
0000            558   ;--------------------------------------------------------
0000            559            rseg R_IXSEG
0000            560            rseg R_HOME
0000            561            rseg R_GSINIT
0000            562            rseg R_CSEG
0000            563   ;--------------------------------------------------------
0000            564   ; Reset entry point and interrupt vectors
0000            565   ;--------------------------------------------------------
0000            566            CSEG at 0x0000
0000 020000     567            ljmp    _crt0
0003            568   ;--------------------------------------------------------
0003            569   ; global & static initialisations
0003            570   ;--------------------------------------------------------
0000            571            rseg R_HOME
0000            572            rseg R_GSINIT
0000            573            rseg R_GSINIT
0000            574   ;--------------------------------------------------------
0000            575   ; data variables initialization
0000            576   ;--------------------------------------------------------
0000            577            rseg R_DINIT
0000            578            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            579   ;--------------------------------------------------------
0000            580   ; code
0000            581   ;--------------------------------------------------------
0000            582            rseg R_CSEG
0000            583   ;------------------------------------------------------------
0000            584   ;Allocation info for local variables in function '_c51_external_startup'
0000            585   ;------------------------------------------------------------
0000            586   ;------------------------------------------------------------
0000            587   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:32: char _c51_external_startup (void)
0000            588   ;        -----------------------------------------
0000            589   ;         function _c51_external_startup
0000            590   ;        -----------------------------------------
0000            591   __c51_external_startup:
0000            592            using   0
0000            593   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:35: SFRPAGE = 0x00;
0000 75A700     594            mov     _SFRPAGE,#0x00
0003            595   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:36: WDTCN = 0xDE; //First key
0003 7597DE     596            mov     _WDTCN,#0xDE
0006            597   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:37: WDTCN = 0xAD; //Second key
0006 7597AD     598            mov     _WDTCN,#0xAD
0009            599   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:39: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     600            mov     _VDM0CN,#0x80
000C            601   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:40: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     602            mov     _RSTSRC,#0x06
000F            603   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:47: SFRPAGE = 0x10;
000F 75A710     604            mov     _SFRPAGE,#0x10
0012            605   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:48: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     606            mov     _PFE0CN,#0x20
0015            607   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:49: SFRPAGE = 0x00;
0015 75A700     608            mov     _SFRPAGE,#0x00
0018            609   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:70: CLKSEL = 0x00;
0018 75A900     610            mov     _CLKSEL,#0x00
001B            611   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:71: CLKSEL = 0x00;
001B 75A900     612            mov     _CLKSEL,#0x00
001E            613   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:72: while ((CLKSEL & 0x80) == 0);
001E            614   L002001?:
001E E5A9       615            mov     a,_CLKSEL
0020 30E7B8     616            jnb     acc.7,L002001?
0023            617   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:73: CLKSEL = 0x03;
0023 75A903     618            mov     _CLKSEL,#0x03
0026            619   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:74: CLKSEL = 0x03;
0026 75A903     620            mov     _CLKSEL,#0x03
0029            621   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:75: while ((CLKSEL & 0x80) == 0);
0029            622   L002004?:
0029 E5A9       623            mov     a,_CLKSEL
002B 30E738     624            jnb     acc.7,L002004?
002E            625   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:80: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     626            orl     _P0MDOUT,#0x10
0031            627   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:81: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     628            mov     _XBR0,#0x01
0034            629   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:82: XBR1     = 0X00;
0034 75E200     630            mov     _XBR1,#0x00
0037            631   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:83: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     632            mov     _XBR2,#0x40
003A            633   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:89: SCON0 = 0x10;
003A 759810     634            mov     _SCON0,#0x10
003D            635   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:90: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*PRESCALAR));
003D 758DE6     636            mov     _TH1,#0xE6
0040            637   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:91: TL1 = TH1;      // Init Timer1
0040 858D8B     638            mov     _TL1,_TH1
0043            639   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:92: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     640            anl     _TMOD,#0x0F
0046            641   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:93: TMOD |=  0x20;                       
0046 438920     642            orl     _TMOD,#0x20
0049            643   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:94: TR1 = 1; // START Timer1
0049 D28E       644            setb    _TR1
004B            645   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:95: TI = 1;  // Indicate TX0 ready
004B D299       646            setb    _TI
004D            647   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:97: return 0;
004D 758200     648            mov     dpl,#0x00
0050 22         649            ret
0051            650   ;------------------------------------------------------------
0051            651   ;Allocation info for local variables in function 'InitADC'
0051            652   ;------------------------------------------------------------
0051            653   ;------------------------------------------------------------
0051            654   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:101: void InitADC (void)
0051            655   ;        -----------------------------------------
0051            656   ;         function InitADC
0051            657   ;        -----------------------------------------
0051            658   _InitADC:
0051            659   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:103: SFRPAGE = 0x00;
0051 75A700     660            mov     _SFRPAGE,#0x00
0054            661   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:104: ADEN=0; // Disable ADC
0054 C2EF       662            clr     _ADEN
0056            663   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:109: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     664            mov     _ADC0CN1,#0x80
0059            665   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:113: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     666            mov     _ADC0CF0,#0x20
005C            667   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:117: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     668            mov     _ADC0CF1,#0x1E
005F            669   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:126: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     670            mov     _ADC0CN0,#0x00
0062            671   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:131: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     672            mov     _ADC0CF2,#0x3F
0065            673   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:135: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     674            mov     _ADC0CN2,#0x00
0068            675   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:137: ADEN=1; // Enable ADC
0068 D2EF       676            setb    _ADEN
006A 22         677            ret
006B            678   ;------------------------------------------------------------
006B            679   ;Allocation info for local variables in function 'Timer3us'
006B            680   ;------------------------------------------------------------
006B            681   ;us                        Allocated to registers r2 
006B            682   ;i                         Allocated to registers r3 
006B            683   ;------------------------------------------------------------
006B            684   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:144: void Timer3us(unsigned char us)
006B            685   ;        -----------------------------------------
006B            686   ;         function Timer3us
006B            687   ;        -----------------------------------------
006B            688   _Timer3us:
006B AA82       689            mov     r2,dpl
006D            690   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:149: CKCON0|=0b_0100_0000;
006D 438E40     691            orl     _CKCON0,#0x40
0070            692   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:152: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     693            mov     _TMR3RL,#0xB8
0073 7593FF     694            mov     (_TMR3RL >> 8),#0xFF
0076            695   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:153: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     696            mov     _TMR3,_TMR3RL
0079 859395     697            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            698   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:155: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     699            mov     _TMR3CN0,#0x04
007F            700   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       701            mov     r3,#0x00
0081            702   L004004?:
0081 C3         703            clr     c
0082 EB         704            mov     a,r3
0083 9A         705            subb    a,r2
0084 5000       706            jnc     L004007?
0086            707   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:158: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            708   L004001?:
0086 E591       709            mov     a,_TMR3CN0
0088 30E738     710            jnb     acc.7,L004001?
008B            711   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:159: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     712            anl     _TMR3CN0,#0x7F
008E            713   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         714            inc     r3
008F 8000       715            sjmp    L004004?
0091            716   L004007?:
0091            717   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:161: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     718            mov     _TMR3CN0,#0x00
0094 22         719            ret
0095            720   ;------------------------------------------------------------
0095            721   ;Allocation info for local variables in function 'waitms'
0095            722   ;------------------------------------------------------------
0095            723   ;ms                        Allocated to registers r2 r3 
0095            724   ;j                         Allocated to registers r4 r5 
0095            725   ;k                         Allocated to registers r6 
0095            726   ;------------------------------------------------------------
0095            727   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:164: void waitms (unsigned int ms)
0095            728   ;        -----------------------------------------
0095            729   ;         function waitms
0095            730   ;        -----------------------------------------
0095            731   _waitms:
0095 AA82       732            mov     r2,dpl
0097 AB83       733            mov     r3,dph
0099            734   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:168: for(j=0; j<ms; j++)
0099 7C00       735            mov     r4,#0x00
009B 7D00       736            mov     r5,#0x00
009D            737   L005005?:
009D C3         738            clr     c
009E EC         739            mov     a,r4
009F 9A         740            subb    a,r2
00A0 ED         741            mov     a,r5
00A1 9B         742            subb    a,r3
00A2 5000       743            jnc     L005009?
00A4            744   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:169: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       745            mov     r6,#0x00
00A6            746   L005001?:
00A6 BE0478     747            cjne    r6,#0x04,L005018?
00A9            748   L005018?:
00A9 5000       749            jnc     L005007?
00AB 7582FA     750            mov     dpl,#0xFA
00AE C002       751            push    ar2
00B0 C003       752            push    ar3
00B2 C004       753            push    ar4
00B4 C005       754            push    ar5
00B6 C006       755            push    ar6
00B8 120000     756            lcall   _Timer3us
00BB D006       757            pop     ar6
00BD D005       758            pop     ar5
00BF D004       759            pop     ar4
00C1 D003       760            pop     ar3
00C3 D002       761            pop     ar2
00C5 0E         762            inc     r6
00C6 8000       763            sjmp    L005001?
00C8            764   L005007?:
00C8            765   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:168: for(j=0; j<ms; j++)
00C8 0C         766            inc     r4
00C9 BC00B8     767            cjne    r4,#0x00,L005005?
00CC 0D         768            inc     r5
00CD 8000       769            sjmp    L005005?
00CF            770   L005009?:
00CF 22         771            ret
00D0            772   ;------------------------------------------------------------
00D0            773   ;Allocation info for local variables in function 'waitus'
00D0            774   ;------------------------------------------------------------
00D0            775   ;us                        Allocated to registers r2 r3 r4 r5 
00D0            776   ;j                         Allocated to registers r4 r5 
00D0            777   ;j_max                     Allocated to registers r6 r7 
00D0            778   ;k                         Allocated to registers r3 
00D0            779   ;k_max                     Allocated to registers r2 
00D0            780   ;------------------------------------------------------------
00D0            781   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:173: void waitus (unsigned long us){           
00D0            782   ;        -----------------------------------------
00D0            783   ;         function waitus
00D0            784   ;        -----------------------------------------
00D0            785   _waitus:
00D0            786   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:175: unsigned int j_max = us % 50000; // pre-calc this to save cpu resources
00D0 AA82       787            mov     r2,dpl
00D2 AB83       788            mov     r3,dph
00D4 ACF0       789            mov     r4,b
00D6 FD         790            mov     r5,a
00D7 750050     791            mov     __modulong_PARM_2,#0x50
00DA 7501C3     792            mov     (__modulong_PARM_2 + 1),#0xC3
00DD 750200     793            mov     (__modulong_PARM_2 + 2),#0x00
00E0 750300     794            mov     (__modulong_PARM_2 + 3),#0x00
00E3 C002       795            push    ar2
00E5 C003       796            push    ar3
00E7 C004       797            push    ar4
00E9 C005       798            push    ar5
00EB 120000     799            lcall   __modulong
00EE AE82       800            mov     r6,dpl
00F0 AF83       801            mov     r7,dph
00F2 D005       802            pop     ar5
00F4 D004       803            pop     ar4
00F6 D003       804            pop     ar3
00F8 D002       805            pop     ar2
00FA            806   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:177: unsigned char k_max = (char)us/50000;
00FA EA         807            mov     a,r2
00FB 33         808            rlc     a
00FC 95E0       809            subb    a,acc
00FE FB         810            mov     r3,a
00FF FC         811            mov     r4,a
0100 FD         812            mov     r5,a
0101 750050     813            mov     __divslong_PARM_2,#0x50
0104 7501C3     814            mov     (__divslong_PARM_2 + 1),#0xC3
0107 750200     815            mov     (__divslong_PARM_2 + 2),#0x00
010A 750300     816            mov     (__divslong_PARM_2 + 3),#0x00
010D 8A82       817            mov     dpl,r2
010F 8B83       818            mov     dph,r3
0111 8CF0       819            mov     b,r4
0113 ED         820            mov     a,r5
0114 C006       821            push    ar6
0116 C007       822            push    ar7
0118 120000     823            lcall   __divslong
011B AA82       824            mov     r2,dpl
011D ACF0       825            mov     r4,b
011F FD         826            mov     r5,a
0120 D007       827            pop     ar7
0122 D006       828            pop     ar6
0124            829   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:179: for(k = 0; k<k_max; k++){
0124 7B00       830            mov     r3,#0x00
0126            831   L006005?:
0126 C3         832            clr     c
0127 EB         833            mov     a,r3
0128 9A         834            subb    a,r2
0129 5000       835            jnc     L006009?
012B            836   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:180: for(j = 0; j<j_max; j++){
012B 7C00       837            mov     r4,#0x00
012D 7D00       838            mov     r5,#0x00
012F            839   L006001?:
012F C3         840            clr     c
0130 EC         841            mov     a,r4
0131 9E         842            subb    a,r6
0132 ED         843            mov     a,r5
0133 9F         844            subb    a,r7
0134 5000       845            jnc     L006007?
0136            846   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:181: Timer3us(1);
0136 758201     847            mov     dpl,#0x01
0139 C002       848            push    ar2
013B C003       849            push    ar3
013D C004       850            push    ar4
013F C005       851            push    ar5
0141 C006       852            push    ar6
0143 C007       853            push    ar7
0145 120000     854            lcall   _Timer3us
0148 D007       855            pop     ar7
014A D006       856            pop     ar6
014C D005       857            pop     ar5
014E D004       858            pop     ar4
0150 D003       859            pop     ar3
0152 D002       860            pop     ar2
0154            861   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:180: for(j = 0; j<j_max; j++){
0154 0C         862            inc     r4
0155 BC00D8     863            cjne    r4,#0x00,L006001?
0158 0D         864            inc     r5
0159 8000       865            sjmp    L006001?
015B            866   L006007?:
015B            867   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:179: for(k = 0; k<k_max; k++){
015B 0B         868            inc     r3
015C 8000       869            sjmp    L006005?
015E            870   L006009?:
015E 22         871            ret
015F            872   ;------------------------------------------------------------
015F            873   ;Allocation info for local variables in function 'TIMER0_Init'
015F            874   ;------------------------------------------------------------
015F            875   ;------------------------------------------------------------
015F            876   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:186: void TIMER0_Init(void)
015F            877   ;        -----------------------------------------
015F            878   ;         function TIMER0_Init
015F            879   ;        -----------------------------------------
015F            880   _TIMER0_Init:
015F            881   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:188: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
015F 5389F0     882            anl     _TMOD,#0xF0
0162            883   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:189: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit counter
0162 438901     884            orl     _TMOD,#0x01
0165            885   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:190: TR0=0; // Stop Timer/Counter 0
0165 C28C       886            clr     _TR0
0167 22         887            ret
0168            888   ;------------------------------------------------------------
0168            889   ;Allocation info for local variables in function 'InitPinADC'
0168            890   ;------------------------------------------------------------
0168            891   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0168            892   ;portno                    Allocated to registers r2 
0168            893   ;mask                      Allocated to registers r3 
0168            894   ;------------------------------------------------------------
0168            895   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:195: void InitPinADC (unsigned char portno, unsigned char pinno)
0168            896   ;        -----------------------------------------
0168            897   ;         function InitPinADC
0168            898   ;        -----------------------------------------
0168            899   _InitPinADC:
0168 AA82       900            mov     r2,dpl
016A            901   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:199: mask=1<<pinno;
016A 85D8F0     902            mov     b,_InitPinADC_PARM_2
016D 05F0       903            inc     b
016F 7401       904            mov     a,#0x01
0171 8000       905            sjmp    L008013?
0173            906   L008011?:
0173 25E0       907            add     a,acc
0175            908   L008013?:
0175 D5F098     909            djnz    b,L008011?
0178 FB         910            mov     r3,a
0179            911   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:201: SFRPAGE = 0x20;
0179 75A720     912            mov     _SFRPAGE,#0x20
017C            913   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:202: switch (portno)
017C BA00D8     914            cjne    r2,#0x00,L008014?
017F 8000       915            sjmp    L008001?
0181            916   L008014?:
0181 BA0158     917            cjne    r2,#0x01,L008015?
0184 8000       918            sjmp    L008002?
0186            919   L008015?:
0186            920   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:204: case 0:
0186 BA02D8     921            cjne    r2,#0x02,L008005?
0189 8000       922            sjmp    L008003?
018B            923   L008001?:
018B            924   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:205: P0MDIN &= (~mask); // Set pin as analog input
018B EB         925            mov     a,r3
018C F4         926            cpl     a
018D FA         927            mov     r2,a
018E 52F1       928            anl     _P0MDIN,a
0190            929   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:206: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0190 EB         930            mov     a,r3
0191 42D4       931            orl     _P0SKIP,a
0193            932   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:207: break;
0193            933   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:208: case 1:
0193 8000       934            sjmp    L008005?
0195            935   L008002?:
0195            936   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:209: P1MDIN &= (~mask); // Set pin as analog input
0195 EB         937            mov     a,r3
0196 F4         938            cpl     a
0197 FA         939            mov     r2,a
0198 52F2       940            anl     _P1MDIN,a
019A            941   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:210: P1SKIP |= mask; // Skip Crossbar decoding for this pin
019A EB         942            mov     a,r3
019B 42D5       943            orl     _P1SKIP,a
019D            944   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:211: break;
019D            945   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:212: case 2:
019D 8000       946            sjmp    L008005?
019F            947   L008003?:
019F            948   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:213: P2MDIN &= (~mask); // Set pin as analog input
019F EB         949            mov     a,r3
01A0 F4         950            cpl     a
01A1 FA         951            mov     r2,a
01A2 52F3       952            anl     _P2MDIN,a
01A4            953   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:214: P2SKIP |= mask; // Skip Crossbar decoding for this pin
01A4 EB         954            mov     a,r3
01A5 42CC       955            orl     _P2SKIP,a
01A7            956   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:218: }
01A7            957   L008005?:
01A7            958   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:219: SFRPAGE = 0x00;
01A7 75A700     959            mov     _SFRPAGE,#0x00
01AA 22         960            ret
01AB            961   ;------------------------------------------------------------
01AB            962   ;Allocation info for local variables in function 'ADC_at_Pin'
01AB            963   ;------------------------------------------------------------
01AB            964   ;pin                       Allocated to registers 
01AB            965   ;------------------------------------------------------------
01AB            966   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:223: unsigned int ADC_at_Pin(unsigned char pin)
01AB            967   ;        -----------------------------------------
01AB            968   ;         function ADC_at_Pin
01AB            969   ;        -----------------------------------------
01AB            970   _ADC_at_Pin:
01AB 8582BB     971            mov     _ADC0MX,dpl
01AE            972   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:226: ADINT = 0;
01AE C2ED       973            clr     _ADINT
01B0            974   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:227: ADBUSY = 1;     // Convert voltage at the pin
01B0 D2EC       975            setb    _ADBUSY
01B2            976   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:228: while (!ADINT); // Wait for conversion to complete
01B2            977   L009001?:
01B2 30ED58     978            jnb     _ADINT,L009001?
01B5            979   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:229: return (ADC0);
01B5 85BD82     980            mov     dpl,_ADC0
01B8 85BE83     981            mov     dph,(_ADC0 >> 8)
01BB 22         982            ret
01BC            983   ;------------------------------------------------------------
01BC            984   ;Allocation info for local variables in function 'Volts_at_Pin'
01BC            985   ;------------------------------------------------------------
01BC            986   ;pin                       Allocated to registers r2 
01BC            987   ;------------------------------------------------------------
01BC            988   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:232: float Volts_at_Pin(unsigned char pin)
01BC            989   ;        -----------------------------------------
01BC            990   ;         function Volts_at_Pin
01BC            991   ;        -----------------------------------------
01BC            992   _Volts_at_Pin:
01BC            993   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:234: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111); //b/c 14 bit adc
01BC 120000     994            lcall   _ADC_at_Pin
01BF 120000     995            lcall   ___uint2fs
01C2 AA82       996            mov     r2,dpl
01C4 AB83       997            mov     r3,dph
01C6 ACF0       998            mov     r4,b
01C8 FD         999            mov     r5,a
01C9 C002      1000            push    ar2
01CB C003      1001            push    ar3
01CD C004      1002            push    ar4
01CF C005      1003            push    ar5
01D1 906C8B    1004            mov     dptr,#0x6C8B
01D4 75F053    1005            mov     b,#0x53
01D7 7440      1006            mov     a,#0x40
01D9 120000    1007            lcall   ___fsmul
01DC AA82      1008            mov     r2,dpl
01DE AB83      1009            mov     r3,dph
01E0 ACF0      1010            mov     r4,b
01E2 FD        1011            mov     r5,a
01E3 E581      1012            mov     a,sp
01E5 24FC      1013            add     a,#0xfc
01E7 F581      1014            mov     sp,a
01E9 E4        1015            clr     a
01EA C0E0      1016            push    acc
01EC 74FC      1017            mov     a,#0xFC
01EE C0E0      1018            push    acc
01F0 747F      1019            mov     a,#0x7F
01F2 C0E0      1020            push    acc
01F4 7446      1021            mov     a,#0x46
01F6 C0E0      1022            push    acc
01F8 8A82      1023            mov     dpl,r2
01FA 8B83      1024            mov     dph,r3
01FC 8CF0      1025            mov     b,r4
01FE ED        1026            mov     a,r5
01FF 120000    1027            lcall   ___fsdiv
0202 AA82      1028            mov     r2,dpl
0204 AB83      1029            mov     r3,dph
0206 ACF0      1030            mov     r4,b
0208 FD        1031            mov     r5,a
0209 E581      1032            mov     a,sp
020B 24FC      1033            add     a,#0xfc
020D F581      1034            mov     sp,a
020F 8A82      1035            mov     dpl,r2
0211 8B83      1036            mov     dph,r3
0213 8CF0      1037            mov     b,r4
0215 ED        1038            mov     a,r5
0216 22        1039            ret
0217           1040   ;------------------------------------------------------------
0217           1041   ;Allocation info for local variables in function 'LCD_pulse'
0217           1042   ;------------------------------------------------------------
0217           1043   ;------------------------------------------------------------
0217           1044   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:238: void LCD_pulse (void)
0217           1045   ;        -----------------------------------------
0217           1046   ;         function LCD_pulse
0217           1047   ;        -----------------------------------------
0217           1048   _LCD_pulse:
0217           1049   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:240: LCD_E=1;
0217 D2A0      1050            setb    _P2_0
0219           1051   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:241: Timer3us(40);
0219 758228    1052            mov     dpl,#0x28
021C 120000    1053            lcall   _Timer3us
021F           1054   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:242: LCD_E=0;
021F C2A0      1055            clr     _P2_0
0221 22        1056            ret
0222           1057   ;------------------------------------------------------------
0222           1058   ;Allocation info for local variables in function 'LCD_byte'
0222           1059   ;------------------------------------------------------------
0222           1060   ;x                         Allocated to registers r2 
0222           1061   ;------------------------------------------------------------
0222           1062   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:244: void LCD_byte (unsigned char x)
0222           1063   ;        -----------------------------------------
0222           1064   ;         function LCD_byte
0222           1065   ;        -----------------------------------------
0222           1066   _LCD_byte:
0222 AA82      1067            mov     r2,dpl
0224           1068   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:247: ACC=x; //Send high nible
0224 8AE0      1069            mov     _ACC,r2
0226           1070   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:248: LCD_D7=ACC_7;
0226 A2E7      1071            mov     c,_ACC_7
0228 9290      1072            mov     _P1_0,c
022A           1073   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:249: LCD_D6=ACC_6;
022A A2E6      1074            mov     c,_ACC_6
022C 9291      1075            mov     _P1_1,c
022E           1076   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:250: LCD_D5=ACC_5;
022E A2E5      1077            mov     c,_ACC_5
0230 9292      1078            mov     _P1_2,c
0232           1079   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:251: LCD_D4=ACC_4;
0232 A2E4      1080            mov     c,_ACC_4
0234 9293      1081            mov     _P1_3,c
0236           1082   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:252: LCD_pulse();
0236 C002      1083            push    ar2
0238 120000    1084            lcall   _LCD_pulse
023B           1085   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:253: Timer3us(40);
023B 758228    1086            mov     dpl,#0x28
023E 120000    1087            lcall   _Timer3us
0241 D002      1088            pop     ar2
0243           1089   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:254: ACC=x; //Send low nible
0243 8AE0      1090            mov     _ACC,r2
0245           1091   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:255: LCD_D7=ACC_3;
0245 A2E3      1092            mov     c,_ACC_3
0247 9290      1093            mov     _P1_0,c
0249           1094   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:256: LCD_D6=ACC_2;
0249 A2E2      1095            mov     c,_ACC_2
024B 9291      1096            mov     _P1_1,c
024D           1097   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:257: LCD_D5=ACC_1;
024D A2E1      1098            mov     c,_ACC_1
024F 9292      1099            mov     _P1_2,c
0251           1100   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:258: LCD_D4=ACC_0;
0251 A2E0      1101            mov     c,_ACC_0
0253 9293      1102            mov     _P1_3,c
0255           1103   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:259: LCD_pulse();
0255 020000    1104            ljmp    _LCD_pulse
0258           1105   ;------------------------------------------------------------
0258           1106   ;Allocation info for local variables in function 'WriteData'
0258           1107   ;------------------------------------------------------------
0258           1108   ;x                         Allocated to registers r2 
0258           1109   ;------------------------------------------------------------
0258           1110   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:262: void WriteData (unsigned char x)
0258           1111   ;        -----------------------------------------
0258           1112   ;         function WriteData
0258           1113   ;        -----------------------------------------
0258           1114   _WriteData:
0258 AA82      1115            mov     r2,dpl
025A           1116   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:264: LCD_RS=1;
025A D297      1117            setb    _P1_7
025C           1118   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:265: LCD_byte(x);
025C 8A82      1119            mov     dpl,r2
025E 120000    1120            lcall   _LCD_byte
0261           1121   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:266: waitms(2);
0261 900002    1122            mov     dptr,#0x0002
0264 020000    1123            ljmp    _waitms
0267           1124   ;------------------------------------------------------------
0267           1125   ;Allocation info for local variables in function 'WriteCommand'
0267           1126   ;------------------------------------------------------------
0267           1127   ;x                         Allocated to registers r2 
0267           1128   ;------------------------------------------------------------
0267           1129   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:269: void WriteCommand (unsigned char x)
0267           1130   ;        -----------------------------------------
0267           1131   ;         function WriteCommand
0267           1132   ;        -----------------------------------------
0267           1133   _WriteCommand:
0267 AA82      1134            mov     r2,dpl
0269           1135   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:271: LCD_RS=0;
0269 C297      1136            clr     _P1_7
026B           1137   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:272: LCD_byte(x);
026B 8A82      1138            mov     dpl,r2
026D 120000    1139            lcall   _LCD_byte
0270           1140   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:273: waitms(5);
0270 900005    1141            mov     dptr,#0x0005
0273 020000    1142            ljmp    _waitms
0276           1143   ;------------------------------------------------------------
0276           1144   ;Allocation info for local variables in function 'LCD_4BIT'
0276           1145   ;------------------------------------------------------------
0276           1146   ;------------------------------------------------------------
0276           1147   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:276: void LCD_4BIT (void)
0276           1148   ;        -----------------------------------------
0276           1149   ;         function LCD_4BIT
0276           1150   ;        -----------------------------------------
0276           1151   _LCD_4BIT:
0276           1152   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:278: LCD_E=0; // Resting state of LCD's enable is zero
0276 C2A0      1153            clr     _P2_0
0278           1154   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:280: waitms(20);
0278 900014    1155            mov     dptr,#0x0014
027B 120000    1156            lcall   _waitms
027E           1157   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:282: WriteCommand(0x33);
027E 758233    1158            mov     dpl,#0x33
0281 120000    1159            lcall   _WriteCommand
0284           1160   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:283: WriteCommand(0x33);
0284 758233    1161            mov     dpl,#0x33
0287 120000    1162            lcall   _WriteCommand
028A           1163   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:284: WriteCommand(0x32); // Change to 4-bit mode
028A 758232    1164            mov     dpl,#0x32
028D 120000    1165            lcall   _WriteCommand
0290           1166   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:287: WriteCommand(0x28);
0290 758228    1167            mov     dpl,#0x28
0293 120000    1168            lcall   _WriteCommand
0296           1169   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:288: WriteCommand(0x0c);
0296 75820C    1170            mov     dpl,#0x0C
0299 120000    1171            lcall   _WriteCommand
029C           1172   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:289: WriteCommand(0x01); // Clear screen command (takes some time)
029C 758201    1173            mov     dpl,#0x01
029F 120000    1174            lcall   _WriteCommand
02A2           1175   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:290: waitms(20); // Wait for clear screen command to finsih.
02A2 900014    1176            mov     dptr,#0x0014
02A5 020000    1177            ljmp    _waitms
02A8           1178   ;------------------------------------------------------------
02A8           1179   ;Allocation info for local variables in function 'LCDprint'
02A8           1180   ;------------------------------------------------------------
02A8           1181   ;line                      Allocated with name '_LCDprint_PARM_2'
02A8           1182   ;string                    Allocated to registers r2 r3 r4 
02A8           1183   ;j                         Allocated to registers r5 r6 
02A8           1184   ;------------------------------------------------------------
02A8           1185   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:293: void LCDprint(char * string, unsigned char line, bit clear)
02A8           1186   ;        -----------------------------------------
02A8           1187   ;         function LCDprint
02A8           1188   ;        -----------------------------------------
02A8           1189   _LCDprint:
02A8 AA82      1190            mov     r2,dpl
02AA AB83      1191            mov     r3,dph
02AC ACF0      1192            mov     r4,b
02AE           1193   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:297: WriteCommand(line==2?0xc0:0x80);
02AE 7402      1194            mov     a,#0x02
02B0 B5C898    1195            cjne    a,_LCDprint_PARM_2,L016013?
02B3 7DC0      1196            mov     r5,#0xC0
02B5 8000      1197            sjmp    L016014?
02B7           1198   L016013?:
02B7 7D80      1199            mov     r5,#0x80
02B9           1200   L016014?:
02B9 8D82      1201            mov     dpl,r5
02BB C002      1202            push    ar2
02BD C003      1203            push    ar3
02BF C004      1204            push    ar4
02C1 120000    1205            lcall   _WriteCommand
02C4           1206   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:298: waitms(5);
02C4 900005    1207            mov     dptr,#0x0005
02C7 120000    1208            lcall   _waitms
02CA D004      1209            pop     ar4
02CC D003      1210            pop     ar3
02CE D002      1211            pop     ar2
02D0           1212   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:299: for(j=0; string[j]!=0; j++)       WriteData(string[j]);// Write the message
02D0 7D00      1213            mov     r5,#0x00
02D2 7E00      1214            mov     r6,#0x00
02D4           1215   L016003?:
02D4 ED        1216            mov     a,r5
02D5 2A        1217            add     a,r2
02D6 FF        1218            mov     r7,a
02D7 EE        1219            mov     a,r6
02D8 3B        1220            addc    a,r3
02D9 F8        1221            mov     r0,a
02DA 8C01      1222            mov     ar1,r4
02DC 8F82      1223            mov     dpl,r7
02DE 8883      1224            mov     dph,r0
02E0 89F0      1225            mov     b,r1
02E2 120000    1226            lcall   __gptrget
02E5 FF        1227            mov     r7,a
02E6 6000      1228            jz      L016006?
02E8 8F82      1229            mov     dpl,r7
02EA C002      1230            push    ar2
02EC C003      1231            push    ar3
02EE C004      1232            push    ar4
02F0 C005      1233            push    ar5
02F2 C006      1234            push    ar6
02F4 120000    1235            lcall   _WriteData
02F7 D006      1236            pop     ar6
02F9 D005      1237            pop     ar5
02FB D004      1238            pop     ar4
02FD D003      1239            pop     ar3
02FF D002      1240            pop     ar2
0301 0D        1241            inc     r5
0302 BD0018    1242            cjne    r5,#0x00,L016003?
0305 0E        1243            inc     r6
0306 8000      1244            sjmp    L016003?
0308           1245   L016006?:
0308           1246   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:300: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0308 3078D8    1247            jnb     _LCDprint_PARM_3,L016011?
030B 8D02      1248            mov     ar2,r5
030D 8E03      1249            mov     ar3,r6
030F           1250   L016007?:
030F C3        1251            clr     c
0310 EA        1252            mov     a,r2
0311 9410      1253            subb    a,#0x10
0313 EB        1254            mov     a,r3
0314 6480      1255            xrl     a,#0x80
0316 9480      1256            subb    a,#0x80
0318 5000      1257            jnc     L016011?
031A 758220    1258            mov     dpl,#0x20
031D C002      1259            push    ar2
031F C003      1260            push    ar3
0321 120000    1261            lcall   _WriteData
0324 D003      1262            pop     ar3
0326 D002      1263            pop     ar2
0328 0A        1264            inc     r2
0329 BA0018    1265            cjne    r2,#0x00,L016007?
032C 0B        1266            inc     r3
032D 8000      1267            sjmp    L016007?
032F           1268   L016011?:
032F 22        1269            ret
0330           1270   ;------------------------------------------------------------
0330           1271   ;Allocation info for local variables in function 'Get_ADC'
0330           1272   ;------------------------------------------------------------
0330           1273   ;------------------------------------------------------------
0330           1274   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:303: unsigned int Get_ADC(void)
0330           1275   ;        -----------------------------------------
0330           1276   ;         function Get_ADC
0330           1277   ;        -----------------------------------------
0330           1278   _Get_ADC:
0330           1279   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:305: ADINT = 0;
0330 C2ED      1280            clr     _ADINT
0332           1281   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:306: ADBUSY = 1;
0332 D2EC      1282            setb    _ADBUSY
0334           1283   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:307: while (!ADINT);
0334           1284   L017001?:
0334 30ED58    1285            jnb     _ADINT,L017001?
0337           1286   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:308: return (ADC0);
0337 85BD82    1287            mov     dpl,_ADC0
033A 85BE83    1288            mov     dph,(_ADC0 >> 8)
033D 22        1289            ret
033E           1290   ;------------------------------------------------------------
033E           1291   ;Allocation info for local variables in function 'main'
033E           1292   ;------------------------------------------------------------
033E           1293   ;buffer                    Allocated with name '_main_buffer_1_79'
033E           1294   ;halfPeriod_ref            Allocated to registers r2 r3 r4 r5 
033E           1295   ;period_ref                Allocated with name '_main_period_ref_1_79'
033E           1296   ;freq_ref                  Allocated with name '_main_freq_ref_1_79'
033E           1297   ;quarterPeriod_ref         Allocated with name '_main_quarterPeriod_ref_1_79'
033E           1298   ;prev_period_ref           Allocated with name '_main_prev_period_ref_1_79'
033E           1299   ;vrms_ref                  Allocated with name '_main_vrms_ref_1_79'
033E           1300   ;halfPeriod_spl            Allocated to registers r2 r3 r4 r5 
033E           1301   ;period_spl                Allocated with name '_main_period_spl_1_79'
033E           1302   ;freq_spl                  Allocated with name '_main_freq_spl_1_79'
033E           1303   ;quarterPeriod_spl         Allocated with name '_main_quarterPeriod_spl_1_79'
033E           1304   ;prev_period_spl           Allocated with name '_main_prev_period_spl_1_79'
033E           1305   ;vrms_spl                  Allocated to registers 
033E           1306   ;phase_diff_deg            Allocated with name '_main_phase_diff_deg_1_79'
033E           1307   ;phase_diff_time           Allocated to registers r2 r3 r4 r5 
033E           1308   ;------------------------------------------------------------
033E           1309   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:312: void main (void)
033E           1310   ;        -----------------------------------------
033E           1311   ;         function main
033E           1312   ;        -----------------------------------------
033E           1313   _main:
033E           1314   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:333: LCD_4BIT();
033E 120000    1315            lcall   _LCD_4BIT
0341           1316   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:334: TIMER0_Init();
0341 120000    1317            lcall   _TIMER0_Init
0344           1318   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:336: waitms(500); // Give PuTTy a chance to start before sending
0344 9001F4    1319            mov     dptr,#0x01F4
0347 120000    1320            lcall   _waitms
034A           1321   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:337: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
034A 7498      1322            mov     a,#__str_0
034C C0E0      1323            push    acc
034E 74C2      1324            mov     a,#(__str_0 >> 8)
0350 C0E0      1325            push    acc
0352 7480      1326            mov     a,#0x80
0354 C0E0      1327            push    acc
0356 120000    1328            lcall   _printf
0359 1581      1329            dec     sp
035B 1581      1330            dec     sp
035D 1581      1331            dec     sp
035F           1332   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:342: __FILE__, __DATE__, __TIME__);
035F           1333   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:341: "Compiled: %s, %s\n\n",
035F 7418      1334            mov     a,#__str_4
0361 C0E0      1335            push    acc
0363 74C3      1336            mov     a,#(__str_4 >> 8)
0365 C0E0      1337            push    acc
0367 7480      1338            mov     a,#0x80
0369 C0E0      1339            push    acc
036B 7458      1340            mov     a,#__str_3
036D C0E0      1341            push    acc
036F 74C3      1342            mov     a,#(__str_3 >> 8)
0371 C0E0      1343            push    acc
0373 7480      1344            mov     a,#0x80
0375 C0E0      1345            push    acc
0377 7498      1346            mov     a,#__str_2
0379 C0E0      1347            push    acc
037B 74C3      1348            mov     a,#(__str_2 >> 8)
037D C0E0      1349            push    acc
037F 7480      1350            mov     a,#0x80
0381 C0E0      1351            push    acc
0383 74D8      1352            mov     a,#__str_1
0385 C0E0      1353            push    acc
0387 74C3      1354            mov     a,#(__str_1 >> 8)
0389 C0E0      1355            push    acc
038B 7480      1356            mov     a,#0x80
038D C0E0      1357            push    acc
038F 120000    1358            lcall   _printf
0392 E581      1359            mov     a,sp
0394 24F4      1360            add     a,#0xf4
0396 F581      1361            mov     sp,a
0398           1362   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:344: InitPinADC(2, 2); // Configure P2.2 as analog input
0398 75D802    1363            mov     _InitPinADC_PARM_2,#0x02
039B 758202    1364            mov     dpl,#0x02
039E 120000    1365            lcall   _InitPinADC
03A1           1366   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:345: InitPinADC(2, 3); // Configure P2.3 as analog input
03A1 75D803    1367            mov     _InitPinADC_PARM_2,#0x03
03A4 758202    1368            mov     dpl,#0x02
03A7 120000    1369            lcall   _InitPinADC
03AA           1370   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:346: InitPinADC(2, 4); // Configure P2.4 as analog input
03AA 75D804    1371            mov     _InitPinADC_PARM_2,#0x04
03AD 758202    1372            mov     dpl,#0x02
03B0 120000    1373            lcall   _InitPinADC
03B3           1374   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:347: InitPinADC(2, 5); // Configure P2.5 as analog input
03B3 75D805    1375            mov     _InitPinADC_PARM_2,#0x05
03B6 758202    1376            mov     dpl,#0x02
03B9 120000    1377            lcall   _InitPinADC
03BC           1378   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:348: InitPinADC(0, 1);
03BC 75D801    1379            mov     _InitPinADC_PARM_2,#0x01
03BF 758200    1380            mov     dpl,#0x00
03C2 120000    1381            lcall   _InitPinADC
03C5           1382   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:349: InitADC();
03C5 120000    1383            lcall   _InitADC
03C8           1384   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:351: prev_period_ref = 10000;  // initilize these to a period value thats impossible to get
03C8 755800    1385            mov     _main_prev_period_ref_1_79,#0x00
03CB 755940    1386            mov     (_main_prev_period_ref_1_79 + 1),#0x40
03CE 755A1C    1387            mov     (_main_prev_period_ref_1_79 + 2),#0x1C
03D1 755B46    1388            mov     (_main_prev_period_ref_1_79 + 3),#0x46
03D4           1389   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:352: prev_period_spl = 10000;
03D4 75E800    1390            mov     _main_prev_period_spl_1_79,#0x00
03D7 75E940    1391            mov     (_main_prev_period_spl_1_79 + 1),#0x40
03DA 75EA1C    1392            mov     (_main_prev_period_spl_1_79 + 2),#0x1C
03DD 75EB46    1393            mov     (_main_prev_period_spl_1_79 + 3),#0x46
03E0           1394   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:354: while(1)
03E0           1395   L018074?:
03E0           1396   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:358: ADC0MX=REF_SIGNAL;        // <---- PORT FOR REFERENCE SIGNAL
03E0 75BB12    1397            mov     _ADC0MX,#0x12
03E3           1398   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:359: ADINT = 0;
03E3 C2ED      1399            clr     _ADINT
03E5           1400   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:360: ADBUSY=1;
03E5 D2EC      1401            setb    _ADBUSY
03E7           1402   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:361: while (!ADINT);                   // wait for conversion to complete
03E7           1403   L018001?:
03E7 30ED58    1404            jnb     _ADINT,L018001?
03EA           1405   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:362: while (Get_ADC()!=0);     // wait for signal to be 0
03EA           1406   L018004?:
03EA 120000    1407            lcall   _Get_ADC
03ED E582      1408            mov     a,dpl
03EF 8583F0    1409            mov     b,dph
03F2 45F0      1410            orl     a,b
03F4 7000      1411            jnz     L018004?
03F6           1412   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:363: while (Get_ADC()==0);     // wait for signal to be pos
03F6           1413   L018007?:
03F6 120000    1414            lcall   _Get_ADC
03F9 E582      1415            mov     a,dpl
03FB 8583F0    1416            mov     b,dph
03FE 45F0      1417            orl     a,b
0400 6000      1418            jz      L018007?
0402           1419   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:364: overflow_count = 0;               // reset timer 
0402 750800    1420            mov     _overflow_count,#0x00
0405           1421   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:365: TL0=0;
0405 758A00    1422            mov     _TL0,#0x00
0408           1423   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:366: TH0=0;
0408 758C00    1424            mov     _TH0,#0x00
040B           1425   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:367: TR0=1; // start timer 0           
040B D28C      1426            setb    _TR0
040D           1427   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:368: while (Get_ADC()!=0){
040D           1428   L018012?:
040D 120000    1429            lcall   _Get_ADC
0410 E582      1430            mov     a,dpl
0412 8583F0    1431            mov     b,dph
0415 45F0      1432            orl     a,b
0417 6000      1433            jz      L018014?
0419           1434   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:369: if (TF0==1){
0419           1435   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:370: TF0=0;
0419 108D98    1436            jbc     _TF0,L018117?
041C 8000      1437            sjmp    L018012?
041E           1438   L018117?:
041E           1439   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:371: overflow_count++;         // count overflows
041E 0508      1440            inc     _overflow_count
0420 8000      1441            sjmp    L018012?
0422           1442   L018014?:
0422           1443   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:374: TR0=0; // stop timer 0
0422 C28C      1444            clr     _TR0
0424           1445   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:375: halfPeriod_ref=(overflow_count*65536.0 + TH0*256.0 + TL0)*(12.0/SYSCLK);  
0424 850882    1446            mov     dpl,_overflow_count
0427 120000    1447            lcall   ___uchar2fs
042A AE82      1448            mov     r6,dpl
042C AF83      1449            mov     r7,dph
042E A8F0      1450            mov     r0,b
0430 F9        1451            mov     r1,a
0431 C006      1452            push    ar6
0433 C007      1453            push    ar7
0435 C000      1454            push    ar0
0437 C001      1455            push    ar1
0439 900000    1456            mov     dptr,#0x0000
043C 75F080    1457            mov     b,#0x80
043F 7447      1458            mov     a,#0x47
0441 120000    1459            lcall   ___fsmul
0444 AE82      1460            mov     r6,dpl
0446 AF83      1461            mov     r7,dph
0448 A8F0      1462            mov     r0,b
044A F9        1463            mov     r1,a
044B E581      1464            mov     a,sp
044D 24FC      1465            add     a,#0xfc
044F F581      1466            mov     sp,a
0451 858C82    1467            mov     dpl,_TH0
0454 C006      1468            push    ar6
0456 C007      1469            push    ar7
0458 C000      1470            push    ar0
045A C001      1471            push    ar1
045C 120000    1472            lcall   ___uchar2fs
045F AA82      1473            mov     r2,dpl
0461 AB83      1474            mov     r3,dph
0463 ACF0      1475            mov     r4,b
0465 FD        1476            mov     r5,a
0466 C002      1477            push    ar2
0468 C003      1478            push    ar3
046A C004      1479            push    ar4
046C C005      1480            push    ar5
046E 900000    1481            mov     dptr,#0x0000
0471 75F080    1482            mov     b,#0x80
0474 7443      1483            mov     a,#0x43
0476 120000    1484            lcall   ___fsmul
0479 AA82      1485            mov     r2,dpl
047B AB83      1486            mov     r3,dph
047D ACF0      1487            mov     r4,b
047F FD        1488            mov     r5,a
0480 E581      1489            mov     a,sp
0482 24FC      1490            add     a,#0xfc
0484 F581      1491            mov     sp,a
0486 D001      1492            pop     ar1
0488 D000      1493            pop     ar0
048A D007      1494            pop     ar7
048C D006      1495            pop     ar6
048E C002      1496            push    ar2
0490 C003      1497            push    ar3
0492 C004      1498            push    ar4
0494 C005      1499            push    ar5
0496 8E82      1500            mov     dpl,r6
0498 8F83      1501            mov     dph,r7
049A 88F0      1502            mov     b,r0
049C E9        1503            mov     a,r1
049D 120000    1504            lcall   ___fsadd
04A0 AA82      1505            mov     r2,dpl
04A2 AB83      1506            mov     r3,dph
04A4 ACF0      1507            mov     r4,b
04A6 FD        1508            mov     r5,a
04A7 E581      1509            mov     a,sp
04A9 24FC      1510            add     a,#0xfc
04AB F581      1511            mov     sp,a
04AD AE8A      1512            mov     r6,_TL0
04AF 7F00      1513            mov     r7,#0x00
04B1 8E82      1514            mov     dpl,r6
04B3 8F83      1515            mov     dph,r7
04B5 C002      1516            push    ar2
04B7 C003      1517            push    ar3
04B9 C004      1518            push    ar4
04BB C005      1519            push    ar5
04BD 120000    1520            lcall   ___sint2fs
04C0 AE82      1521            mov     r6,dpl
04C2 AF83      1522            mov     r7,dph
04C4 A8F0      1523            mov     r0,b
04C6 F9        1524            mov     r1,a
04C7 D005      1525            pop     ar5
04C9 D004      1526            pop     ar4
04CB D003      1527            pop     ar3
04CD D002      1528            pop     ar2
04CF C006      1529            push    ar6
04D1 C007      1530            push    ar7
04D3 C000      1531            push    ar0
04D5 C001      1532            push    ar1
04D7 8A82      1533            mov     dpl,r2
04D9 8B83      1534            mov     dph,r3
04DB 8CF0      1535            mov     b,r4
04DD ED        1536            mov     a,r5
04DE 120000    1537            lcall   ___fsadd
04E1 AA82      1538            mov     r2,dpl
04E3 AB83      1539            mov     r3,dph
04E5 ACF0      1540            mov     r4,b
04E7 FD        1541            mov     r5,a
04E8 E581      1542            mov     a,sp
04EA 24FC      1543            add     a,#0xfc
04EC F581      1544            mov     sp,a
04EE C002      1545            push    ar2
04F0 C003      1546            push    ar3
04F2 C004      1547            push    ar4
04F4 C005      1548            push    ar5
04F6 90F4FC    1549            mov     dptr,#0xF4FC
04F9 75F032    1550            mov     b,#0x32
04FC 7434      1551            mov     a,#0x34
04FE 120000    1552            lcall   ___fsmul
0501 AA82      1553            mov     r2,dpl
0503 AB83      1554            mov     r3,dph
0505 ACF0      1555            mov     r4,b
0507 FD        1556            mov     r5,a
0508 E581      1557            mov     a,sp
050A 24FC      1558            add     a,#0xfc
050C F581      1559            mov     sp,a
050E           1560   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:376: overflow_count = 0;                // reset timer post count for redundancy
050E 750800    1561            mov     _overflow_count,#0x00
0511           1562   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:377: TL0=0;
0511 758A00    1563            mov     _TL0,#0x00
0514           1564   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:378: TH0=0;
0514 758C00    1565            mov     _TH0,#0x00
0517           1566   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:379: period_ref = 2.0*halfPeriod_ref; // period & freq calcs
0517 C002      1567            push    ar2
0519 C003      1568            push    ar3
051B C004      1569            push    ar4
051D C005      1570            push    ar5
051F 900000    1571            mov     dptr,#(0x00&0x00ff)
0522 E4        1572            clr     a
0523 F5F0      1573            mov     b,a
0525 7440      1574            mov     a,#0x40
0527 120000    1575            lcall   ___fsmul
052A 858268    1576            mov     _main_period_ref_1_79,dpl
052D 858369    1577            mov     (_main_period_ref_1_79 + 1),dph
0530 85F06A    1578            mov     (_main_period_ref_1_79 + 2),b
0533 F56B      1579            mov     (_main_period_ref_1_79 + 3),a
0535 E581      1580            mov     a,sp
0537 24FC      1581            add     a,#0xfc
0539 F581      1582            mov     sp,a
053B           1583   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:380: if(period_ref <= 0.0002){         // freq never exceeds 5000 Hz, ignore bad ones          
053B 7417      1584            mov     a,#0x17
053D C0E0      1585            push    acc
053F 74B7      1586            mov     a,#0xB7
0541 C0E0      1587            push    acc
0543 7451      1588            mov     a,#0x51
0545 C0E0      1589            push    acc
0547 7439      1590            mov     a,#0x39
0549 C0E0      1591            push    acc
054B 856882    1592            mov     dpl,_main_period_ref_1_79
054E 856983    1593            mov     dph,(_main_period_ref_1_79 + 1)
0551 856AF0    1594            mov     b,(_main_period_ref_1_79 + 2)
0554 E56B      1595            mov     a,(_main_period_ref_1_79 + 3)
0556 120000    1596            lcall   ___fsgt
0559 AE82      1597            mov     r6,dpl
055B E581      1598            mov     a,sp
055D 24FC      1599            add     a,#0xfc
055F F581      1600            mov     sp,a
0561 EE        1601            mov     a,r6
0562 7000      1602            jnz     L018016?
0564           1603   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:381: period_ref = prev_period_ref; // noise correction
0564 855868    1604            mov     _main_period_ref_1_79,_main_prev_period_ref_1_79
0567 855969    1605            mov     (_main_period_ref_1_79 + 1),(_main_prev_period_ref_1_79 + 1)
056A 855A6A    1606            mov     (_main_period_ref_1_79 + 2),(_main_prev_period_ref_1_79 + 2)
056D 855B6B    1607            mov     (_main_period_ref_1_79 + 3),(_main_prev_period_ref_1_79 + 3)
0570 8000      1608            sjmp    L018017?
0572           1609   L018016?:
0572           1610   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:383: prev_period_ref = period_ref;
0572 856858    1611            mov     _main_prev_period_ref_1_79,_main_period_ref_1_79
0575 856959    1612            mov     (_main_prev_period_ref_1_79 + 1),(_main_period_ref_1_79 + 1)
0578 856A5A    1613            mov     (_main_prev_period_ref_1_79 + 2),(_main_period_ref_1_79 + 2)
057B 856B5B    1614            mov     (_main_prev_period_ref_1_79 + 3),(_main_period_ref_1_79 + 3)
057E           1615   L018017?:
057E           1616   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:385: freq_ref = 1.0/period_ref;
057E C068      1617            push    _main_period_ref_1_79
0580 C069      1618            push    (_main_period_ref_1_79 + 1)
0582 C06A      1619            push    (_main_period_ref_1_79 + 2)
0584 C06B      1620            push    (_main_period_ref_1_79 + 3)
0586 900000    1621            mov     dptr,#0x0000
0589 75F080    1622            mov     b,#0x80
058C 743F      1623            mov     a,#0x3F
058E 120000    1624            lcall   ___fsdiv
0591 8582B8    1625            mov     _main_freq_ref_1_79,dpl
0594 8583B9    1626            mov     (_main_freq_ref_1_79 + 1),dph
0597 85F0BA    1627            mov     (_main_freq_ref_1_79 + 2),b
059A F5BB      1628            mov     (_main_freq_ref_1_79 + 3),a
059C E581      1629            mov     a,sp
059E 24FC      1630            add     a,#0xfc
05A0 F581      1631            mov     sp,a
05A2           1632   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:386: quarterPeriod_ref = period_ref/4.0;
05A2 E4        1633            clr     a
05A3 C0E0      1634            push    acc
05A5 C0E0      1635            push    acc
05A7 7480      1636            mov     a,#0x80
05A9 C0E0      1637            push    acc
05AB 7440      1638            mov     a,#0x40
05AD C0E0      1639            push    acc
05AF 856882    1640            mov     dpl,_main_period_ref_1_79
05B2 856983    1641            mov     dph,(_main_period_ref_1_79 + 1)
05B5 856AF0    1642            mov     b,(_main_period_ref_1_79 + 2)
05B8 E56B      1643            mov     a,(_main_period_ref_1_79 + 3)
05BA 120000    1644            lcall   ___fsdiv
05BD 858208    1645            mov     _main_quarterPeriod_ref_1_79,dpl
05C0 858309    1646            mov     (_main_quarterPeriod_ref_1_79 + 1),dph
05C3 85F00A    1647            mov     (_main_quarterPeriod_ref_1_79 + 2),b
05C6 F50B      1648            mov     (_main_quarterPeriod_ref_1_79 + 3),a
05C8 E581      1649            mov     a,sp
05CA 24FC      1650            add     a,#0xfc
05CC F581      1651            mov     sp,a
05CE           1652   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:389: ADINT = 0;
05CE C2ED      1653            clr     _ADINT
05D0           1654   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:390: ADBUSY=1;
05D0 D2EC      1655            setb    _ADBUSY
05D2           1656   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:391: while (!ADINT);                   // wait for conversion to complete
05D2           1657   L018018?:
05D2 30ED58    1658            jnb     _ADINT,L018018?
05D5           1659   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:392: while (Get_ADC()!=0);     // wait for signal to be 0
05D5           1660   L018021?:
05D5 120000    1661            lcall   _Get_ADC
05D8 E582      1662            mov     a,dpl
05DA 8583F0    1663            mov     b,dph
05DD 45F0      1664            orl     a,b
05DF 7000      1665            jnz     L018021?
05E1           1666   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:393: while (Get_ADC()==0);     // wait for signal to be pos
05E1           1667   L018024?:
05E1 120000    1668            lcall   _Get_ADC
05E4 E582      1669            mov     a,dpl
05E6 8583F0    1670            mov     b,dph
05E9 45F0      1671            orl     a,b
05EB 6000      1672            jz      L018024?
05ED           1673   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:394: waitms(quarterPeriod_ref*1000);
05ED C008      1674            push    _main_quarterPeriod_ref_1_79
05EF C009      1675            push    (_main_quarterPeriod_ref_1_79 + 1)
05F1 C00A      1676            push    (_main_quarterPeriod_ref_1_79 + 2)
05F3 C00B      1677            push    (_main_quarterPeriod_ref_1_79 + 3)
05F5 900000    1678            mov     dptr,#0x0000
05F8 75F07A    1679            mov     b,#0x7A
05FB 7444      1680            mov     a,#0x44
05FD 120000    1681            lcall   ___fsmul
0600 AE82      1682            mov     r6,dpl
0602 AF83      1683            mov     r7,dph
0604 A8F0      1684            mov     r0,b
0606 F9        1685            mov     r1,a
0607 E581      1686            mov     a,sp
0609 24FC      1687            add     a,#0xfc
060B F581      1688            mov     sp,a
060D 8E82      1689            mov     dpl,r6
060F 8F83      1690            mov     dph,r7
0611 88F0      1691            mov     b,r0
0613 E9        1692            mov     a,r1
0614 120000    1693            lcall   ___fs2uint
0617 120000    1694            lcall   _waitms
061A           1695   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:395: vrms_ref = Volts_at_Pin(REF_SIGNAL)*0.707106781187; // grabs vmax 1/4 T later from 0-cross
061A 758212    1696            mov     dpl,#0x12
061D 120000    1697            lcall   _Volts_at_Pin
0620 AE82      1698            mov     r6,dpl
0622 AF83      1699            mov     r7,dph
0624 A8F0      1700            mov     r0,b
0626 F9        1701            mov     r1,a
0627 C006      1702            push    ar6
0629 C007      1703            push    ar7
062B C000      1704            push    ar0
062D C001      1705            push    ar1
062F 9004F3    1706            mov     dptr,#0x04F3
0632 75F035    1707            mov     b,#0x35
0635 743F      1708            mov     a,#0x3F
0637 120000    1709            lcall   ___fsmul
063A 8582A8    1710            mov     _main_vrms_ref_1_79,dpl
063D 8583A9    1711            mov     (_main_vrms_ref_1_79 + 1),dph
0640 85F0AA    1712            mov     (_main_vrms_ref_1_79 + 2),b
0643 F5AB      1713            mov     (_main_vrms_ref_1_79 + 3),a
0645 E581      1714            mov     a,sp
0647 24FC      1715            add     a,#0xfc
0649 F581      1716            mov     sp,a
064B           1717   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:400: ADC0MX=SPL_SIGNAL;
064B 75BB11    1718            mov     _ADC0MX,#0x11
064E           1719   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:401: ADINT = 0;
064E C2ED      1720            clr     _ADINT
0650           1721   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:402: ADBUSY=1;
0650 D2EC      1722            setb    _ADBUSY
0652           1723   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:403: while (!ADINT);                   // wait for conversion to complete
0652           1724   L018027?:
0652 30ED58    1725            jnb     _ADINT,L018027?
0655           1726   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:404: while (Get_ADC()!=0);     // wait for signal to be 0
0655           1727   L018030?:
0655 120000    1728            lcall   _Get_ADC
0658 E582      1729            mov     a,dpl
065A 8583F0    1730            mov     b,dph
065D 45F0      1731            orl     a,b
065F 7000      1732            jnz     L018030?
0661           1733   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:405: while (Get_ADC()==0);     // wait for signal to be pos
0661           1734   L018033?:
0661 120000    1735            lcall   _Get_ADC
0664 E582      1736            mov     a,dpl
0666 8583F0    1737            mov     b,dph
0669 45F0      1738            orl     a,b
066B 6000      1739            jz      L018033?
066D           1740   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:406: overflow_count = 0;               // reset timer 
066D 750800    1741            mov     _overflow_count,#0x00
0670           1742   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:407: TL0=0;
0670 758A00    1743            mov     _TL0,#0x00
0673           1744   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:408: TH0=0;
0673 758C00    1745            mov     _TH0,#0x00
0676           1746   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:409: TR0=1; // start timer 0           
0676 D28C      1747            setb    _TR0
0678           1748   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:410: while (Get_ADC()!=0){
0678           1749   L018038?:
0678 120000    1750            lcall   _Get_ADC
067B E582      1751            mov     a,dpl
067D 8583F0    1752            mov     b,dph
0680 45F0      1753            orl     a,b
0682 6000      1754            jz      L018040?
0684           1755   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:411: if (TF0==1){
0684           1756   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:412: TF0=0;
0684 108D98    1757            jbc     _TF0,L018126?
0687 8000      1758            sjmp    L018038?
0689           1759   L018126?:
0689           1760   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:413: overflow_count++;         // count overflows
0689 0508      1761            inc     _overflow_count
068B 8000      1762            sjmp    L018038?
068D           1763   L018040?:
068D           1764   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:416: TR0=0; // stop timer 0
068D C28C      1765            clr     _TR0
068F           1766   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:417: halfPeriod_spl=(overflow_count*65536.0 + TH0*256.0 + TL0)*(12.0/SYSCLK);  // {TH0,TL0} -> [15:0]
068F 850882    1767            mov     dpl,_overflow_count
0692 120000    1768            lcall   ___uchar2fs
0695 AE82      1769            mov     r6,dpl
0697 AF83      1770            mov     r7,dph
0699 A8F0      1771            mov     r0,b
069B F9        1772            mov     r1,a
069C C006      1773            push    ar6
069E C007      1774            push    ar7
06A0 C000      1775            push    ar0
06A2 C001      1776            push    ar1
06A4 900000    1777            mov     dptr,#0x0000
06A7 75F080    1778            mov     b,#0x80
06AA 7447      1779            mov     a,#0x47
06AC 120000    1780            lcall   ___fsmul
06AF AE82      1781            mov     r6,dpl
06B1 AF83      1782            mov     r7,dph
06B3 A8F0      1783            mov     r0,b
06B5 F9        1784            mov     r1,a
06B6 E581      1785            mov     a,sp
06B8 24FC      1786            add     a,#0xfc
06BA F581      1787            mov     sp,a
06BC 858C82    1788            mov     dpl,_TH0
06BF C006      1789            push    ar6
06C1 C007      1790            push    ar7
06C3 C000      1791            push    ar0
06C5 C001      1792            push    ar1
06C7 120000    1793            lcall   ___uchar2fs
06CA AA82      1794            mov     r2,dpl
06CC AB83      1795            mov     r3,dph
06CE ACF0      1796            mov     r4,b
06D0 FD        1797            mov     r5,a
06D1 C002      1798            push    ar2
06D3 C003      1799            push    ar3
06D5 C004      1800            push    ar4
06D7 C005      1801            push    ar5
06D9 900000    1802            mov     dptr,#0x0000
06DC 75F080    1803            mov     b,#0x80
06DF 7443      1804            mov     a,#0x43
06E1 120000    1805            lcall   ___fsmul
06E4 AA82      1806            mov     r2,dpl
06E6 AB83      1807            mov     r3,dph
06E8 ACF0      1808            mov     r4,b
06EA FD        1809            mov     r5,a
06EB E581      1810            mov     a,sp
06ED 24FC      1811            add     a,#0xfc
06EF F581      1812            mov     sp,a
06F1 D001      1813            pop     ar1
06F3 D000      1814            pop     ar0
06F5 D007      1815            pop     ar7
06F7 D006      1816            pop     ar6
06F9 C002      1817            push    ar2
06FB C003      1818            push    ar3
06FD C004      1819            push    ar4
06FF C005      1820            push    ar5
0701 8E82      1821            mov     dpl,r6
0703 8F83      1822            mov     dph,r7
0705 88F0      1823            mov     b,r0
0707 E9        1824            mov     a,r1
0708 120000    1825            lcall   ___fsadd
070B AA82      1826            mov     r2,dpl
070D AB83      1827            mov     r3,dph
070F ACF0      1828            mov     r4,b
0711 FD        1829            mov     r5,a
0712 E581      1830            mov     a,sp
0714 24FC      1831            add     a,#0xfc
0716 F581      1832            mov     sp,a
0718 AE8A      1833            mov     r6,_TL0
071A 7F00      1834            mov     r7,#0x00
071C 8E82      1835            mov     dpl,r6
071E 8F83      1836            mov     dph,r7
0720 C002      1837            push    ar2
0722 C003      1838            push    ar3
0724 C004      1839            push    ar4
0726 C005      1840            push    ar5
0728 120000    1841            lcall   ___sint2fs
072B AE82      1842            mov     r6,dpl
072D AF83      1843            mov     r7,dph
072F A8F0      1844            mov     r0,b
0731 F9        1845            mov     r1,a
0732 D005      1846            pop     ar5
0734 D004      1847            pop     ar4
0736 D003      1848            pop     ar3
0738 D002      1849            pop     ar2
073A C006      1850            push    ar6
073C C007      1851            push    ar7
073E C000      1852            push    ar0
0740 C001      1853            push    ar1
0742 8A82      1854            mov     dpl,r2
0744 8B83      1855            mov     dph,r3
0746 8CF0      1856            mov     b,r4
0748 ED        1857            mov     a,r5
0749 120000    1858            lcall   ___fsadd
074C AA82      1859            mov     r2,dpl
074E AB83      1860            mov     r3,dph
0750 ACF0      1861            mov     r4,b
0752 FD        1862            mov     r5,a
0753 E581      1863            mov     a,sp
0755 24FC      1864            add     a,#0xfc
0757 F581      1865            mov     sp,a
0759 C002      1866            push    ar2
075B C003      1867            push    ar3
075D C004      1868            push    ar4
075F C005      1869            push    ar5
0761 90F4FC    1870            mov     dptr,#0xF4FC
0764 75F032    1871            mov     b,#0x32
0767 7434      1872            mov     a,#0x34
0769 120000    1873            lcall   ___fsmul
076C AA82      1874            mov     r2,dpl
076E AB83      1875            mov     r3,dph
0770 ACF0      1876            mov     r4,b
0772 FD        1877            mov     r5,a
0773 E581      1878            mov     a,sp
0775 24FC      1879            add     a,#0xfc
0777 F581      1880            mov     sp,a
0779           1881   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:419: overflow_count = 0;               // reset timer post count for redundancy
0779 750800    1882            mov     _overflow_count,#0x00
077C           1883   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:420: TL0=0;
077C 758A00    1884            mov     _TL0,#0x00
077F           1885   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:421: TH0=0;
077F 758C00    1886            mov     _TH0,#0x00
0782           1887   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:423: period_spl = 2.0*halfPeriod_spl;
0782 C002      1888            push    ar2
0784 C003      1889            push    ar3
0786 C004      1890            push    ar4
0788 C005      1891            push    ar5
078A 900000    1892            mov     dptr,#(0x00&0x00ff)
078D E4        1893            clr     a
078E F5F0      1894            mov     b,a
0790 7440      1895            mov     a,#0x40
0792 120000    1896            lcall   ___fsmul
0795 8582F8    1897            mov     _main_period_spl_1_79,dpl
0798 8583F9    1898            mov     (_main_period_spl_1_79 + 1),dph
079B 85F0FA    1899            mov     (_main_period_spl_1_79 + 2),b
079E F5FB      1900            mov     (_main_period_spl_1_79 + 3),a
07A0 E581      1901            mov     a,sp
07A2 24FC      1902            add     a,#0xfc
07A4 F581      1903            mov     sp,a
07A6           1904   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:425: if(period_spl <= 0.0002){                         
07A6 7417      1905            mov     a,#0x17
07A8 C0E0      1906            push    acc
07AA 74B7      1907            mov     a,#0xB7
07AC C0E0      1908            push    acc
07AE 7451      1909            mov     a,#0x51
07B0 C0E0      1910            push    acc
07B2 7439      1911            mov     a,#0x39
07B4 C0E0      1912            push    acc
07B6 85F882    1913            mov     dpl,_main_period_spl_1_79
07B9 85F983    1914            mov     dph,(_main_period_spl_1_79 + 1)
07BC 85FAF0    1915            mov     b,(_main_period_spl_1_79 + 2)
07BF E5FB      1916            mov     a,(_main_period_spl_1_79 + 3)
07C1 120000    1917            lcall   ___fsgt
07C4 AE82      1918            mov     r6,dpl
07C6 E581      1919            mov     a,sp
07C8 24FC      1920            add     a,#0xfc
07CA F581      1921            mov     sp,a
07CC EE        1922            mov     a,r6
07CD 7000      1923            jnz     L018042?
07CF           1924   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:426: period_spl = prev_period_spl;
07CF 85E8F8    1925            mov     _main_period_spl_1_79,_main_prev_period_spl_1_79
07D2 85E9F9    1926            mov     (_main_period_spl_1_79 + 1),(_main_prev_period_spl_1_79 + 1)
07D5 85EAFA    1927            mov     (_main_period_spl_1_79 + 2),(_main_prev_period_spl_1_79 + 2)
07D8 85EBFB    1928            mov     (_main_period_spl_1_79 + 3),(_main_prev_period_spl_1_79 + 3)
07DB 8000      1929            sjmp    L018043?
07DD           1930   L018042?:
07DD           1931   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:428: prev_period_spl = period_spl;
07DD 85F8E8    1932            mov     _main_prev_period_spl_1_79,_main_period_spl_1_79
07E0 85F9E9    1933            mov     (_main_prev_period_spl_1_79 + 1),(_main_period_spl_1_79 + 1)
07E3 85FAEA    1934            mov     (_main_prev_period_spl_1_79 + 2),(_main_period_spl_1_79 + 2)
07E6 85FBEB    1935            mov     (_main_prev_period_spl_1_79 + 3),(_main_period_spl_1_79 + 3)
07E9           1936   L018043?:
07E9           1937   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:430: freq_spl = 1.0/period_spl;
07E9 C0F8      1938            push    _main_period_spl_1_79
07EB C0F9      1939            push    (_main_period_spl_1_79 + 1)
07ED C0FA      1940            push    (_main_period_spl_1_79 + 2)
07EF C0FB      1941            push    (_main_period_spl_1_79 + 3)
07F1 900000    1942            mov     dptr,#0x0000
07F4 75F080    1943            mov     b,#0x80
07F7 743F      1944            mov     a,#0x3F
07F9 120000    1945            lcall   ___fsdiv
07FC 858248    1946            mov     _main_freq_spl_1_79,dpl
07FF 858349    1947            mov     (_main_freq_spl_1_79 + 1),dph
0802 85F04A    1948            mov     (_main_freq_spl_1_79 + 2),b
0805 F54B      1949            mov     (_main_freq_spl_1_79 + 3),a
0807 E581      1950            mov     a,sp
0809 24FC      1951            add     a,#0xfc
080B F581      1952            mov     sp,a
080D           1953   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:431: quarterPeriod_spl = period_spl/4.0;
080D E4        1954            clr     a
080E C0E0      1955            push    acc
0810 C0E0      1956            push    acc
0812 7480      1957            mov     a,#0x80
0814 C0E0      1958            push    acc
0816 7440      1959            mov     a,#0x40
0818 C0E0      1960            push    acc
081A 85F882    1961            mov     dpl,_main_period_spl_1_79
081D 85F983    1962            mov     dph,(_main_period_spl_1_79 + 1)
0820 85FAF0    1963            mov     b,(_main_period_spl_1_79 + 2)
0823 E5FB      1964            mov     a,(_main_period_spl_1_79 + 3)
0825 120000    1965            lcall   ___fsdiv
0828 858298    1966            mov     _main_quarterPeriod_spl_1_79,dpl
082B 858399    1967            mov     (_main_quarterPeriod_spl_1_79 + 1),dph
082E 85F09A    1968            mov     (_main_quarterPeriod_spl_1_79 + 2),b
0831 F59B      1969            mov     (_main_quarterPeriod_spl_1_79 + 3),a
0833 E581      1970            mov     a,sp
0835 24FC      1971            add     a,#0xfc
0837 F581      1972            mov     sp,a
0839           1973   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:434: ADINT = 0;
0839 C2ED      1974            clr     _ADINT
083B           1975   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:435: ADBUSY=1;
083B D2EC      1976            setb    _ADBUSY
083D           1977   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:436: while (!ADINT);                   // wait for conversion to complete
083D           1978   L018044?:
083D 30ED58    1979            jnb     _ADINT,L018044?
0840           1980   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:437: while (Get_ADC()!=0);     // wait for signal to be 0
0840           1981   L018047?:
0840 120000    1982            lcall   _Get_ADC
0843 E582      1983            mov     a,dpl
0845 8583F0    1984            mov     b,dph
0848 45F0      1985            orl     a,b
084A 7000      1986            jnz     L018047?
084C           1987   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:438: while (Get_ADC()==0);     // wait for signal to be pos
084C           1988   L018050?:
084C 120000    1989            lcall   _Get_ADC
084F E582      1990            mov     a,dpl
0851 8583F0    1991            mov     b,dph
0854 45F0      1992            orl     a,b
0856 6000      1993            jz      L018050?
0858           1994   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:439: waitms(quarterPeriod_spl*1000);
0858 C098      1995            push    _main_quarterPeriod_spl_1_79
085A C099      1996            push    (_main_quarterPeriod_spl_1_79 + 1)
085C C09A      1997            push    (_main_quarterPeriod_spl_1_79 + 2)
085E C09B      1998            push    (_main_quarterPeriod_spl_1_79 + 3)
0860 900000    1999            mov     dptr,#0x0000
0863 75F07A    2000            mov     b,#0x7A
0866 7444      2001            mov     a,#0x44
0868 120000    2002            lcall   ___fsmul
086B AE82      2003            mov     r6,dpl
086D AF83      2004            mov     r7,dph
086F A8F0      2005            mov     r0,b
0871 F9        2006            mov     r1,a
0872 E581      2007            mov     a,sp
0874 24FC      2008            add     a,#0xfc
0876 F581      2009            mov     sp,a
0878 8E82      2010            mov     dpl,r6
087A 8F83      2011            mov     dph,r7
087C 88F0      2012            mov     b,r0
087E E9        2013            mov     a,r1
087F 120000    2014            lcall   ___fs2uint
0882 120000    2015            lcall   _waitms
0885           2016   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:440: vrms_spl = Volts_at_Pin(SPL_SIGNAL)*0.707106781187; // grabs vmax 1/4 T later from 0-cross
0885 758211    2017            mov     dpl,#0x11
0888 120000    2018            lcall   _Volts_at_Pin
088B           2019   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:445: ADC0MX=SPL_SIGNAL;                // start tracking REF signal
088B 75BB11    2020            mov     _ADC0MX,#0x11
088E           2021   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:446: ADINT = 0;
088E C2ED      2022            clr     _ADINT
0890           2023   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:447: ADBUSY=1;
0890 D2EC      2024            setb    _ADBUSY
0892           2025   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:448: while (!ADINT);                   // wait for adc conversion to complete
0892           2026   L018053?:
0892 30ED18    2027            jnb     _ADINT,L018053?
0895           2028   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:449: while (Get_ADC()!=0);     // wait for REF signal to be 0
0895           2029   L018056?:
0895 120000    2030            lcall   _Get_ADC
0898 E582      2031            mov     a,dpl
089A 8583F0    2032            mov     b,dph
089D 45F0      2033            orl     a,b
089F 7000      2034            jnz     L018056?
08A1           2035   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:450: while (Get_ADC()==0);     // wait for REF signal to be pos (0-cross posedge)
08A1           2036   L018059?:
08A1 120000    2037            lcall   _Get_ADC
08A4 E582      2038            mov     a,dpl
08A6 8583F0    2039            mov     b,dph
08A9 45F0      2040            orl     a,b
08AB 6000      2041            jz      L018059?
08AD           2042   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:452: P0_0=1;
08AD D280      2043            setb    _P0_0
08AF           2044   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:454: overflow_count = 0;
08AF 750800    2045            mov     _overflow_count,#0x00
08B2           2046   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:455: TL0=0;                                    // clear timer 0
08B2 758A00    2047            mov     _TL0,#0x00
08B5           2048   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:456: TH0=0;
08B5 758C00    2049            mov     _TH0,#0x00
08B8           2050   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:457: TR0=1;                                    // start timer 0
08B8 D28C      2051            setb    _TR0
08BA           2052   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:460: ADC0MX=REF_SIGNAL;                // start tracking SPL signal
08BA 75BB12    2053            mov     _ADC0MX,#0x12
08BD           2054   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:461: ADINT = 0;
08BD C2ED      2055            clr     _ADINT
08BF           2056   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:462: ADBUSY=1;
08BF D2EC      2057            setb    _ADBUSY
08C1           2058   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:463: while (!ADINT);                   // wait for adc conversion to complete
08C1           2059   L018062?:
08C1 30EDD8    2060            jnb     _ADINT,L018062?
08C4           2061   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:464: while (Get_ADC()!=0){     // wait for SPL signal to be 0
08C4           2062   L018067?:
08C4 120000    2063            lcall   _Get_ADC
08C7 E582      2064            mov     a,dpl
08C9 8583F0    2065            mov     b,dph
08CC 45F0      2066            orl     a,b
08CE 6000      2067            jz      L018070?
08D0           2068   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:465: if (TF0==1){
08D0           2069   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:466: TF0=0;
08D0 108D98    2070            jbc     _TF0,L018136?
08D3 8000      2071            sjmp    L018067?
08D5           2072   L018136?:
08D5           2073   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:467: printf("fhbdshjfgdishfh\n");
08D5 74D8      2074            mov     a,#__str_5
08D7 C0E0      2075            push    acc
08D9 74CC      2076            mov     a,#(__str_5 >> 8)
08DB C0E0      2077            push    acc
08DD 7480      2078            mov     a,#0x80
08DF C0E0      2079            push    acc
08E1 120000    2080            lcall   _printf
08E4 1581      2081            dec     sp
08E6 1581      2082            dec     sp
08E8 1581      2083            dec     sp
08EA           2084   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:468: overflow_count++;         // count overflows
08EA 0508      2085            inc     _overflow_count
08EC           2086   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:471: while (Get_ADC()==0);     // wait for SPL signal to be pos (0-cross posedge)
08EC 8000      2087            sjmp    L018067?
08EE           2088   L018070?:
08EE 120000    2089            lcall   _Get_ADC
08F1 E582      2090            mov     a,dpl
08F3 8583F0    2091            mov     b,dph
08F6 45F0      2092            orl     a,b
08F8 6000      2093            jz      L018070?
08FA           2094   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:473: P0_0=0;
08FA C280      2095            clr     _P0_0
08FC           2096   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:475: TR0=0; // stop timer 0    
08FC C28C      2097            clr     _TR0
08FE           2098   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:476: phase_diff_time = (overflow_count*65536.0 + TH0*256.0 + TL0)*(12.0/SYSCLK);
08FE 850882    2099            mov     dpl,_overflow_count
0901 120000    2100            lcall   ___uchar2fs
0904 AE82      2101            mov     r6,dpl
0906 AF83      2102            mov     r7,dph
0908 A8F0      2103            mov     r0,b
090A F9        2104            mov     r1,a
090B C006      2105            push    ar6
090D C007      2106            push    ar7
090F C000      2107            push    ar0
0911 C001      2108            push    ar1
0913 900000    2109            mov     dptr,#0x0000
0916 75F080    2110            mov     b,#0x80
0919 7447      2111            mov     a,#0x47
091B 120000    2112            lcall   ___fsmul
091E AE82      2113            mov     r6,dpl
0920 AF83      2114            mov     r7,dph
0922 A8F0      2115            mov     r0,b
0924 F9        2116            mov     r1,a
0925 E581      2117            mov     a,sp
0927 24FC      2118            add     a,#0xfc
0929 F581      2119            mov     sp,a
092B 858C82    2120            mov     dpl,_TH0
092E C006      2121            push    ar6
0930 C007      2122            push    ar7
0932 C000      2123            push    ar0
0934 C001      2124            push    ar1
0936 120000    2125            lcall   ___uchar2fs
0939 AA82      2126            mov     r2,dpl
093B AB83      2127            mov     r3,dph
093D ACF0      2128            mov     r4,b
093F FD        2129            mov     r5,a
0940 C002      2130            push    ar2
0942 C003      2131            push    ar3
0944 C004      2132            push    ar4
0946 C005      2133            push    ar5
0948 900000    2134            mov     dptr,#0x0000
094B 75F080    2135            mov     b,#0x80
094E 7443      2136            mov     a,#0x43
0950 120000    2137            lcall   ___fsmul
0953 AA82      2138            mov     r2,dpl
0955 AB83      2139            mov     r3,dph
0957 ACF0      2140            mov     r4,b
0959 FD        2141            mov     r5,a
095A E581      2142            mov     a,sp
095C 24FC      2143            add     a,#0xfc
095E F581      2144            mov     sp,a
0960 D001      2145            pop     ar1
0962 D000      2146            pop     ar0
0964 D007      2147            pop     ar7
0966 D006      2148            pop     ar6
0968 C002      2149            push    ar2
096A C003      2150            push    ar3
096C C004      2151            push    ar4
096E C005      2152            push    ar5
0970 8E82      2153            mov     dpl,r6
0972 8F83      2154            mov     dph,r7
0974 88F0      2155            mov     b,r0
0976 E9        2156            mov     a,r1
0977 120000    2157            lcall   ___fsadd
097A AA82      2158            mov     r2,dpl
097C AB83      2159            mov     r3,dph
097E ACF0      2160            mov     r4,b
0980 FD        2161            mov     r5,a
0981 E581      2162            mov     a,sp
0983 24FC      2163            add     a,#0xfc
0985 F581      2164            mov     sp,a
0987 AE8A      2165            mov     r6,_TL0
0989 7F00      2166            mov     r7,#0x00
098B 8E82      2167            mov     dpl,r6
098D 8F83      2168            mov     dph,r7
098F C002      2169            push    ar2
0991 C003      2170            push    ar3
0993 C004      2171            push    ar4
0995 C005      2172            push    ar5
0997 120000    2173            lcall   ___sint2fs
099A AE82      2174            mov     r6,dpl
099C AF83      2175            mov     r7,dph
099E A8F0      2176            mov     r0,b
09A0 F9        2177            mov     r1,a
09A1 D005      2178            pop     ar5
09A3 D004      2179            pop     ar4
09A5 D003      2180            pop     ar3
09A7 D002      2181            pop     ar2
09A9 C006      2182            push    ar6
09AB C007      2183            push    ar7
09AD C000      2184            push    ar0
09AF C001      2185            push    ar1
09B1 8A82      2186            mov     dpl,r2
09B3 8B83      2187            mov     dph,r3
09B5 8CF0      2188            mov     b,r4
09B7 ED        2189            mov     a,r5
09B8 120000    2190            lcall   ___fsadd
09BB AA82      2191            mov     r2,dpl
09BD AB83      2192            mov     r3,dph
09BF ACF0      2193            mov     r4,b
09C1 FD        2194            mov     r5,a
09C2 E581      2195            mov     a,sp
09C4 24FC      2196            add     a,#0xfc
09C6 F581      2197            mov     sp,a
09C8 C002      2198            push    ar2
09CA C003      2199            push    ar3
09CC C004      2200            push    ar4
09CE C005      2201            push    ar5
09D0 90F4FC    2202            mov     dptr,#0xF4FC
09D3 75F032    2203            mov     b,#0x32
09D6 7434      2204            mov     a,#0x34
09D8 120000    2205            lcall   ___fsmul
09DB AA82      2206            mov     r2,dpl
09DD AB83      2207            mov     r3,dph
09DF ACF0      2208            mov     r4,b
09E1 FD        2209            mov     r5,a
09E2 E581      2210            mov     a,sp
09E4 24FC      2211            add     a,#0xfc
09E6 F581      2212            mov     sp,a
09E8           2213   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:477: phase_diff_deg = phase_diff_time * (360/period_ref);
09E8 C002      2214            push    ar2
09EA C003      2215            push    ar3
09EC C004      2216            push    ar4
09EE C005      2217            push    ar5
09F0 C068      2218            push    _main_period_ref_1_79
09F2 C069      2219            push    (_main_period_ref_1_79 + 1)
09F4 C06A      2220            push    (_main_period_ref_1_79 + 2)
09F6 C06B      2221            push    (_main_period_ref_1_79 + 3)
09F8 900000    2222            mov     dptr,#0x0000
09FB 75F0B4    2223            mov     b,#0xB4
09FE 7443      2224            mov     a,#0x43
0A00 120000    2225            lcall   ___fsdiv
0A03 AE82      2226            mov     r6,dpl
0A05 AF83      2227            mov     r7,dph
0A07 A8F0      2228            mov     r0,b
0A09 F9        2229            mov     r1,a
0A0A E581      2230            mov     a,sp
0A0C 24FC      2231            add     a,#0xfc
0A0E F581      2232            mov     sp,a
0A10 D005      2233            pop     ar5
0A12 D004      2234            pop     ar4
0A14 D003      2235            pop     ar3
0A16 D002      2236            pop     ar2
0A18 C006      2237            push    ar6
0A1A C007      2238            push    ar7
0A1C C000      2239            push    ar0
0A1E C001      2240            push    ar1
0A20 8A82      2241            mov     dpl,r2
0A22 8B83      2242            mov     dph,r3
0A24 8CF0      2243            mov     b,r4
0A26 ED        2244            mov     a,r5
0A27 120000    2245            lcall   ___fsmul
0A2A 858238    2246            mov     _main_phase_diff_deg_1_79,dpl
0A2D 858339    2247            mov     (_main_phase_diff_deg_1_79 + 1),dph
0A30 85F03A    2248            mov     (_main_phase_diff_deg_1_79 + 2),b
0A33 F53B      2249            mov     (_main_phase_diff_deg_1_79 + 3),a
0A35 E581      2250            mov     a,sp
0A37 24FC      2251            add     a,#0xfc
0A39 F581      2252            mov     sp,a
0A3B           2253   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:479: TL0=0;
0A3B           2254   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:480: TH0=0;
0A3B           2255   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:481: overflow_count = 0;
0A3B           2256   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:492: printf("Reference Signal Data        |Sample Signal Data            \n");
0A3B E4        2257            clr     a
0A3C F58A      2258            mov     _TL0,a
0A3E F58C      2259            mov     _TH0,a
0A40 F508      2260            mov     _overflow_count,a
0A42 7418      2261            mov     a,#__str_6
0A44 C0E0      2262            push    acc
0A46 74CD      2263            mov     a,#(__str_6 >> 8)
0A48 C0E0      2264            push    acc
0A4A 7480      2265            mov     a,#0x80
0A4C C0E0      2266            push    acc
0A4E 120000    2267            lcall   _printf
0A51 1581      2268            dec     sp
0A53 1581      2269            dec     sp
0A55 1581      2270            dec     sp
0A57           2271   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:493: printf("---------------------------------------------------------\n");
0A57 7458      2272            mov     a,#__str_7
0A59 C0E0      2273            push    acc
0A5B 74CD      2274            mov     a,#(__str_7 >> 8)
0A5D C0E0      2275            push    acc
0A5F 7480      2276            mov     a,#0x80
0A61 C0E0      2277            push    acc
0A63 120000    2278            lcall   _printf
0A66 1581      2279            dec     sp
0A68 1581      2280            dec     sp
0A6A 1581      2281            dec     sp
0A6C           2282   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:494: printf("Ref Period(T):  %7.6f s  | Spl Period(T):  %7.6f s \n",period_ref*1000, period_spl*1000);
0A6C C0F8      2283            push    _main_period_spl_1_79
0A6E C0F9      2284            push    (_main_period_spl_1_79 + 1)
0A70 C0FA      2285            push    (_main_period_spl_1_79 + 2)
0A72 C0FB      2286            push    (_main_period_spl_1_79 + 3)
0A74 900000    2287            mov     dptr,#0x0000
0A77 75F07A    2288            mov     b,#0x7A
0A7A 7444      2289            mov     a,#0x44
0A7C 120000    2290            lcall   ___fsmul
0A7F AE82      2291            mov     r6,dpl
0A81 AF83      2292            mov     r7,dph
0A83 A8F0      2293            mov     r0,b
0A85 F9        2294            mov     r1,a
0A86 E581      2295            mov     a,sp
0A88 24FC      2296            add     a,#0xfc
0A8A F581      2297            mov     sp,a
0A8C C006      2298            push    ar6
0A8E C007      2299            push    ar7
0A90 C000      2300            push    ar0
0A92 C001      2301            push    ar1
0A94 C068      2302            push    _main_period_ref_1_79
0A96 C069      2303            push    (_main_period_ref_1_79 + 1)
0A98 C06A      2304            push    (_main_period_ref_1_79 + 2)
0A9A C06B      2305            push    (_main_period_ref_1_79 + 3)
0A9C 900000    2306            mov     dptr,#0x0000
0A9F 75F07A    2307            mov     b,#0x7A
0AA2 7444      2308            mov     a,#0x44
0AA4 120000    2309            lcall   ___fsmul
0AA7 AA82      2310            mov     r2,dpl
0AA9 AB83      2311            mov     r3,dph
0AAB ACF0      2312            mov     r4,b
0AAD FD        2313            mov     r5,a
0AAE E581      2314            mov     a,sp
0AB0 24FC      2315            add     a,#0xfc
0AB2 F581      2316            mov     sp,a
0AB4 C002      2317            push    ar2
0AB6 C003      2318            push    ar3
0AB8 C004      2319            push    ar4
0ABA C005      2320            push    ar5
0ABC 7498      2321            mov     a,#__str_8
0ABE C0E0      2322            push    acc
0AC0 74CD      2323            mov     a,#(__str_8 >> 8)
0AC2 C0E0      2324            push    acc
0AC4 7480      2325            mov     a,#0x80
0AC6 C0E0      2326            push    acc
0AC8 120000    2327            lcall   _printf
0ACB E581      2328            mov     a,sp
0ACD 24F5      2329            add     a,#0xf5
0ACF F581      2330            mov     sp,a
0AD1           2331   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:495: printf("Ref Freq(f)  :  %7.6f Hz | Spl Freq(f)  :  %7.6f Hz\n",freq_ref, freq_spl);
0AD1 C048      2332            push    _main_freq_spl_1_79
0AD3 C049      2333            push    (_main_freq_spl_1_79 + 1)
0AD5 C04A      2334            push    (_main_freq_spl_1_79 + 2)
0AD7 C04B      2335            push    (_main_freq_spl_1_79 + 3)
0AD9 C0B8      2336            push    _main_freq_ref_1_79
0ADB C0B9      2337            push    (_main_freq_ref_1_79 + 1)
0ADD C0BA      2338            push    (_main_freq_ref_1_79 + 2)
0ADF C0BB      2339            push    (_main_freq_ref_1_79 + 3)
0AE1 74D8      2340            mov     a,#__str_9
0AE3 C0E0      2341            push    acc
0AE5 74CD      2342            mov     a,#(__str_9 >> 8)
0AE7 C0E0      2343            push    acc
0AE9 7480      2344            mov     a,#0x80
0AEB C0E0      2345            push    acc
0AED 120000    2346            lcall   _printf
0AF0 E581      2347            mov     a,sp
0AF2 24F5      2348            add     a,#0xf5
0AF4 F581      2349            mov     sp,a
0AF6           2350   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:496: printf("Vmax (ref)   :  %4.4f V\n",vrms_ref);
0AF6 C0A8      2351            push    _main_vrms_ref_1_79
0AF8 C0A9      2352            push    (_main_vrms_ref_1_79 + 1)
0AFA C0AA      2353            push    (_main_vrms_ref_1_79 + 2)
0AFC C0AB      2354            push    (_main_vrms_ref_1_79 + 3)
0AFE 7418      2355            mov     a,#__str_10
0B00 C0E0      2356            push    acc
0B02 74CE      2357            mov     a,#(__str_10 >> 8)
0B04 C0E0      2358            push    acc
0B06 7480      2359            mov     a,#0x80
0B08 C0E0      2360            push    acc
0B0A 120000    2361            lcall   _printf
0B0D E581      2362            mov     a,sp
0B0F 24F9      2363            add     a,#0xf9
0B11 F581      2364            mov     sp,a
0B13           2365   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:497: printf("Phase Difference: %7.6f degrees\n", phase_diff_deg);
0B13 C038      2366            push    _main_phase_diff_deg_1_79
0B15 C039      2367            push    (_main_phase_diff_deg_1_79 + 1)
0B17 C03A      2368            push    (_main_phase_diff_deg_1_79 + 2)
0B19 C03B      2369            push    (_main_phase_diff_deg_1_79 + 3)
0B1B 7458      2370            mov     a,#__str_11
0B1D C0E0      2371            push    acc
0B1F 74CE      2372            mov     a,#(__str_11 >> 8)
0B21 C0E0      2373            push    acc
0B23 7480      2374            mov     a,#0x80
0B25 C0E0      2375            push    acc
0B27 120000    2376            lcall   _printf
0B2A E581      2377            mov     a,sp
0B2C 24F9      2378            add     a,#0xf9
0B2E F581      2379            mov     sp,a
0B30           2380   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:498: printf("\033[A\033[A\033[A\033[A\033[A\033[A");
0B30 7498      2381            mov     a,#__str_12
0B32 C0E0      2382            push    acc
0B34 74CE      2383            mov     a,#(__str_12 >> 8)
0B36 C0E0      2384            push    acc
0B38 7480      2385            mov     a,#0x80
0B3A C0E0      2386            push    acc
0B3C 120000    2387            lcall   _printf
0B3F 1581      2388            dec     sp
0B41 1581      2389            dec     sp
0B43 1581      2390            dec     sp
0B45           2391   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:500: sprintf(buffer,"Rf:%2d Sp:%2d Hz",(int)freq_ref%1000, (int)freq_spl%1000);
0B45 854882    2392            mov     dpl,_main_freq_spl_1_79
0B48 854983    2393            mov     dph,(_main_freq_spl_1_79 + 1)
0B4B 854AF0    2394            mov     b,(_main_freq_spl_1_79 + 2)
0B4E E54B      2395            mov     a,(_main_freq_spl_1_79 + 3)
0B50 120000    2396            lcall   ___fs2sint
0B53 7500E8    2397            mov     __modsint_PARM_2,#0xE8
0B56 750103    2398            mov     (__modsint_PARM_2 + 1),#0x03
0B59 120000    2399            lcall   __modsint
0B5C AA82      2400            mov     r2,dpl
0B5E AB83      2401            mov     r3,dph
0B60 85B882    2402            mov     dpl,_main_freq_ref_1_79
0B63 85B983    2403            mov     dph,(_main_freq_ref_1_79 + 1)
0B66 85BAF0    2404            mov     b,(_main_freq_ref_1_79 + 2)
0B69 E5BB      2405            mov     a,(_main_freq_ref_1_79 + 3)
0B6B C002      2406            push    ar2
0B6D C003      2407            push    ar3
0B6F 120000    2408            lcall   ___fs2sint
0B72 7500E8    2409            mov     __modsint_PARM_2,#0xE8
0B75 750103    2410            mov     (__modsint_PARM_2 + 1),#0x03
0B78 120000    2411            lcall   __modsint
0B7B AC82      2412            mov     r4,dpl
0B7D AD83      2413            mov     r5,dph
0B7F C004      2414            push    ar4
0B81 C005      2415            push    ar5
0B83 74A8      2416            mov     a,#__str_13
0B85 C0E0      2417            push    acc
0B87 74CF      2418            mov     a,#(__str_13 >> 8)
0B89 C0E0      2419            push    acc
0B8B 7480      2420            mov     a,#0x80
0B8D C0E0      2421            push    acc
0B8F 7418      2422            mov     a,#_main_buffer_1_79
0B91 C0E0      2423            push    acc
0B93 74B4      2424            mov     a,#(_main_buffer_1_79 >> 8)
0B95 C0E0      2425            push    acc
0B97 7440      2426            mov     a,#0x40
0B99 C0E0      2427            push    acc
0B9B 120000    2428            lcall   _sprintf
0B9E E581      2429            mov     a,sp
0BA0 24F6      2430            add     a,#0xf6
0BA2 F581      2431            mov     sp,a
0BA4           2432   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:501: LCDprint(buffer,1,1);
0BA4 75C801    2433            mov     _LCDprint_PARM_2,#0x01
0BA7 D278      2434            setb    _LCDprint_PARM_3
0BA9 90B418    2435            mov     dptr,#_main_buffer_1_79
0BAC 75F040    2436            mov     b,#0x40
0BAF 120000    2437            lcall   _LCDprint
0BB2           2438   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:503: sprintf(buffer,"Vr:%4.4f V",vrms_ref);
0BB2 C0A8      2439            push    _main_vrms_ref_1_79
0BB4 C0A9      2440            push    (_main_vrms_ref_1_79 + 1)
0BB6 C0AA      2441            push    (_main_vrms_ref_1_79 + 2)
0BB8 C0AB      2442            push    (_main_vrms_ref_1_79 + 3)
0BBA 7428      2443            mov     a,#__str_14
0BBC C0E0      2444            push    acc
0BBE 74D0      2445            mov     a,#(__str_14 >> 8)
0BC0 C0E0      2446            push    acc
0BC2 7480      2447            mov     a,#0x80
0BC4 C0E0      2448            push    acc
0BC6 7418      2449            mov     a,#_main_buffer_1_79
0BC8 C0E0      2450            push    acc
0BCA 74B4      2451            mov     a,#(_main_buffer_1_79 >> 8)
0BCC C0E0      2452            push    acc
0BCE 7440      2453            mov     a,#0x40
0BD0 C0E0      2454            push    acc
0BD2 120000    2455            lcall   _sprintf
0BD5 E581      2456            mov     a,sp
0BD7 24F6      2457            add     a,#0xf6
0BD9 F581      2458            mov     sp,a
0BDB           2459   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:504: LCDprint(buffer,2,1);
0BDB 75C802    2460            mov     _LCDprint_PARM_2,#0x02
0BDE D278      2461            setb    _LCDprint_PARM_3
0BE0 90B418    2462            mov     dptr,#_main_buffer_1_79
0BE3 75F040    2463            mov     b,#0x40
0BE6 120000    2464            lcall   _LCDprint
0BE9           2465   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:505: waitms(500);
0BE9 9001F4    2466            mov     dptr,#0x01F4
0BEC 120000    2467            lcall   _waitms
0BEF 020000    2468            ljmp    L018074?
0BF2           2469            rseg R_CSEG
0BF2           2470   
0000           2471            rseg R_XINIT
0000           2472   
0000           2473            rseg R_CONST
0000           2474   __str_0:
0000 1B        2475            db 0x1B
0001 5B324A    2476            db '[2J'
0004 00        2477            db 0x00
0005           2478   __str_1:
0005 41444320  2479            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        2480            db 0x0A
0016 46696C65  2481            db 'File: %s'
     3A202573
001E 0A        2482            db 0x0A
001F 436F6D70  2483            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        2484            db 0x0A
0030 0A        2485            db 0x0A
0031 00        2486            db 0x00
0032           2487   __str_2:
0032 433A      2488            db 'C:'
0034 5C        2489            db 0x5C
0035 55736572  2490            db 'Users'
     73
003A 5C        2491            db 0x5C
003B 636F7372  2492            db 'cosr3'
     33
0040 5C        2493            db 0x5C
0041 446F6375  2494            db 'Documents'
     6D656E74
     73
004A 5C        2495            db 0x5C
004B 47697448  2496            db 'GitHub'
     7562
0051 5C        2497            db 0x5C
0052 454C4543  2498            db 'ELEC-291-Lab5'
     2D323931
     2D4C6162
     35
005F 5C        2499            db 0x5C
0060 45464D38  2500            db 'EFM8_ADC.c'
     5F414443
     2E63
006A 00        2501            db 0x00
006B           2502   __str_3:
006B 4D617220  2503            db 'Mar  4 2024'
     20342032
     303234
0076 00        2504            db 0x00
0077           2505   __str_4:
0077 32323A33  2506            db '22:34:14'
     343A3134
007F 00        2507            db 0x00
0080           2508   __str_5:
0080 66686264  2509            db 'fhbdshjfgdishfh'
     73686A66
     67646973
     686668
008F 0A        2510            db 0x0A
0090 00        2511            db 0x00
0091           2512   __str_6:
0091 52656665  2513            db 'Reference Signal Data        |Sample Signal Data            '
     72656E63
     65205369
     676E616C
     20446174
     61202020
     20202020
     207C5361
     6D706C65
     20536967
     6E616C20
     44617461
     20202020
     20202020
     20202020
00CD 0A        2514            db 0x0A
00CE 00        2515            db 0x00
00CF           2516   __str_7:
00CF 2D2D2D2D  2517            db '---------------------------------------------------------'
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D2D2D2D
     2D
0108 0A        2518            db 0x0A
0109 00        2519            db 0x00
010A           2520   __str_8:
010A 52656620  2521            db 'Ref Period(T):  %7.6f s  | Spl Period(T):  %7.6f s '
     50657269
     6F642854
     293A2020
     25372E36
     66207320
     207C2053
     706C2050
     6572696F
     64285429
     3A202025
     372E3666
     207320
013D 0A        2522            db 0x0A
013E 00        2523            db 0x00
013F           2524   __str_9:
013F 52656620  2525            db 'Ref Freq(f)  :  %7.6f Hz | Spl Freq(f)  :  %7.6f Hz'
     46726571
     28662920
     203A2020
     25372E36
     6620487A
     207C2053
     706C2046
     72657128
     66292020
     3A202025
     372E3666
     20487A
0172 0A        2526            db 0x0A
0173 00        2527            db 0x00
0174           2528   __str_10:
0174 566D6178  2529            db 'Vmax (ref)   :  %4.4f V'
     20287265
     66292020
     203A2020
     25342E34
     662056
018B 0A        2530            db 0x0A
018C 00        2531            db 0x00
018D           2532   __str_11:
018D 50686173  2533            db 'Phase Difference: %7.6f degrees'
     65204469
     66666572
     656E6365
     3A202537
     2E366620
     64656772
     656573
01AC 0A        2534            db 0x0A
01AD 00        2535            db 0x00
01AE           2536   __str_12:
01AE 1B        2537            db 0x1B
01AF 5B41      2538            db '[A'
01B1 1B        2539            db 0x1B
01B2 5B41      2540            db '[A'
01B4 1B        2541            db 0x1B
01B5 5B41      2542            db '[A'
01B7 1B        2543            db 0x1B
01B8 5B41      2544            db '[A'
01BA 1B        2545            db 0x1B
01BB 5B41      2546            db '[A'
01BD 1B        2547            db 0x1B
01BE 5B41      2548            db '[A'
01C0 00        2549            db 0x00
01C1           2550   __str_13:
01C1 52663A25  2551            db 'Rf:%2d Sp:%2d Hz'
     32642053
     703A2532
     6420487A
01D1 00        2552            db 0x00
01D2           2553   __str_14:
01D2 56723A25  2554            db 'Vr:%4.4f V'
     342E3466
     2056
01DC 00        2555            db 0x00
01DD           2556   
0003           2557            CSEG
0003           2558   
0003           2559   end
