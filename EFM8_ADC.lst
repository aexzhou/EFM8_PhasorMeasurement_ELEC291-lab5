0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sun Mar 03 18:29:06 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Get_ADC
0000             30            public _LCDprint
0000             31            public _LCD_4BIT
0000             32            public _WriteCommand
0000             33            public _WriteData
0000             34            public _LCD_byte
0000             35            public _LCD_pulse
0000             36            public _Volts_at_Pin
0000             37            public _ADC_at_Pin
0000             38            public _InitPinADC
0000             39            public _TIMER0_Init
0000             40            public _waitms
0000             41            public _Timer3us
0000             42            public _InitADC
0000             43            public __c51_external_startup
0000             44            public _LCDprint_PARM_3
0000             45            public _LCDprint_PARM_2
0000             46            public _overflow_count
0000             47   ;--------------------------------------------------------
0000             48   ; Special Function Registers
0000             49   ;--------------------------------------------------------
0000             50   _ACC            DATA 0xe0
0000             51   _ADC0ASAH       DATA 0xb6
0000             52   _ADC0ASAL       DATA 0xb5
0000             53   _ADC0ASCF       DATA 0xa1
0000             54   _ADC0ASCT       DATA 0xc7
0000             55   _ADC0CF0        DATA 0xbc
0000             56   _ADC0CF1        DATA 0xb9
0000             57   _ADC0CF2        DATA 0xdf
0000             58   _ADC0CN0        DATA 0xe8
0000             59   _ADC0CN1        DATA 0xb2
0000             60   _ADC0CN2        DATA 0xb3
0000             61   _ADC0GTH        DATA 0xc4
0000             62   _ADC0GTL        DATA 0xc3
0000             63   _ADC0H          DATA 0xbe
0000             64   _ADC0L          DATA 0xbd
0000             65   _ADC0LTH        DATA 0xc6
0000             66   _ADC0LTL        DATA 0xc5
0000             67   _ADC0MX         DATA 0xbb
0000             68   _B              DATA 0xf0
0000             69   _CKCON0         DATA 0x8e
0000             70   _CKCON1         DATA 0xa6
0000             71   _CLEN0          DATA 0xc6
0000             72   _CLIE0          DATA 0xc7
0000             73   _CLIF0          DATA 0xe8
0000             74   _CLKSEL         DATA 0xa9
0000             75   _CLOUT0         DATA 0xd1
0000             76   _CLU0CF         DATA 0xb1
0000             77   _CLU0FN         DATA 0xaf
0000             78   _CLU0MX         DATA 0x84
0000             79   _CLU1CF         DATA 0xb3
0000             80   _CLU1FN         DATA 0xb2
0000             81   _CLU1MX         DATA 0x85
0000             82   _CLU2CF         DATA 0xb6
0000             83   _CLU2FN         DATA 0xb5
0000             84   _CLU2MX         DATA 0x91
0000             85   _CLU3CF         DATA 0xbf
0000             86   _CLU3FN         DATA 0xbe
0000             87   _CLU3MX         DATA 0xae
0000             88   _CMP0CN0        DATA 0x9b
0000             89   _CMP0CN1        DATA 0x99
0000             90   _CMP0MD         DATA 0x9d
0000             91   _CMP0MX         DATA 0x9f
0000             92   _CMP1CN0        DATA 0xbf
0000             93   _CMP1CN1        DATA 0xac
0000             94   _CMP1MD         DATA 0xab
0000             95   _CMP1MX         DATA 0xaa
0000             96   _CRC0CN0        DATA 0xce
0000             97   _CRC0CN1        DATA 0x86
0000             98   _CRC0CNT        DATA 0xd3
0000             99   _CRC0DAT        DATA 0xcb
0000            100   _CRC0FLIP       DATA 0xcf
0000            101   _CRC0IN         DATA 0xca
0000            102   _CRC0ST         DATA 0xd2
0000            103   _DAC0CF0        DATA 0x91
0000            104   _DAC0CF1        DATA 0x92
0000            105   _DAC0H          DATA 0x85
0000            106   _DAC0L          DATA 0x84
0000            107   _DAC1CF0        DATA 0x93
0000            108   _DAC1CF1        DATA 0x94
0000            109   _DAC1H          DATA 0x8a
0000            110   _DAC1L          DATA 0x89
0000            111   _DAC2CF0        DATA 0x95
0000            112   _DAC2CF1        DATA 0x96
0000            113   _DAC2H          DATA 0x8c
0000            114   _DAC2L          DATA 0x8b
0000            115   _DAC3CF0        DATA 0x9a
0000            116   _DAC3CF1        DATA 0x9c
0000            117   _DAC3H          DATA 0x8e
0000            118   _DAC3L          DATA 0x8d
0000            119   _DACGCF0        DATA 0x88
0000            120   _DACGCF1        DATA 0x98
0000            121   _DACGCF2        DATA 0xa2
0000            122   _DERIVID        DATA 0xad
0000            123   _DEVICEID       DATA 0xb5
0000            124   _DPH            DATA 0x83
0000            125   _DPL            DATA 0x82
0000            126   _EIE1           DATA 0xe6
0000            127   _EIE2           DATA 0xf3
0000            128   _EIP1           DATA 0xbb
0000            129   _EIP1H          DATA 0xee
0000            130   _EIP2           DATA 0xed
0000            131   _EIP2H          DATA 0xf6
0000            132   _EMI0CN         DATA 0xe7
0000            133   _FLKEY          DATA 0xb7
0000            134   _HFO0CAL        DATA 0xc7
0000            135   _HFO1CAL        DATA 0xd6
0000            136   _HFOCN          DATA 0xef
0000            137   _I2C0ADM        DATA 0xff
0000            138   _I2C0CN0        DATA 0xba
0000            139   _I2C0DIN        DATA 0xbc
0000            140   _I2C0DOUT       DATA 0xbb
0000            141   _I2C0FCN0       DATA 0xad
0000            142   _I2C0FCN1       DATA 0xab
0000            143   _I2C0FCT        DATA 0xf5
0000            144   _I2C0SLAD       DATA 0xbd
0000            145   _I2C0STAT       DATA 0xb9
0000            146   _IE             DATA 0xa8
0000            147   _IP             DATA 0xb8
0000            148   _IPH            DATA 0xf2
0000            149   _IT01CF         DATA 0xe4
0000            150   _LFO0CN         DATA 0xb1
0000            151   _P0             DATA 0x80
0000            152   _P0MASK         DATA 0xfe
0000            153   _P0MAT          DATA 0xfd
0000            154   _P0MDIN         DATA 0xf1
0000            155   _P0MDOUT        DATA 0xa4
0000            156   _P0SKIP         DATA 0xd4
0000            157   _P1             DATA 0x90
0000            158   _P1MASK         DATA 0xee
0000            159   _P1MAT          DATA 0xed
0000            160   _P1MDIN         DATA 0xf2
0000            161   _P1MDOUT        DATA 0xa5
0000            162   _P1SKIP         DATA 0xd5
0000            163   _P2             DATA 0xa0
0000            164   _P2MASK         DATA 0xfc
0000            165   _P2MAT          DATA 0xfb
0000            166   _P2MDIN         DATA 0xf3
0000            167   _P2MDOUT        DATA 0xa6
0000            168   _P2SKIP         DATA 0xcc
0000            169   _P3             DATA 0xb0
0000            170   _P3MDIN         DATA 0xf4
0000            171   _P3MDOUT        DATA 0x9c
0000            172   _PCA0CENT       DATA 0x9e
0000            173   _PCA0CLR        DATA 0x9c
0000            174   _PCA0CN0        DATA 0xd8
0000            175   _PCA0CPH0       DATA 0xfc
0000            176   _PCA0CPH1       DATA 0xea
0000            177   _PCA0CPH2       DATA 0xec
0000            178   _PCA0CPH3       DATA 0xf5
0000            179   _PCA0CPH4       DATA 0x85
0000            180   _PCA0CPH5       DATA 0xde
0000            181   _PCA0CPL0       DATA 0xfb
0000            182   _PCA0CPL1       DATA 0xe9
0000            183   _PCA0CPL2       DATA 0xeb
0000            184   _PCA0CPL3       DATA 0xf4
0000            185   _PCA0CPL4       DATA 0x84
0000            186   _PCA0CPL5       DATA 0xdd
0000            187   _PCA0CPM0       DATA 0xda
0000            188   _PCA0CPM1       DATA 0xdb
0000            189   _PCA0CPM2       DATA 0xdc
0000            190   _PCA0CPM3       DATA 0xae
0000            191   _PCA0CPM4       DATA 0xaf
0000            192   _PCA0CPM5       DATA 0xcc
0000            193   _PCA0H          DATA 0xfa
0000            194   _PCA0L          DATA 0xf9
0000            195   _PCA0MD         DATA 0xd9
0000            196   _PCA0POL        DATA 0x96
0000            197   _PCA0PWM        DATA 0xf7
0000            198   _PCON0          DATA 0x87
0000            199   _PCON1          DATA 0xcd
0000            200   _PFE0CN         DATA 0xc1
0000            201   _PRTDRV         DATA 0xf6
0000            202   _PSCTL          DATA 0x8f
0000            203   _PSTAT0         DATA 0xaa
0000            204   _PSW            DATA 0xd0
0000            205   _REF0CN         DATA 0xd1
0000            206   _REG0CN         DATA 0xc9
0000            207   _REVID          DATA 0xb6
0000            208   _RSTSRC         DATA 0xef
0000            209   _SBCON1         DATA 0x94
0000            210   _SBRLH1         DATA 0x96
0000            211   _SBRLL1         DATA 0x95
0000            212   _SBUF           DATA 0x99
0000            213   _SBUF0          DATA 0x99
0000            214   _SBUF1          DATA 0x92
0000            215   _SCON           DATA 0x98
0000            216   _SCON0          DATA 0x98
0000            217   _SCON1          DATA 0xc8
0000            218   _SFRPAGE        DATA 0xa7
0000            219   _SFRPGCN        DATA 0xbc
0000            220   _SFRSTACK       DATA 0xd7
0000            221   _SMB0ADM        DATA 0xd6
0000            222   _SMB0ADR        DATA 0xd7
0000            223   _SMB0CF         DATA 0xc1
0000            224   _SMB0CN0        DATA 0xc0
0000            225   _SMB0DAT        DATA 0xc2
0000            226   _SMB0FCN0       DATA 0xc3
0000            227   _SMB0FCN1       DATA 0xc4
0000            228   _SMB0FCT        DATA 0xef
0000            229   _SMB0RXLN       DATA 0xc5
0000            230   _SMB0TC         DATA 0xac
0000            231   _SMOD1          DATA 0x93
0000            232   _SP             DATA 0x81
0000            233   _SPI0CFG        DATA 0xa1
0000            234   _SPI0CKR        DATA 0xa2
0000            235   _SPI0CN0        DATA 0xf8
0000            236   _SPI0DAT        DATA 0xa3
0000            237   _SPI0FCN0       DATA 0x9a
0000            238   _SPI0FCN1       DATA 0x9b
0000            239   _SPI0FCT        DATA 0xf7
0000            240   _SPI0PCF        DATA 0xdf
0000            241   _TCON           DATA 0x88
0000            242   _TH0            DATA 0x8c
0000            243   _TH1            DATA 0x8d
0000            244   _TL0            DATA 0x8a
0000            245   _TL1            DATA 0x8b
0000            246   _TMOD           DATA 0x89
0000            247   _TMR2CN0        DATA 0xc8
0000            248   _TMR2CN1        DATA 0xfd
0000            249   _TMR2H          DATA 0xcf
0000            250   _TMR2L          DATA 0xce
0000            251   _TMR2RLH        DATA 0xcb
0000            252   _TMR2RLL        DATA 0xca
0000            253   _TMR3CN0        DATA 0x91
0000            254   _TMR3CN1        DATA 0xfe
0000            255   _TMR3H          DATA 0x95
0000            256   _TMR3L          DATA 0x94
0000            257   _TMR3RLH        DATA 0x93
0000            258   _TMR3RLL        DATA 0x92
0000            259   _TMR4CN0        DATA 0x98
0000            260   _TMR4CN1        DATA 0xff
0000            261   _TMR4H          DATA 0xa5
0000            262   _TMR4L          DATA 0xa4
0000            263   _TMR4RLH        DATA 0xa3
0000            264   _TMR4RLL        DATA 0xa2
0000            265   _TMR5CN0        DATA 0xc0
0000            266   _TMR5CN1        DATA 0xf1
0000            267   _TMR5H          DATA 0xd5
0000            268   _TMR5L          DATA 0xd4
0000            269   _TMR5RLH        DATA 0xd3
0000            270   _TMR5RLL        DATA 0xd2
0000            271   _UART0PCF       DATA 0xd9
0000            272   _UART1FCN0      DATA 0x9d
0000            273   _UART1FCN1      DATA 0xd8
0000            274   _UART1FCT       DATA 0xfa
0000            275   _UART1LIN       DATA 0x9e
0000            276   _UART1PCF       DATA 0xda
0000            277   _VDM0CN         DATA 0xff
0000            278   _WDTCN          DATA 0x97
0000            279   _XBR0           DATA 0xe1
0000            280   _XBR1           DATA 0xe2
0000            281   _XBR2           DATA 0xe3
0000            282   _XOSC0CN        DATA 0x86
0000            283   _DPTR           DATA 0x8382
0000            284   _TMR2RL         DATA 0xcbca
0000            285   _TMR3RL         DATA 0x9392
0000            286   _TMR4RL         DATA 0xa3a2
0000            287   _TMR5RL         DATA 0xd3d2
0000            288   _TMR0           DATA 0x8c8a
0000            289   _TMR1           DATA 0x8d8b
0000            290   _TMR2           DATA 0xcfce
0000            291   _TMR3           DATA 0x9594
0000            292   _TMR4           DATA 0xa5a4
0000            293   _TMR5           DATA 0xd5d4
0000            294   _SBRL1          DATA 0x9695
0000            295   _PCA0           DATA 0xfaf9
0000            296   _PCA0CP0        DATA 0xfcfb
0000            297   _PCA0CP1        DATA 0xeae9
0000            298   _PCA0CP2        DATA 0xeceb
0000            299   _PCA0CP3        DATA 0xf5f4
0000            300   _PCA0CP4        DATA 0x8584
0000            301   _PCA0CP5        DATA 0xdedd
0000            302   _ADC0ASA        DATA 0xb6b5
0000            303   _ADC0GT         DATA 0xc4c3
0000            304   _ADC0           DATA 0xbebd
0000            305   _ADC0LT         DATA 0xc6c5
0000            306   _DAC0           DATA 0x8584
0000            307   _DAC1           DATA 0x8a89
0000            308   _DAC2           DATA 0x8c8b
0000            309   _DAC3           DATA 0x8e8d
0000            310   ;--------------------------------------------------------
0000            311   ; special function bits
0000            312   ;--------------------------------------------------------
0000            313   _ACC_0          BIT 0xe0
0000            314   _ACC_1          BIT 0xe1
0000            315   _ACC_2          BIT 0xe2
0000            316   _ACC_3          BIT 0xe3
0000            317   _ACC_4          BIT 0xe4
0000            318   _ACC_5          BIT 0xe5
0000            319   _ACC_6          BIT 0xe6
0000            320   _ACC_7          BIT 0xe7
0000            321   _TEMPE          BIT 0xe8
0000            322   _ADGN0          BIT 0xe9
0000            323   _ADGN1          BIT 0xea
0000            324   _ADWINT         BIT 0xeb
0000            325   _ADBUSY         BIT 0xec
0000            326   _ADINT          BIT 0xed
0000            327   _IPOEN          BIT 0xee
0000            328   _ADEN           BIT 0xef
0000            329   _B_0            BIT 0xf0
0000            330   _B_1            BIT 0xf1
0000            331   _B_2            BIT 0xf2
0000            332   _B_3            BIT 0xf3
0000            333   _B_4            BIT 0xf4
0000            334   _B_5            BIT 0xf5
0000            335   _B_6            BIT 0xf6
0000            336   _B_7            BIT 0xf7
0000            337   _C0FIF          BIT 0xe8
0000            338   _C0RIF          BIT 0xe9
0000            339   _C1FIF          BIT 0xea
0000            340   _C1RIF          BIT 0xeb
0000            341   _C2FIF          BIT 0xec
0000            342   _C2RIF          BIT 0xed
0000            343   _C3FIF          BIT 0xee
0000            344   _C3RIF          BIT 0xef
0000            345   _D1SRC0         BIT 0x88
0000            346   _D1SRC1         BIT 0x89
0000            347   _D1AMEN         BIT 0x8a
0000            348   _D01REFSL       BIT 0x8b
0000            349   _D3SRC0         BIT 0x8c
0000            350   _D3SRC1         BIT 0x8d
0000            351   _D3AMEN         BIT 0x8e
0000            352   _D23REFSL       BIT 0x8f
0000            353   _D0UDIS         BIT 0x98
0000            354   _D1UDIS         BIT 0x99
0000            355   _D2UDIS         BIT 0x9a
0000            356   _D3UDIS         BIT 0x9b
0000            357   _EX0            BIT 0xa8
0000            358   _ET0            BIT 0xa9
0000            359   _EX1            BIT 0xaa
0000            360   _ET1            BIT 0xab
0000            361   _ES0            BIT 0xac
0000            362   _ET2            BIT 0xad
0000            363   _ESPI0          BIT 0xae
0000            364   _EA             BIT 0xaf
0000            365   _PX0            BIT 0xb8
0000            366   _PT0            BIT 0xb9
0000            367   _PX1            BIT 0xba
0000            368   _PT1            BIT 0xbb
0000            369   _PS0            BIT 0xbc
0000            370   _PT2            BIT 0xbd
0000            371   _PSPI0          BIT 0xbe
0000            372   _P0_0           BIT 0x80
0000            373   _P0_1           BIT 0x81
0000            374   _P0_2           BIT 0x82
0000            375   _P0_3           BIT 0x83
0000            376   _P0_4           BIT 0x84
0000            377   _P0_5           BIT 0x85
0000            378   _P0_6           BIT 0x86
0000            379   _P0_7           BIT 0x87
0000            380   _P1_0           BIT 0x90
0000            381   _P1_1           BIT 0x91
0000            382   _P1_2           BIT 0x92
0000            383   _P1_3           BIT 0x93
0000            384   _P1_4           BIT 0x94
0000            385   _P1_5           BIT 0x95
0000            386   _P1_6           BIT 0x96
0000            387   _P1_7           BIT 0x97
0000            388   _P2_0           BIT 0xa0
0000            389   _P2_1           BIT 0xa1
0000            390   _P2_2           BIT 0xa2
0000            391   _P2_3           BIT 0xa3
0000            392   _P2_4           BIT 0xa4
0000            393   _P2_5           BIT 0xa5
0000            394   _P2_6           BIT 0xa6
0000            395   _P3_0           BIT 0xb0
0000            396   _P3_1           BIT 0xb1
0000            397   _P3_2           BIT 0xb2
0000            398   _P3_3           BIT 0xb3
0000            399   _P3_4           BIT 0xb4
0000            400   _P3_7           BIT 0xb7
0000            401   _CCF0           BIT 0xd8
0000            402   _CCF1           BIT 0xd9
0000            403   _CCF2           BIT 0xda
0000            404   _CCF3           BIT 0xdb
0000            405   _CCF4           BIT 0xdc
0000            406   _CCF5           BIT 0xdd
0000            407   _CR             BIT 0xde
0000            408   _CF             BIT 0xdf
0000            409   _PARITY         BIT 0xd0
0000            410   _F1             BIT 0xd1
0000            411   _OV             BIT 0xd2
0000            412   _RS0            BIT 0xd3
0000            413   _RS1            BIT 0xd4
0000            414   _F0             BIT 0xd5
0000            415   _AC             BIT 0xd6
0000            416   _CY             BIT 0xd7
0000            417   _RI             BIT 0x98
0000            418   _TI             BIT 0x99
0000            419   _RB8            BIT 0x9a
0000            420   _TB8            BIT 0x9b
0000            421   _REN            BIT 0x9c
0000            422   _CE             BIT 0x9d
0000            423   _SMODE          BIT 0x9e
0000            424   _RI1            BIT 0xc8
0000            425   _TI1            BIT 0xc9
0000            426   _RBX1           BIT 0xca
0000            427   _TBX1           BIT 0xcb
0000            428   _REN1           BIT 0xcc
0000            429   _PERR1          BIT 0xcd
0000            430   _OVR1           BIT 0xce
0000            431   _SI             BIT 0xc0
0000            432   _ACK            BIT 0xc1
0000            433   _ARBLOST        BIT 0xc2
0000            434   _ACKRQ          BIT 0xc3
0000            435   _STO            BIT 0xc4
0000            436   _STA            BIT 0xc5
0000            437   _TXMODE         BIT 0xc6
0000            438   _MASTER         BIT 0xc7
0000            439   _SPIEN          BIT 0xf8
0000            440   _TXNF           BIT 0xf9
0000            441   _NSSMD0         BIT 0xfa
0000            442   _NSSMD1         BIT 0xfb
0000            443   _RXOVRN         BIT 0xfc
0000            444   _MODF           BIT 0xfd
0000            445   _WCOL           BIT 0xfe
0000            446   _SPIF           BIT 0xff
0000            447   _IT0            BIT 0x88
0000            448   _IE0            BIT 0x89
0000            449   _IT1            BIT 0x8a
0000            450   _IE1            BIT 0x8b
0000            451   _TR0            BIT 0x8c
0000            452   _TF0            BIT 0x8d
0000            453   _TR1            BIT 0x8e
0000            454   _TF1            BIT 0x8f
0000            455   _T2XCLK0        BIT 0xc8
0000            456   _T2XCLK1        BIT 0xc9
0000            457   _TR2            BIT 0xca
0000            458   _T2SPLIT        BIT 0xcb
0000            459   _TF2CEN         BIT 0xcc
0000            460   _TF2LEN         BIT 0xcd
0000            461   _TF2L           BIT 0xce
0000            462   _TF2H           BIT 0xcf
0000            463   _T4XCLK0        BIT 0x98
0000            464   _T4XCLK1        BIT 0x99
0000            465   _TR4            BIT 0x9a
0000            466   _T4SPLIT        BIT 0x9b
0000            467   _TF4CEN         BIT 0x9c
0000            468   _TF4LEN         BIT 0x9d
0000            469   _TF4L           BIT 0x9e
0000            470   _TF4H           BIT 0x9f
0000            471   _T5XCLK0        BIT 0xc0
0000            472   _T5XCLK1        BIT 0xc1
0000            473   _TR5            BIT 0xc2
0000            474   _T5SPLIT        BIT 0xc3
0000            475   _TF5CEN         BIT 0xc4
0000            476   _TF5LEN         BIT 0xc5
0000            477   _TF5L           BIT 0xc6
0000            478   _TF5H           BIT 0xc7
0000            479   _RIE            BIT 0xd8
0000            480   _RXTO0          BIT 0xd9
0000            481   _RXTO1          BIT 0xda
0000            482   _RFRQ           BIT 0xdb
0000            483   _TIE            BIT 0xdc
0000            484   _TXHOLD         BIT 0xdd
0000            485   _TXNF1          BIT 0xde
0000            486   _TFRQ           BIT 0xdf
0000            487   ;--------------------------------------------------------
0000            488   ; overlayable register banks
0000            489   ;--------------------------------------------------------
0000            490            rbank0 segment data overlay
0000            491   ;--------------------------------------------------------
0000            492   ; internal ram data
0000            493   ;--------------------------------------------------------
0000            494            rseg R_DSEG
0000            495   _overflow_count:
0000            496            ds 1
0001            497   _LCDprint_PARM_2:
0001            498            ds 1
0002            499   _main_v_1_75:
0002            500            ds 16
0012            501   _main_buffer_1_75:
0012            502            ds 20
0026            503   ;--------------------------------------------------------
0026            504   ; overlayable items in internal ram 
0026            505   ;--------------------------------------------------------
0000            506            rseg    R_OSEG
0000            507            rseg    R_OSEG
0000            508   _InitPinADC_PARM_2:
0000            509            ds 1
0001            510            rseg    R_OSEG
0001            511   ;--------------------------------------------------------
0001            512   ; indirectly addressable internal ram data
0001            513   ;--------------------------------------------------------
0000            514            rseg R_ISEG
0000            515   ;--------------------------------------------------------
0000            516   ; absolute internal ram data
0000            517   ;--------------------------------------------------------
0000            518            DSEG
0000            519   ;--------------------------------------------------------
0000            520   ; bit data
0000            521   ;--------------------------------------------------------
0000            522            rseg R_BSEG
0000            523   _LCDprint_PARM_3:
0000            524            DBIT    1
0001            525   ;--------------------------------------------------------
0001            526   ; paged external ram data
0001            527   ;--------------------------------------------------------
0000            528            rseg R_PSEG
0000            529   ;--------------------------------------------------------
0000            530   ; external ram data
0000            531   ;--------------------------------------------------------
0000            532            rseg R_XSEG
0000            533   ;--------------------------------------------------------
0000            534   ; absolute external ram data
0000            535   ;--------------------------------------------------------
0000            536            XSEG
0000            537   ;--------------------------------------------------------
0000            538   ; external initialized ram data
0000            539   ;--------------------------------------------------------
0000            540            rseg R_IXSEG
0000            541            rseg R_HOME
0000            542            rseg R_GSINIT
0000            543            rseg R_CSEG
0000            544   ;--------------------------------------------------------
0000            545   ; Reset entry point and interrupt vectors
0000            546   ;--------------------------------------------------------
0000            547            CSEG at 0x0000
0000 020000     548            ljmp    _crt0
0003            549   ;--------------------------------------------------------
0003            550   ; global & static initialisations
0003            551   ;--------------------------------------------------------
0000            552            rseg R_HOME
0000            553            rseg R_GSINIT
0000            554            rseg R_GSINIT
0000            555   ;--------------------------------------------------------
0000            556   ; data variables initialization
0000            557   ;--------------------------------------------------------
0000            558            rseg R_DINIT
0000            559            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            560   ;--------------------------------------------------------
0000            561   ; code
0000            562   ;--------------------------------------------------------
0000            563            rseg R_CSEG
0000            564   ;------------------------------------------------------------
0000            565   ;Allocation info for local variables in function '_c51_external_startup'
0000            566   ;------------------------------------------------------------
0000            567   ;------------------------------------------------------------
0000            568   ;        C:\ELEC291\Lab5\EFM8_ADC.c:29: char _c51_external_startup (void)
0000            569   ;        -----------------------------------------
0000            570   ;         function _c51_external_startup
0000            571   ;        -----------------------------------------
0000            572   __c51_external_startup:
0000            573            using   0
0000            574   ;        C:\ELEC291\Lab5\EFM8_ADC.c:32: SFRPAGE = 0x00;
0000 75A700     575            mov     _SFRPAGE,#0x00
0003            576   ;        C:\ELEC291\Lab5\EFM8_ADC.c:33: WDTCN = 0xDE; //First key
0003 7597DE     577            mov     _WDTCN,#0xDE
0006            578   ;        C:\ELEC291\Lab5\EFM8_ADC.c:34: WDTCN = 0xAD; //Second key
0006 7597AD     579            mov     _WDTCN,#0xAD
0009            580   ;        C:\ELEC291\Lab5\EFM8_ADC.c:36: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     581            mov     _VDM0CN,#0x80
000C            582   ;        C:\ELEC291\Lab5\EFM8_ADC.c:37: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     583            mov     _RSTSRC,#0x06
000F            584   ;        C:\ELEC291\Lab5\EFM8_ADC.c:44: SFRPAGE = 0x10;
000F 75A710     585            mov     _SFRPAGE,#0x10
0012            586   ;        C:\ELEC291\Lab5\EFM8_ADC.c:45: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     587            mov     _PFE0CN,#0x20
0015            588   ;        C:\ELEC291\Lab5\EFM8_ADC.c:46: SFRPAGE = 0x00;
0015 75A700     589            mov     _SFRPAGE,#0x00
0018            590   ;        C:\ELEC291\Lab5\EFM8_ADC.c:67: CLKSEL = 0x00;
0018 75A900     591            mov     _CLKSEL,#0x00
001B            592   ;        C:\ELEC291\Lab5\EFM8_ADC.c:68: CLKSEL = 0x00;
001B 75A900     593            mov     _CLKSEL,#0x00
001E            594   ;        C:\ELEC291\Lab5\EFM8_ADC.c:69: while ((CLKSEL & 0x80) == 0);
001E            595   L002001?:
001E E5A9       596            mov     a,_CLKSEL
0020 30E790     597            jnb     acc.7,L002001?
0023            598   ;        C:\ELEC291\Lab5\EFM8_ADC.c:70: CLKSEL = 0x03;
0023 75A903     599            mov     _CLKSEL,#0x03
0026            600   ;        C:\ELEC291\Lab5\EFM8_ADC.c:71: CLKSEL = 0x03;
0026 75A903     601            mov     _CLKSEL,#0x03
0029            602   ;        C:\ELEC291\Lab5\EFM8_ADC.c:72: while ((CLKSEL & 0x80) == 0);
0029            603   L002004?:
0029 E5A9       604            mov     a,_CLKSEL
002B 30E710     605            jnb     acc.7,L002004?
002E            606   ;        C:\ELEC291\Lab5\EFM8_ADC.c:77: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     607            orl     _P0MDOUT,#0x10
0031            608   ;        C:\ELEC291\Lab5\EFM8_ADC.c:78: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     609            mov     _XBR0,#0x01
0034            610   ;        C:\ELEC291\Lab5\EFM8_ADC.c:79: XBR1     = 0X00;
0034 75E200     611            mov     _XBR1,#0x00
0037            612   ;        C:\ELEC291\Lab5\EFM8_ADC.c:80: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     613            mov     _XBR2,#0x40
003A            614   ;        C:\ELEC291\Lab5\EFM8_ADC.c:86: SCON0 = 0x10;
003A 759810     615            mov     _SCON0,#0x10
003D            616   ;        C:\ELEC291\Lab5\EFM8_ADC.c:87: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*PRESCALAR));
003D 758DE6     617            mov     _TH1,#0xE6
0040            618   ;        C:\ELEC291\Lab5\EFM8_ADC.c:88: TL1 = TH1;      // Init Timer1
0040 858D8B     619            mov     _TL1,_TH1
0043            620   ;        C:\ELEC291\Lab5\EFM8_ADC.c:89: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     621            anl     _TMOD,#0x0F
0046            622   ;        C:\ELEC291\Lab5\EFM8_ADC.c:90: TMOD |=  0x20;                       
0046 438920     623            orl     _TMOD,#0x20
0049            624   ;        C:\ELEC291\Lab5\EFM8_ADC.c:91: TR1 = 1; // START Timer1
0049 D28E       625            setb    _TR1
004B            626   ;        C:\ELEC291\Lab5\EFM8_ADC.c:92: TI = 1;  // Indicate TX0 ready
004B D299       627            setb    _TI
004D            628   ;        C:\ELEC291\Lab5\EFM8_ADC.c:94: return 0;
004D 758200     629            mov     dpl,#0x00
0050 22         630            ret
0051            631   ;------------------------------------------------------------
0051            632   ;Allocation info for local variables in function 'InitADC'
0051            633   ;------------------------------------------------------------
0051            634   ;------------------------------------------------------------
0051            635   ;        C:\ELEC291\Lab5\EFM8_ADC.c:98: void InitADC (void)
0051            636   ;        -----------------------------------------
0051            637   ;         function InitADC
0051            638   ;        -----------------------------------------
0051            639   _InitADC:
0051            640   ;        C:\ELEC291\Lab5\EFM8_ADC.c:100: SFRPAGE = 0x00;
0051 75A700     641            mov     _SFRPAGE,#0x00
0054            642   ;        C:\ELEC291\Lab5\EFM8_ADC.c:101: ADEN=0; // Disable ADC
0054 C2EF       643            clr     _ADEN
0056            644   ;        C:\ELEC291\Lab5\EFM8_ADC.c:106: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     645            mov     _ADC0CN1,#0x80
0059            646   ;        C:\ELEC291\Lab5\EFM8_ADC.c:110: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     647            mov     _ADC0CF0,#0x20
005C            648   ;        C:\ELEC291\Lab5\EFM8_ADC.c:114: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     649            mov     _ADC0CF1,#0x1E
005F            650   ;        C:\ELEC291\Lab5\EFM8_ADC.c:123: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     651            mov     _ADC0CN0,#0x00
0062            652   ;        C:\ELEC291\Lab5\EFM8_ADC.c:128: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     653            mov     _ADC0CF2,#0x3F
0065            654   ;        C:\ELEC291\Lab5\EFM8_ADC.c:132: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     655            mov     _ADC0CN2,#0x00
0068            656   ;        C:\ELEC291\Lab5\EFM8_ADC.c:134: ADEN=1; // Enable ADC
0068 D2EF       657            setb    _ADEN
006A 22         658            ret
006B            659   ;------------------------------------------------------------
006B            660   ;Allocation info for local variables in function 'Timer3us'
006B            661   ;------------------------------------------------------------
006B            662   ;us                        Allocated to registers r2 
006B            663   ;i                         Allocated to registers r3 
006B            664   ;------------------------------------------------------------
006B            665   ;        C:\ELEC291\Lab5\EFM8_ADC.c:141: void Timer3us(unsigned char us)
006B            666   ;        -----------------------------------------
006B            667   ;         function Timer3us
006B            668   ;        -----------------------------------------
006B            669   _Timer3us:
006B AA82       670            mov     r2,dpl
006D            671   ;        C:\ELEC291\Lab5\EFM8_ADC.c:146: CKCON0|=0b_0100_0000;
006D 438E40     672            orl     _CKCON0,#0x40
0070            673   ;        C:\ELEC291\Lab5\EFM8_ADC.c:149: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     674            mov     _TMR3RL,#0xB8
0073 7593FF     675            mov     (_TMR3RL >> 8),#0xFF
0076            676   ;        C:\ELEC291\Lab5\EFM8_ADC.c:150: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     677            mov     _TMR3,_TMR3RL
0079 859395     678            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            679   ;        C:\ELEC291\Lab5\EFM8_ADC.c:152: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     680            mov     _TMR3CN0,#0x04
007F            681   ;        C:\ELEC291\Lab5\EFM8_ADC.c:153: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       682            mov     r3,#0x00
0081            683   L004004?:
0081 C3         684            clr     c
0082 EB         685            mov     a,r3
0083 9A         686            subb    a,r2
0084 5000       687            jnc     L004007?
0086            688   ;        C:\ELEC291\Lab5\EFM8_ADC.c:155: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            689   L004001?:
0086 E591       690            mov     a,_TMR3CN0
0088 30E710     691            jnb     acc.7,L004001?
008B            692   ;        C:\ELEC291\Lab5\EFM8_ADC.c:156: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     693            anl     _TMR3CN0,#0x7F
008E            694   ;        C:\ELEC291\Lab5\EFM8_ADC.c:153: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         695            inc     r3
008F 8000       696            sjmp    L004004?
0091            697   L004007?:
0091            698   ;        C:\ELEC291\Lab5\EFM8_ADC.c:158: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     699            mov     _TMR3CN0,#0x00
0094 22         700            ret
0095            701   ;------------------------------------------------------------
0095            702   ;Allocation info for local variables in function 'waitms'
0095            703   ;------------------------------------------------------------
0095            704   ;ms                        Allocated to registers r2 r3 
0095            705   ;j                         Allocated to registers r4 r5 
0095            706   ;k                         Allocated to registers r6 
0095            707   ;------------------------------------------------------------
0095            708   ;        C:\ELEC291\Lab5\EFM8_ADC.c:161: void waitms (unsigned int ms)
0095            709   ;        -----------------------------------------
0095            710   ;         function waitms
0095            711   ;        -----------------------------------------
0095            712   _waitms:
0095 AA82       713            mov     r2,dpl
0097 AB83       714            mov     r3,dph
0099            715   ;        C:\ELEC291\Lab5\EFM8_ADC.c:165: for(j=0; j<ms; j++)
0099 7C00       716            mov     r4,#0x00
009B 7D00       717            mov     r5,#0x00
009D            718   L005005?:
009D C3         719            clr     c
009E EC         720            mov     a,r4
009F 9A         721            subb    a,r2
00A0 ED         722            mov     a,r5
00A1 9B         723            subb    a,r3
00A2 5000       724            jnc     L005009?
00A4            725   ;        C:\ELEC291\Lab5\EFM8_ADC.c:166: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       726            mov     r6,#0x00
00A6            727   L005001?:
00A6 BE0450     728            cjne    r6,#0x04,L005018?
00A9            729   L005018?:
00A9 5000       730            jnc     L005007?
00AB 7582FA     731            mov     dpl,#0xFA
00AE C002       732            push    ar2
00B0 C003       733            push    ar3
00B2 C004       734            push    ar4
00B4 C005       735            push    ar5
00B6 C006       736            push    ar6
00B8 120000     737            lcall   _Timer3us
00BB D006       738            pop     ar6
00BD D005       739            pop     ar5
00BF D004       740            pop     ar4
00C1 D003       741            pop     ar3
00C3 D002       742            pop     ar2
00C5 0E         743            inc     r6
00C6 8000       744            sjmp    L005001?
00C8            745   L005007?:
00C8            746   ;        C:\ELEC291\Lab5\EFM8_ADC.c:165: for(j=0; j<ms; j++)
00C8 0C         747            inc     r4
00C9 BC0090     748            cjne    r4,#0x00,L005005?
00CC 0D         749            inc     r5
00CD 8000       750            sjmp    L005005?
00CF            751   L005009?:
00CF 22         752            ret
00D0            753   ;------------------------------------------------------------
00D0            754   ;Allocation info for local variables in function 'TIMER0_Init'
00D0            755   ;------------------------------------------------------------
00D0            756   ;------------------------------------------------------------
00D0            757   ;        C:\ELEC291\Lab5\EFM8_ADC.c:169: void TIMER0_Init(void)
00D0            758   ;        -----------------------------------------
00D0            759   ;         function TIMER0_Init
00D0            760   ;        -----------------------------------------
00D0            761   _TIMER0_Init:
00D0            762   ;        C:\ELEC291\Lab5\EFM8_ADC.c:171: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
00D0 5389F0     763            anl     _TMOD,#0xF0
00D3            764   ;        C:\ELEC291\Lab5\EFM8_ADC.c:172: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit counter
00D3 438901     765            orl     _TMOD,#0x01
00D6            766   ;        C:\ELEC291\Lab5\EFM8_ADC.c:173: TR0=0; // Stop Timer/Counter 0
00D6 C28C       767            clr     _TR0
00D8 22         768            ret
00D9            769   ;------------------------------------------------------------
00D9            770   ;Allocation info for local variables in function 'InitPinADC'
00D9            771   ;------------------------------------------------------------
00D9            772   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D9            773   ;portno                    Allocated to registers r2 
00D9            774   ;mask                      Allocated to registers r3 
00D9            775   ;------------------------------------------------------------
00D9            776   ;        C:\ELEC291\Lab5\EFM8_ADC.c:178: void InitPinADC (unsigned char portno, unsigned char pinno)
00D9            777   ;        -----------------------------------------
00D9            778   ;         function InitPinADC
00D9            779   ;        -----------------------------------------
00D9            780   _InitPinADC:
00D9 AA82       781            mov     r2,dpl
00DB            782   ;        C:\ELEC291\Lab5\EFM8_ADC.c:182: mask=1<<pinno;
00DB 85C8F0     783            mov     b,_InitPinADC_PARM_2
00DE 05F0       784            inc     b
00E0 7401       785            mov     a,#0x01
00E2 8000       786            sjmp    L007013?
00E4            787   L007011?:
00E4 25E0       788            add     a,acc
00E6            789   L007013?:
00E6 D5F050     790            djnz    b,L007011?
00E9 FB         791            mov     r3,a
00EA            792   ;        C:\ELEC291\Lab5\EFM8_ADC.c:184: SFRPAGE = 0x20;
00EA 75A720     793            mov     _SFRPAGE,#0x20
00ED            794   ;        C:\ELEC291\Lab5\EFM8_ADC.c:185: switch (portno)
00ED BA0090     795            cjne    r2,#0x00,L007014?
00F0 8000       796            sjmp    L007001?
00F2            797   L007014?:
00F2 BA0110     798            cjne    r2,#0x01,L007015?
00F5 8000       799            sjmp    L007002?
00F7            800   L007015?:
00F7            801   ;        C:\ELEC291\Lab5\EFM8_ADC.c:187: case 0:
00F7 BA0290     802            cjne    r2,#0x02,L007005?
00FA 8000       803            sjmp    L007003?
00FC            804   L007001?:
00FC            805   ;        C:\ELEC291\Lab5\EFM8_ADC.c:188: P0MDIN &= (~mask); // Set pin as analog input
00FC EB         806            mov     a,r3
00FD F4         807            cpl     a
00FE FA         808            mov     r2,a
00FF 52F1       809            anl     _P0MDIN,a
0101            810   ;        C:\ELEC291\Lab5\EFM8_ADC.c:189: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0101 EB         811            mov     a,r3
0102 42D4       812            orl     _P0SKIP,a
0104            813   ;        C:\ELEC291\Lab5\EFM8_ADC.c:190: break;
0104            814   ;        C:\ELEC291\Lab5\EFM8_ADC.c:191: case 1:
0104 8000       815            sjmp    L007005?
0106            816   L007002?:
0106            817   ;        C:\ELEC291\Lab5\EFM8_ADC.c:192: P1MDIN &= (~mask); // Set pin as analog input
0106 EB         818            mov     a,r3
0107 F4         819            cpl     a
0108 FA         820            mov     r2,a
0109 52F2       821            anl     _P1MDIN,a
010B            822   ;        C:\ELEC291\Lab5\EFM8_ADC.c:193: P1SKIP |= mask; // Skip Crossbar decoding for this pin
010B EB         823            mov     a,r3
010C 42D5       824            orl     _P1SKIP,a
010E            825   ;        C:\ELEC291\Lab5\EFM8_ADC.c:194: break;
010E            826   ;        C:\ELEC291\Lab5\EFM8_ADC.c:195: case 2:
010E 8000       827            sjmp    L007005?
0110            828   L007003?:
0110            829   ;        C:\ELEC291\Lab5\EFM8_ADC.c:196: P2MDIN &= (~mask); // Set pin as analog input
0110 EB         830            mov     a,r3
0111 F4         831            cpl     a
0112 FA         832            mov     r2,a
0113 52F3       833            anl     _P2MDIN,a
0115            834   ;        C:\ELEC291\Lab5\EFM8_ADC.c:197: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0115 EB         835            mov     a,r3
0116 42CC       836            orl     _P2SKIP,a
0118            837   ;        C:\ELEC291\Lab5\EFM8_ADC.c:201: }
0118            838   L007005?:
0118            839   ;        C:\ELEC291\Lab5\EFM8_ADC.c:202: SFRPAGE = 0x00;
0118 75A700     840            mov     _SFRPAGE,#0x00
011B 22         841            ret
011C            842   ;------------------------------------------------------------
011C            843   ;Allocation info for local variables in function 'ADC_at_Pin'
011C            844   ;------------------------------------------------------------
011C            845   ;pin                       Allocated to registers 
011C            846   ;------------------------------------------------------------
011C            847   ;        C:\ELEC291\Lab5\EFM8_ADC.c:206: unsigned int ADC_at_Pin(unsigned char pin)
011C            848   ;        -----------------------------------------
011C            849   ;         function ADC_at_Pin
011C            850   ;        -----------------------------------------
011C            851   _ADC_at_Pin:
011C 8582BB     852            mov     _ADC0MX,dpl
011F            853   ;        C:\ELEC291\Lab5\EFM8_ADC.c:209: ADINT = 0;
011F C2ED       854            clr     _ADINT
0121            855   ;        C:\ELEC291\Lab5\EFM8_ADC.c:210: ADBUSY = 1;     // Convert voltage at the pin
0121 D2EC       856            setb    _ADBUSY
0123            857   ;        C:\ELEC291\Lab5\EFM8_ADC.c:211: while (!ADINT); // Wait for conversion to complete
0123            858   L008001?:
0123 30ED10     859            jnb     _ADINT,L008001?
0126            860   ;        C:\ELEC291\Lab5\EFM8_ADC.c:212: return (ADC0);
0126 85BD82     861            mov     dpl,_ADC0
0129 85BE83     862            mov     dph,(_ADC0 >> 8)
012C 22         863            ret
012D            864   ;------------------------------------------------------------
012D            865   ;Allocation info for local variables in function 'Volts_at_Pin'
012D            866   ;------------------------------------------------------------
012D            867   ;pin                       Allocated to registers r2 
012D            868   ;------------------------------------------------------------
012D            869   ;        C:\ELEC291\Lab5\EFM8_ADC.c:215: float Volts_at_Pin(unsigned char pin)
012D            870   ;        -----------------------------------------
012D            871   ;         function Volts_at_Pin
012D            872   ;        -----------------------------------------
012D            873   _Volts_at_Pin:
012D            874   ;        C:\ELEC291\Lab5\EFM8_ADC.c:217: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111); //b/c 14 bit adc
012D 120000     875            lcall   _ADC_at_Pin
0130 120000     876            lcall   ___uint2fs
0133 AA82       877            mov     r2,dpl
0135 AB83       878            mov     r3,dph
0137 ACF0       879            mov     r4,b
0139 FD         880            mov     r5,a
013A C002       881            push    ar2
013C C003       882            push    ar3
013E C004       883            push    ar4
0140 C005       884            push    ar5
0142 906C8B     885            mov     dptr,#0x6C8B
0145 75F053     886            mov     b,#0x53
0148 7440       887            mov     a,#0x40
014A 120000     888            lcall   ___fsmul
014D AA82       889            mov     r2,dpl
014F AB83       890            mov     r3,dph
0151 ACF0       891            mov     r4,b
0153 FD         892            mov     r5,a
0154 E581       893            mov     a,sp
0156 24FC       894            add     a,#0xfc
0158 F581       895            mov     sp,a
015A E4         896            clr     a
015B C0E0       897            push    acc
015D 74FC       898            mov     a,#0xFC
015F C0E0       899            push    acc
0161 747F       900            mov     a,#0x7F
0163 C0E0       901            push    acc
0165 7446       902            mov     a,#0x46
0167 C0E0       903            push    acc
0169 8A82       904            mov     dpl,r2
016B 8B83       905            mov     dph,r3
016D 8CF0       906            mov     b,r4
016F ED         907            mov     a,r5
0170 120000     908            lcall   ___fsdiv
0173 AA82       909            mov     r2,dpl
0175 AB83       910            mov     r3,dph
0177 ACF0       911            mov     r4,b
0179 FD         912            mov     r5,a
017A E581       913            mov     a,sp
017C 24FC       914            add     a,#0xfc
017E F581       915            mov     sp,a
0180 8A82       916            mov     dpl,r2
0182 8B83       917            mov     dph,r3
0184 8CF0       918            mov     b,r4
0186 ED         919            mov     a,r5
0187 22         920            ret
0188            921   ;------------------------------------------------------------
0188            922   ;Allocation info for local variables in function 'LCD_pulse'
0188            923   ;------------------------------------------------------------
0188            924   ;------------------------------------------------------------
0188            925   ;        C:\ELEC291\Lab5\EFM8_ADC.c:221: void LCD_pulse (void)
0188            926   ;        -----------------------------------------
0188            927   ;         function LCD_pulse
0188            928   ;        -----------------------------------------
0188            929   _LCD_pulse:
0188            930   ;        C:\ELEC291\Lab5\EFM8_ADC.c:223: LCD_E=1;
0188 D2A0       931            setb    _P2_0
018A            932   ;        C:\ELEC291\Lab5\EFM8_ADC.c:224: Timer3us(40);
018A 758228     933            mov     dpl,#0x28
018D 120000     934            lcall   _Timer3us
0190            935   ;        C:\ELEC291\Lab5\EFM8_ADC.c:225: LCD_E=0;
0190 C2A0       936            clr     _P2_0
0192 22         937            ret
0193            938   ;------------------------------------------------------------
0193            939   ;Allocation info for local variables in function 'LCD_byte'
0193            940   ;------------------------------------------------------------
0193            941   ;x                         Allocated to registers r2 
0193            942   ;------------------------------------------------------------
0193            943   ;        C:\ELEC291\Lab5\EFM8_ADC.c:227: void LCD_byte (unsigned char x)
0193            944   ;        -----------------------------------------
0193            945   ;         function LCD_byte
0193            946   ;        -----------------------------------------
0193            947   _LCD_byte:
0193 AA82       948            mov     r2,dpl
0195            949   ;        C:\ELEC291\Lab5\EFM8_ADC.c:230: ACC=x; //Send high nible
0195 8AE0       950            mov     _ACC,r2
0197            951   ;        C:\ELEC291\Lab5\EFM8_ADC.c:231: LCD_D7=ACC_7;
0197 A2E7       952            mov     c,_ACC_7
0199 9290       953            mov     _P1_0,c
019B            954   ;        C:\ELEC291\Lab5\EFM8_ADC.c:232: LCD_D6=ACC_6;
019B A2E6       955            mov     c,_ACC_6
019D 9291       956            mov     _P1_1,c
019F            957   ;        C:\ELEC291\Lab5\EFM8_ADC.c:233: LCD_D5=ACC_5;
019F A2E5       958            mov     c,_ACC_5
01A1 9292       959            mov     _P1_2,c
01A3            960   ;        C:\ELEC291\Lab5\EFM8_ADC.c:234: LCD_D4=ACC_4;
01A3 A2E4       961            mov     c,_ACC_4
01A5 9293       962            mov     _P1_3,c
01A7            963   ;        C:\ELEC291\Lab5\EFM8_ADC.c:235: LCD_pulse();
01A7 C002       964            push    ar2
01A9 120000     965            lcall   _LCD_pulse
01AC            966   ;        C:\ELEC291\Lab5\EFM8_ADC.c:236: Timer3us(40);
01AC 758228     967            mov     dpl,#0x28
01AF 120000     968            lcall   _Timer3us
01B2 D002       969            pop     ar2
01B4            970   ;        C:\ELEC291\Lab5\EFM8_ADC.c:237: ACC=x; //Send low nible
01B4 8AE0       971            mov     _ACC,r2
01B6            972   ;        C:\ELEC291\Lab5\EFM8_ADC.c:238: LCD_D7=ACC_3;
01B6 A2E3       973            mov     c,_ACC_3
01B8 9290       974            mov     _P1_0,c
01BA            975   ;        C:\ELEC291\Lab5\EFM8_ADC.c:239: LCD_D6=ACC_2;
01BA A2E2       976            mov     c,_ACC_2
01BC 9291       977            mov     _P1_1,c
01BE            978   ;        C:\ELEC291\Lab5\EFM8_ADC.c:240: LCD_D5=ACC_1;
01BE A2E1       979            mov     c,_ACC_1
01C0 9292       980            mov     _P1_2,c
01C2            981   ;        C:\ELEC291\Lab5\EFM8_ADC.c:241: LCD_D4=ACC_0;
01C2 A2E0       982            mov     c,_ACC_0
01C4 9293       983            mov     _P1_3,c
01C6            984   ;        C:\ELEC291\Lab5\EFM8_ADC.c:242: LCD_pulse();
01C6 020000     985            ljmp    _LCD_pulse
01C9            986   ;------------------------------------------------------------
01C9            987   ;Allocation info for local variables in function 'WriteData'
01C9            988   ;------------------------------------------------------------
01C9            989   ;x                         Allocated to registers r2 
01C9            990   ;------------------------------------------------------------
01C9            991   ;        C:\ELEC291\Lab5\EFM8_ADC.c:245: void WriteData (unsigned char x)
01C9            992   ;        -----------------------------------------
01C9            993   ;         function WriteData
01C9            994   ;        -----------------------------------------
01C9            995   _WriteData:
01C9 AA82       996            mov     r2,dpl
01CB            997   ;        C:\ELEC291\Lab5\EFM8_ADC.c:247: LCD_RS=1;
01CB D297       998            setb    _P1_7
01CD            999   ;        C:\ELEC291\Lab5\EFM8_ADC.c:248: LCD_byte(x);
01CD 8A82      1000            mov     dpl,r2
01CF 120000    1001            lcall   _LCD_byte
01D2           1002   ;        C:\ELEC291\Lab5\EFM8_ADC.c:249: waitms(2);
01D2 900002    1003            mov     dptr,#0x0002
01D5 020000    1004            ljmp    _waitms
01D8           1005   ;------------------------------------------------------------
01D8           1006   ;Allocation info for local variables in function 'WriteCommand'
01D8           1007   ;------------------------------------------------------------
01D8           1008   ;x                         Allocated to registers r2 
01D8           1009   ;------------------------------------------------------------
01D8           1010   ;        C:\ELEC291\Lab5\EFM8_ADC.c:252: void WriteCommand (unsigned char x)
01D8           1011   ;        -----------------------------------------
01D8           1012   ;         function WriteCommand
01D8           1013   ;        -----------------------------------------
01D8           1014   _WriteCommand:
01D8 AA82      1015            mov     r2,dpl
01DA           1016   ;        C:\ELEC291\Lab5\EFM8_ADC.c:254: LCD_RS=0;
01DA C297      1017            clr     _P1_7
01DC           1018   ;        C:\ELEC291\Lab5\EFM8_ADC.c:255: LCD_byte(x);
01DC 8A82      1019            mov     dpl,r2
01DE 120000    1020            lcall   _LCD_byte
01E1           1021   ;        C:\ELEC291\Lab5\EFM8_ADC.c:256: waitms(5);
01E1 900005    1022            mov     dptr,#0x0005
01E4 020000    1023            ljmp    _waitms
01E7           1024   ;------------------------------------------------------------
01E7           1025   ;Allocation info for local variables in function 'LCD_4BIT'
01E7           1026   ;------------------------------------------------------------
01E7           1027   ;------------------------------------------------------------
01E7           1028   ;        C:\ELEC291\Lab5\EFM8_ADC.c:259: void LCD_4BIT (void)
01E7           1029   ;        -----------------------------------------
01E7           1030   ;         function LCD_4BIT
01E7           1031   ;        -----------------------------------------
01E7           1032   _LCD_4BIT:
01E7           1033   ;        C:\ELEC291\Lab5\EFM8_ADC.c:261: LCD_E=0; // Resting state of LCD's enable is zero
01E7 C2A0      1034            clr     _P2_0
01E9           1035   ;        C:\ELEC291\Lab5\EFM8_ADC.c:263: waitms(20);
01E9 900014    1036            mov     dptr,#0x0014
01EC 120000    1037            lcall   _waitms
01EF           1038   ;        C:\ELEC291\Lab5\EFM8_ADC.c:265: WriteCommand(0x33);
01EF 758233    1039            mov     dpl,#0x33
01F2 120000    1040            lcall   _WriteCommand
01F5           1041   ;        C:\ELEC291\Lab5\EFM8_ADC.c:266: WriteCommand(0x33);
01F5 758233    1042            mov     dpl,#0x33
01F8 120000    1043            lcall   _WriteCommand
01FB           1044   ;        C:\ELEC291\Lab5\EFM8_ADC.c:267: WriteCommand(0x32); // Change to 4-bit mode
01FB 758232    1045            mov     dpl,#0x32
01FE 120000    1046            lcall   _WriteCommand
0201           1047   ;        C:\ELEC291\Lab5\EFM8_ADC.c:270: WriteCommand(0x28);
0201 758228    1048            mov     dpl,#0x28
0204 120000    1049            lcall   _WriteCommand
0207           1050   ;        C:\ELEC291\Lab5\EFM8_ADC.c:271: WriteCommand(0x0c);
0207 75820C    1051            mov     dpl,#0x0C
020A 120000    1052            lcall   _WriteCommand
020D           1053   ;        C:\ELEC291\Lab5\EFM8_ADC.c:272: WriteCommand(0x01); // Clear screen command (takes some time)
020D 758201    1054            mov     dpl,#0x01
0210 120000    1055            lcall   _WriteCommand
0213           1056   ;        C:\ELEC291\Lab5\EFM8_ADC.c:273: waitms(20); // Wait for clear screen command to finsih.
0213 900014    1057            mov     dptr,#0x0014
0216 020000    1058            ljmp    _waitms
0219           1059   ;------------------------------------------------------------
0219           1060   ;Allocation info for local variables in function 'LCDprint'
0219           1061   ;------------------------------------------------------------
0219           1062   ;line                      Allocated with name '_LCDprint_PARM_2'
0219           1063   ;string                    Allocated to registers r2 r3 r4 
0219           1064   ;j                         Allocated to registers r5 r6 
0219           1065   ;------------------------------------------------------------
0219           1066   ;        C:\ELEC291\Lab5\EFM8_ADC.c:276: void LCDprint(char * string, unsigned char line, bit clear)
0219           1067   ;        -----------------------------------------
0219           1068   ;         function LCDprint
0219           1069   ;        -----------------------------------------
0219           1070   _LCDprint:
0219 AA82      1071            mov     r2,dpl
021B AB83      1072            mov     r3,dph
021D ACF0      1073            mov     r4,b
021F           1074   ;        C:\ELEC291\Lab5\EFM8_ADC.c:280: WriteCommand(line==2?0xc0:0x80);
021F 7402      1075            mov     a,#0x02
0221 B57850    1076            cjne    a,_LCDprint_PARM_2,L015013?
0224 7DC0      1077            mov     r5,#0xC0
0226 8000      1078            sjmp    L015014?
0228           1079   L015013?:
0228 7D80      1080            mov     r5,#0x80
022A           1081   L015014?:
022A 8D82      1082            mov     dpl,r5
022C C002      1083            push    ar2
022E C003      1084            push    ar3
0230 C004      1085            push    ar4
0232 120000    1086            lcall   _WriteCommand
0235           1087   ;        C:\ELEC291\Lab5\EFM8_ADC.c:281: waitms(5);
0235 900005    1088            mov     dptr,#0x0005
0238 120000    1089            lcall   _waitms
023B D004      1090            pop     ar4
023D D003      1091            pop     ar3
023F D002      1092            pop     ar2
0241           1093   ;        C:\ELEC291\Lab5\EFM8_ADC.c:282: for(j=0; string[j]!=0; j++)     WriteData(string[j]);// Write the message
0241 7D00      1094            mov     r5,#0x00
0243 7E00      1095            mov     r6,#0x00
0245           1096   L015003?:
0245 ED        1097            mov     a,r5
0246 2A        1098            add     a,r2
0247 FF        1099            mov     r7,a
0248 EE        1100            mov     a,r6
0249 3B        1101            addc    a,r3
024A F8        1102            mov     r0,a
024B 8C01      1103            mov     ar1,r4
024D 8F82      1104            mov     dpl,r7
024F 8883      1105            mov     dph,r0
0251 89F0      1106            mov     b,r1
0253 120000    1107            lcall   __gptrget
0256 FF        1108            mov     r7,a
0257 6000      1109            jz      L015006?
0259 8F82      1110            mov     dpl,r7
025B C002      1111            push    ar2
025D C003      1112            push    ar3
025F C004      1113            push    ar4
0261 C005      1114            push    ar5
0263 C006      1115            push    ar6
0265 120000    1116            lcall   _WriteData
0268 D006      1117            pop     ar6
026A D005      1118            pop     ar5
026C D004      1119            pop     ar4
026E D003      1120            pop     ar3
0270 D002      1121            pop     ar2
0272 0D        1122            inc     r5
0273 BD00D0    1123            cjne    r5,#0x00,L015003?
0276 0E        1124            inc     r6
0277 8000      1125            sjmp    L015003?
0279           1126   L015006?:
0279           1127   ;        C:\ELEC291\Lab5\EFM8_ADC.c:283: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0279 302890    1128            jnb     _LCDprint_PARM_3,L015011?
027C 8D02      1129            mov     ar2,r5
027E 8E03      1130            mov     ar3,r6
0280           1131   L015007?:
0280 C3        1132            clr     c
0281 EA        1133            mov     a,r2
0282 9410      1134            subb    a,#0x10
0284 EB        1135            mov     a,r3
0285 6480      1136            xrl     a,#0x80
0287 9480      1137            subb    a,#0x80
0289 5000      1138            jnc     L015011?
028B 758220    1139            mov     dpl,#0x20
028E C002      1140            push    ar2
0290 C003      1141            push    ar3
0292 120000    1142            lcall   _WriteData
0295 D003      1143            pop     ar3
0297 D002      1144            pop     ar2
0299 0A        1145            inc     r2
029A BA00D0    1146            cjne    r2,#0x00,L015007?
029D 0B        1147            inc     r3
029E 8000      1148            sjmp    L015007?
02A0           1149   L015011?:
02A0 22        1150            ret
02A1           1151   ;------------------------------------------------------------
02A1           1152   ;Allocation info for local variables in function 'Get_ADC'
02A1           1153   ;------------------------------------------------------------
02A1           1154   ;------------------------------------------------------------
02A1           1155   ;        C:\ELEC291\Lab5\EFM8_ADC.c:286: unsigned int Get_ADC(void)
02A1           1156   ;        -----------------------------------------
02A1           1157   ;         function Get_ADC
02A1           1158   ;        -----------------------------------------
02A1           1159   _Get_ADC:
02A1           1160   ;        C:\ELEC291\Lab5\EFM8_ADC.c:288: ADINT = 0;
02A1 C2ED      1161            clr     _ADINT
02A3           1162   ;        C:\ELEC291\Lab5\EFM8_ADC.c:289: ADBUSY = 1;
02A3 D2EC      1163            setb    _ADBUSY
02A5           1164   ;        C:\ELEC291\Lab5\EFM8_ADC.c:290: while (!ADINT);
02A5           1165   L016001?:
02A5 30ED10    1166            jnb     _ADINT,L016001?
02A8           1167   ;        C:\ELEC291\Lab5\EFM8_ADC.c:291: return (ADC0);
02A8 85BD82    1168            mov     dpl,_ADC0
02AB 85BE83    1169            mov     dph,(_ADC0 >> 8)
02AE 22        1170            ret
02AF           1171   ;------------------------------------------------------------
02AF           1172   ;Allocation info for local variables in function 'main'
02AF           1173   ;------------------------------------------------------------
02AF           1174   ;v                         Allocated with name '_main_v_1_75'
02AF           1175   ;buffer                    Allocated with name '_main_buffer_1_75'
02AF           1176   ;overflow                  Allocated with name '_main_overflow_1_75'
02AF           1177   ;halfPeriod_ref            Allocated to registers r2 r3 r4 r5 
02AF           1178   ;period_ref                Allocated to registers r2 r3 r4 r5 
02AF           1179   ;freq_ref                  Allocated to registers r6 r7 r0 r1 
02AF           1180   ;quarterPeriod1_ref        Allocated with name '_main_quarterPeriod1_ref_1_75'
02AF           1181   ;halfPeriod_in             Allocated with name '_main_halfPeriod_in_1_75'
02AF           1182   ;period_in                 Allocated with name '_main_period_in_1_75'
02AF           1183   ;freq_in                   Allocated with name '_main_freq_in_1_75'
02AF           1184   ;quarterPeriod1_in         Allocated with name '_main_quarterPeriod1_in_1_75'
02AF           1185   ;------------------------------------------------------------
02AF           1186   ;        C:\ELEC291\Lab5\EFM8_ADC.c:295: void main (void)
02AF           1187   ;        -----------------------------------------
02AF           1188   ;         function main
02AF           1189   ;        -----------------------------------------
02AF           1190   _main:
02AF           1191   ;        C:\ELEC291\Lab5\EFM8_ADC.c:311: LCD_4BIT();
02AF 120000    1192            lcall   _LCD_4BIT
02B2           1193   ;        C:\ELEC291\Lab5\EFM8_ADC.c:312: TIMER0_Init();
02B2 120000    1194            lcall   _TIMER0_Init
02B5           1195   ;        C:\ELEC291\Lab5\EFM8_ADC.c:314: waitms(500); // Give PuTTy a chance to start before sending
02B5 9001F4    1196            mov     dptr,#0x01F4
02B8 120000    1197            lcall   _waitms
02BB           1198   ;        C:\ELEC291\Lab5\EFM8_ADC.c:315: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
02BB 7450      1199            mov     a,#__str_0
02BD C0E0      1200            push    acc
02BF 74BD      1201            mov     a,#(__str_0 >> 8)
02C1 C0E0      1202            push    acc
02C3 7480      1203            mov     a,#0x80
02C5 C0E0      1204            push    acc
02C7 120000    1205            lcall   _printf
02CA 1581      1206            dec     sp
02CC 1581      1207            dec     sp
02CE 1581      1208            dec     sp
02D0           1209   ;        C:\ELEC291\Lab5\EFM8_ADC.c:320: __FILE__, __DATE__, __TIME__);
02D0           1210   ;        C:\ELEC291\Lab5\EFM8_ADC.c:319: "Compiled: %s, %s\n\n",
02D0 74D0      1211            mov     a,#__str_4
02D2 C0E0      1212            push    acc
02D4 74BD      1213            mov     a,#(__str_4 >> 8)
02D6 C0E0      1214            push    acc
02D8 7480      1215            mov     a,#0x80
02DA C0E0      1216            push    acc
02DC 7410      1217            mov     a,#__str_3
02DE C0E0      1218            push    acc
02E0 74BE      1219            mov     a,#(__str_3 >> 8)
02E2 C0E0      1220            push    acc
02E4 7480      1221            mov     a,#0x80
02E6 C0E0      1222            push    acc
02E8 7450      1223            mov     a,#__str_2
02EA C0E0      1224            push    acc
02EC 74BE      1225            mov     a,#(__str_2 >> 8)
02EE C0E0      1226            push    acc
02F0 7480      1227            mov     a,#0x80
02F2 C0E0      1228            push    acc
02F4 7490      1229            mov     a,#__str_1
02F6 C0E0      1230            push    acc
02F8 74BE      1231            mov     a,#(__str_1 >> 8)
02FA C0E0      1232            push    acc
02FC 7480      1233            mov     a,#0x80
02FE C0E0      1234            push    acc
0300 120000    1235            lcall   _printf
0303 E581      1236            mov     a,sp
0305 24F4      1237            add     a,#0xf4
0307 F581      1238            mov     sp,a
0309           1239   ;        C:\ELEC291\Lab5\EFM8_ADC.c:322: InitPinADC(2, 2); // Configure P2.2 as analog input
0309 75C802    1240            mov     _InitPinADC_PARM_2,#0x02
030C 758202    1241            mov     dpl,#0x02
030F 120000    1242            lcall   _InitPinADC
0312           1243   ;        C:\ELEC291\Lab5\EFM8_ADC.c:323: InitPinADC(2, 3); // Configure P2.3 as analog input
0312 75C803    1244            mov     _InitPinADC_PARM_2,#0x03
0315 758202    1245            mov     dpl,#0x02
0318 120000    1246            lcall   _InitPinADC
031B           1247   ;        C:\ELEC291\Lab5\EFM8_ADC.c:324: InitPinADC(2, 4); // Configure P2.4 as analog input
031B 75C804    1248            mov     _InitPinADC_PARM_2,#0x04
031E 758202    1249            mov     dpl,#0x02
0321 120000    1250            lcall   _InitPinADC
0324           1251   ;        C:\ELEC291\Lab5\EFM8_ADC.c:325: InitPinADC(2, 5); // Configure P2.5 as analog input
0324 75C805    1252            mov     _InitPinADC_PARM_2,#0x05
0327 758202    1253            mov     dpl,#0x02
032A 120000    1254            lcall   _InitPinADC
032D           1255   ;        C:\ELEC291\Lab5\EFM8_ADC.c:326: InitPinADC(0, 1);
032D 75C801    1256            mov     _InitPinADC_PARM_2,#0x01
0330 758200    1257            mov     dpl,#0x00
0333 120000    1258            lcall   _InitPinADC
0336           1259   ;        C:\ELEC291\Lab5\EFM8_ADC.c:327: InitADC();
0336 120000    1260            lcall   _InitADC
0339           1261   ;        C:\ELEC291\Lab5\EFM8_ADC.c:330: while(1)
0339           1262   L017016?:
0339           1263   ;        C:\ELEC291\Lab5\EFM8_ADC.c:333: ADC0MX=QFP32_MUX_P0_1;
0339 75BB00    1264            mov     _ADC0MX,#0x00
033C           1265   ;        C:\ELEC291\Lab5\EFM8_ADC.c:334: ADINT = 0;
033C C2ED      1266            clr     _ADINT
033E           1267   ;        C:\ELEC291\Lab5\EFM8_ADC.c:335: ADBUSY=1;
033E D2EC      1268            setb    _ADBUSY
0340           1269   ;        C:\ELEC291\Lab5\EFM8_ADC.c:336: while (!ADINT);                 // wait for conversion to complete
0340           1270   L017001?:
0340 30ED10    1271            jnb     _ADINT,L017001?
0343           1272   ;        C:\ELEC291\Lab5\EFM8_ADC.c:337: while (Get_ADC()!=0);   // wait for signal to be 0
0343           1273   L017004?:
0343 120000    1274            lcall   _Get_ADC
0346 E582      1275            mov     a,dpl
0348 8583F0    1276            mov     b,dph
034B 45F0      1277            orl     a,b
034D 7000      1278            jnz     L017004?
034F           1279   ;        C:\ELEC291\Lab5\EFM8_ADC.c:338: while (Get_ADC()==0);   // wait for signal to be pos
034F           1280   L017007?:
034F 120000    1281            lcall   _Get_ADC
0352 E582      1282            mov     a,dpl
0354 8583F0    1283            mov     b,dph
0357 45F0      1284            orl     a,b
0359 6000      1285            jz      L017007?
035B           1286   ;        C:\ELEC291\Lab5\EFM8_ADC.c:339: overflow_count = 0;             // reset timer 
035B 75B800    1287            mov     _overflow_count,#0x00
035E           1288   ;        C:\ELEC291\Lab5\EFM8_ADC.c:340: TL0=0;
035E 758A00    1289            mov     _TL0,#0x00
0361           1290   ;        C:\ELEC291\Lab5\EFM8_ADC.c:341: TH0=0;
0361 758C00    1291            mov     _TH0,#0x00
0364           1292   ;        C:\ELEC291\Lab5\EFM8_ADC.c:342: TR0=1; // start timer 0                 
0364 D28C      1293            setb    _TR0
0366           1294   ;        C:\ELEC291\Lab5\EFM8_ADC.c:343: while (Get_ADC()!=0){
0366           1295   L017012?:
0366 120000    1296            lcall   _Get_ADC
0369 E582      1297            mov     a,dpl
036B 8583F0    1298            mov     b,dph
036E 45F0      1299            orl     a,b
0370 6000      1300            jz      L017014?
0372           1301   ;        C:\ELEC291\Lab5\EFM8_ADC.c:344: if (TF0==1){
0372           1302   ;        C:\ELEC291\Lab5\EFM8_ADC.c:345: TF0=0;
0372 108D50    1303            jbc     _TF0,L017032?
0375 8000      1304            sjmp    L017012?
0377           1305   L017032?:
0377           1306   ;        C:\ELEC291\Lab5\EFM8_ADC.c:346: overflow_count++;
0377 05B8      1307            inc     _overflow_count
0379 8000      1308            sjmp    L017012?
037B           1309   L017014?:
037B           1310   ;        C:\ELEC291\Lab5\EFM8_ADC.c:349: TR0=0; // stop timer 0
037B C28C      1311            clr     _TR0
037D           1312   ;        C:\ELEC291\Lab5\EFM8_ADC.c:350: halfPeriod_ref=(overflow_count*65536.0 + TH0*256.0 + TL0)*(12.0/SYSCLK);        // {TH0,TL0} -> [15:0]
037D 85B882    1313            mov     dpl,_overflow_count
0380 120000    1314            lcall   ___uchar2fs
0383 AA82      1315            mov     r2,dpl
0385 AB83      1316            mov     r3,dph
0387 ACF0      1317            mov     r4,b
0389 FD        1318            mov     r5,a
038A C002      1319            push    ar2
038C C003      1320            push    ar3
038E C004      1321            push    ar4
0390 C005      1322            push    ar5
0392 900000    1323            mov     dptr,#0x0000
0395 75F080    1324            mov     b,#0x80
0398 7447      1325            mov     a,#0x47
039A 120000    1326            lcall   ___fsmul
039D AA82      1327            mov     r2,dpl
039F AB83      1328            mov     r3,dph
03A1 ACF0      1329            mov     r4,b
03A3 FD        1330            mov     r5,a
03A4 E581      1331            mov     a,sp
03A6 24FC      1332            add     a,#0xfc
03A8 F581      1333            mov     sp,a
03AA 858C82    1334            mov     dpl,_TH0
03AD C002      1335            push    ar2
03AF C003      1336            push    ar3
03B1 C004      1337            push    ar4
03B3 C005      1338            push    ar5
03B5 120000    1339            lcall   ___uchar2fs
03B8 AE82      1340            mov     r6,dpl
03BA AF83      1341            mov     r7,dph
03BC A8F0      1342            mov     r0,b
03BE F9        1343            mov     r1,a
03BF C006      1344            push    ar6
03C1 C007      1345            push    ar7
03C3 C000      1346            push    ar0
03C5 C001      1347            push    ar1
03C7 900000    1348            mov     dptr,#0x0000
03CA 75F080    1349            mov     b,#0x80
03CD 7443      1350            mov     a,#0x43
03CF 120000    1351            lcall   ___fsmul
03D2 AE82      1352            mov     r6,dpl
03D4 AF83      1353            mov     r7,dph
03D6 A8F0      1354            mov     r0,b
03D8 F9        1355            mov     r1,a
03D9 E581      1356            mov     a,sp
03DB 24FC      1357            add     a,#0xfc
03DD F581      1358            mov     sp,a
03DF D005      1359            pop     ar5
03E1 D004      1360            pop     ar4
03E3 D003      1361            pop     ar3
03E5 D002      1362            pop     ar2
03E7 C006      1363            push    ar6
03E9 C007      1364            push    ar7
03EB C000      1365            push    ar0
03ED C001      1366            push    ar1
03EF 8A82      1367            mov     dpl,r2
03F1 8B83      1368            mov     dph,r3
03F3 8CF0      1369            mov     b,r4
03F5 ED        1370            mov     a,r5
03F6 120000    1371            lcall   ___fsadd
03F9 AA82      1372            mov     r2,dpl
03FB AB83      1373            mov     r3,dph
03FD ACF0      1374            mov     r4,b
03FF FD        1375            mov     r5,a
0400 E581      1376            mov     a,sp
0402 24FC      1377            add     a,#0xfc
0404 F581      1378            mov     sp,a
0406 AE8A      1379            mov     r6,_TL0
0408 7F00      1380            mov     r7,#0x00
040A 8E82      1381            mov     dpl,r6
040C 8F83      1382            mov     dph,r7
040E C002      1383            push    ar2
0410 C003      1384            push    ar3
0412 C004      1385            push    ar4
0414 C005      1386            push    ar5
0416 120000    1387            lcall   ___sint2fs
0419 AE82      1388            mov     r6,dpl
041B AF83      1389            mov     r7,dph
041D A8F0      1390            mov     r0,b
041F F9        1391            mov     r1,a
0420 D005      1392            pop     ar5
0422 D004      1393            pop     ar4
0424 D003      1394            pop     ar3
0426 D002      1395            pop     ar2
0428 C006      1396            push    ar6
042A C007      1397            push    ar7
042C C000      1398            push    ar0
042E C001      1399            push    ar1
0430 8A82      1400            mov     dpl,r2
0432 8B83      1401            mov     dph,r3
0434 8CF0      1402            mov     b,r4
0436 ED        1403            mov     a,r5
0437 120000    1404            lcall   ___fsadd
043A AA82      1405            mov     r2,dpl
043C AB83      1406            mov     r3,dph
043E ACF0      1407            mov     r4,b
0440 FD        1408            mov     r5,a
0441 E581      1409            mov     a,sp
0443 24FC      1410            add     a,#0xfc
0445 F581      1411            mov     sp,a
0447 C002      1412            push    ar2
0449 C003      1413            push    ar3
044B C004      1414            push    ar4
044D C005      1415            push    ar5
044F 90F4FC    1416            mov     dptr,#0xF4FC
0452 75F032    1417            mov     b,#0x32
0455 7434      1418            mov     a,#0x34
0457 120000    1419            lcall   ___fsmul
045A AA82      1420            mov     r2,dpl
045C AB83      1421            mov     r3,dph
045E ACF0      1422            mov     r4,b
0460 FD        1423            mov     r5,a
0461 E581      1424            mov     a,sp
0463 24FC      1425            add     a,#0xfc
0465 F581      1426            mov     sp,a
0467           1427   ;        C:\ELEC291\Lab5\EFM8_ADC.c:352: overflow_count = 0;             
0467 75B800    1428            mov     _overflow_count,#0x00
046A           1429   ;        C:\ELEC291\Lab5\EFM8_ADC.c:353: TL0=0;
046A 758A00    1430            mov     _TL0,#0x00
046D           1431   ;        C:\ELEC291\Lab5\EFM8_ADC.c:354: TH0=0;
046D 758C00    1432            mov     _TH0,#0x00
0470           1433   ;        C:\ELEC291\Lab5\EFM8_ADC.c:356: period_ref = 2.0*halfPeriod_ref;
0470 C002      1434            push    ar2
0472 C003      1435            push    ar3
0474 C004      1436            push    ar4
0476 C005      1437            push    ar5
0478 900000    1438            mov     dptr,#(0x00&0x00ff)
047B E4        1439            clr     a
047C F5F0      1440            mov     b,a
047E 7440      1441            mov     a,#0x40
0480 120000    1442            lcall   ___fsmul
0483 AA82      1443            mov     r2,dpl
0485 AB83      1444            mov     r3,dph
0487 ACF0      1445            mov     r4,b
0489 FD        1446            mov     r5,a
048A E581      1447            mov     a,sp
048C 24FC      1448            add     a,#0xfc
048E F581      1449            mov     sp,a
0490           1450   ;        C:\ELEC291\Lab5\EFM8_ADC.c:357: freq_ref = 1.0/period_ref;
0490 C002      1451            push    ar2
0492 C003      1452            push    ar3
0494 C004      1453            push    ar4
0496 C005      1454            push    ar5
0498 C002      1455            push    ar2
049A C003      1456            push    ar3
049C C004      1457            push    ar4
049E C005      1458            push    ar5
04A0 900000    1459            mov     dptr,#0x0000
04A3 75F080    1460            mov     b,#0x80
04A6 743F      1461            mov     a,#0x3F
04A8 120000    1462            lcall   ___fsdiv
04AB AE82      1463            mov     r6,dpl
04AD AF83      1464            mov     r7,dph
04AF A8F0      1465            mov     r0,b
04B1 F9        1466            mov     r1,a
04B2 E581      1467            mov     a,sp
04B4 24FC      1468            add     a,#0xfc
04B6 F581      1469            mov     sp,a
04B8 D005      1470            pop     ar5
04BA D004      1471            pop     ar4
04BC D003      1472            pop     ar3
04BE D002      1473            pop     ar2
04C0           1474   ;        C:\ELEC291\Lab5\EFM8_ADC.c:364: printf("T(ms): %7.9f\r",period_ref*1000);
04C0 C006      1475            push    ar6
04C2 C007      1476            push    ar7
04C4 C000      1477            push    ar0
04C6 C001      1478            push    ar1
04C8 C002      1479            push    ar2
04CA C003      1480            push    ar3
04CC C004      1481            push    ar4
04CE C005      1482            push    ar5
04D0 900000    1483            mov     dptr,#0x0000
04D3 75F07A    1484            mov     b,#0x7A
04D6 7444      1485            mov     a,#0x44
04D8 120000    1486            lcall   ___fsmul
04DB AA82      1487            mov     r2,dpl
04DD AB83      1488            mov     r3,dph
04DF ACF0      1489            mov     r4,b
04E1 FD        1490            mov     r5,a
04E2 E581      1491            mov     a,sp
04E4 24FC      1492            add     a,#0xfc
04E6 F581      1493            mov     sp,a
04E8 D001      1494            pop     ar1
04EA D000      1495            pop     ar0
04EC D007      1496            pop     ar7
04EE D006      1497            pop     ar6
04F0 C002      1498            push    ar2
04F2 C003      1499            push    ar3
04F4 C004      1500            push    ar4
04F6 C005      1501            push    ar5
04F8 C006      1502            push    ar6
04FA C007      1503            push    ar7
04FC C000      1504            push    ar0
04FE C001      1505            push    ar1
0500 C002      1506            push    ar2
0502 C003      1507            push    ar3
0504 C004      1508            push    ar4
0506 C005      1509            push    ar5
0508 7450      1510            mov     a,#__str_5
050A C0E0      1511            push    acc
050C 74C1      1512            mov     a,#(__str_5 >> 8)
050E C0E0      1513            push    acc
0510 7480      1514            mov     a,#0x80
0512 C0E0      1515            push    acc
0514 120000    1516            lcall   _printf
0517 E581      1517            mov     a,sp
0519 24F9      1518            add     a,#0xf9
051B F581      1519            mov     sp,a
051D           1520   ;        C:\ELEC291\Lab5\EFM8_ADC.c:373: waitms(500);
051D 9001F4    1521            mov     dptr,#0x01F4
0520 120000    1522            lcall   _waitms
0523 D001      1523            pop     ar1
0525 D000      1524            pop     ar0
0527 D007      1525            pop     ar7
0529 D006      1526            pop     ar6
052B D005      1527            pop     ar5
052D D004      1528            pop     ar4
052F D003      1529            pop     ar3
0531 D002      1530            pop     ar2
0533           1531   ;        C:\ELEC291\Lab5\EFM8_ADC.c:376: sprintf(buffer,"T(ms): %f",period_ref*1000);
0533 C006      1532            push    ar6
0535 C007      1533            push    ar7
0537 C000      1534            push    ar0
0539 C001      1535            push    ar1
053B C002      1536            push    ar2
053D C003      1537            push    ar3
053F C004      1538            push    ar4
0541 C005      1539            push    ar5
0543 7490      1540            mov     a,#__str_6
0545 C0E0      1541            push    acc
0547 74C1      1542            mov     a,#(__str_6 >> 8)
0549 C0E0      1543            push    acc
054B 7480      1544            mov     a,#0x80
054D C0E0      1545            push    acc
054F 7410      1546            mov     a,#_main_buffer_1_75
0551 C0E0      1547            push    acc
0553 74B4      1548            mov     a,#(_main_buffer_1_75 >> 8)
0555 C0E0      1549            push    acc
0557 7440      1550            mov     a,#0x40
0559 C0E0      1551            push    acc
055B 120000    1552            lcall   _sprintf
055E E581      1553            mov     a,sp
0560 24F6      1554            add     a,#0xf6
0562 F581      1555            mov     sp,a
0564           1556   ;        C:\ELEC291\Lab5\EFM8_ADC.c:377: LCDprint(buffer,1,1);
0564 757801    1557            mov     _LCDprint_PARM_2,#0x01
0567 D228      1558            setb    _LCDprint_PARM_3
0569 90B410    1559            mov     dptr,#_main_buffer_1_75
056C 75F040    1560            mov     b,#0x40
056F 120000    1561            lcall   _LCDprint
0572           1562   ;        C:\ELEC291\Lab5\EFM8_ADC.c:378: sprintf(buffer,"f(Hz): %f",freq_ref);
0572 7410      1563            mov     a,#__str_7
0574 C0E0      1564            push    acc
0576 74C2      1565            mov     a,#(__str_7 >> 8)
0578 C0E0      1566            push    acc
057A 7480      1567            mov     a,#0x80
057C C0E0      1568            push    acc
057E 7410      1569            mov     a,#_main_buffer_1_75
0580 C0E0      1570            push    acc
0582 74B4      1571            mov     a,#(_main_buffer_1_75 >> 8)
0584 C0E0      1572            push    acc
0586 7440      1573            mov     a,#0x40
0588 C0E0      1574            push    acc
058A 120000    1575            lcall   _sprintf
058D E581      1576            mov     a,sp
058F 24F6      1577            add     a,#0xf6
0591 F581      1578            mov     sp,a
0593           1579   ;        C:\ELEC291\Lab5\EFM8_ADC.c:379: LCDprint(buffer,2,1);
0593 757802    1580            mov     _LCDprint_PARM_2,#0x02
0596 D228      1581            setb    _LCDprint_PARM_3
0598 90B410    1582            mov     dptr,#_main_buffer_1_75
059B 75F040    1583            mov     b,#0x40
059E 120000    1584            lcall   _LCDprint
05A1 020000    1585            ljmp    L017016?
05A4           1586            rseg R_CSEG
05A4           1587   
0000           1588            rseg R_XINIT
0000           1589   
0000           1590            rseg R_CONST
0000           1591   __str_0:
0000 1B        1592            db 0x1B
0001 5B324A    1593            db '[2J'
0004 00        1594            db 0x00
0005           1595   __str_1:
0005 41444320  1596            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1597            db 0x0A
0016 46696C65  1598            db 'File: %s'
     3A202573
001E 0A        1599            db 0x0A
001F 436F6D70  1600            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1601            db 0x0A
0030 0A        1602            db 0x0A
0031 00        1603            db 0x00
0032           1604   __str_2:
0032 433A      1605            db 'C:'
0034 5C        1606            db 0x5C
0035 454C4543  1607            db 'ELEC291'
     323931
003C 5C        1608            db 0x5C
003D 4C616235  1609            db 'Lab5'
0041 5C        1610            db 0x5C
0042 45464D38  1611            db 'EFM8_ADC.c'
     5F414443
     2E63
004C 00        1612            db 0x00
004D           1613   __str_3:
004D 4D617220  1614            db 'Mar  3 2024'
     20332032
     303234
0058 00        1615            db 0x00
0059           1616   __str_4:
0059 31383A32  1617            db '18:29:05'
     393A3035
0061 00        1618            db 0x00
0062           1619   __str_5:
0062 54286D73  1620            db 'T(ms): %7.9f'
     293A2025
     372E3966
006E 0D        1621            db 0x0D
006F 00        1622            db 0x00
0070           1623   __str_6:
0070 54286D73  1624            db 'T(ms): %f'
     293A2025
     66
0079 00        1625            db 0x00
007A           1626   __str_7:
007A 6628487A  1627            db 'f(Hz): %f'
     293A2025
     66
0083 00        1628            db 0x00
0084           1629   
0003           1630            CSEG
0003           1631   
0003           1632   end
