0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Mar 05 04:10:01 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Get_ADC
0000             30            public _LCDprint
0000             31            public _LCD_4BIT
0000             32            public _WriteCommand
0000             33            public _WriteData
0000             34            public _LCD_byte
0000             35            public _LCD_pulse
0000             36            public _Volts_at_Pin
0000             37            public _ADC_at_Pin
0000             38            public _InitPinADC
0000             39            public _TIMER0_Init
0000             40            public _wait100us
0000             41            public _waitms
0000             42            public _Timer3us
0000             43            public _InitADC
0000             44            public __c51_external_startup
0000             45            public _LCDprint_PARM_3
0000             46            public _LCDprint_PARM_2
0000             47            public _overflow_count
0000             48   ;--------------------------------------------------------
0000             49   ; Special Function Registers
0000             50   ;--------------------------------------------------------
0000             51   _ACC            DATA 0xe0
0000             52   _ADC0ASAH       DATA 0xb6
0000             53   _ADC0ASAL       DATA 0xb5
0000             54   _ADC0ASCF       DATA 0xa1
0000             55   _ADC0ASCT       DATA 0xc7
0000             56   _ADC0CF0        DATA 0xbc
0000             57   _ADC0CF1        DATA 0xb9
0000             58   _ADC0CF2        DATA 0xdf
0000             59   _ADC0CN0        DATA 0xe8
0000             60   _ADC0CN1        DATA 0xb2
0000             61   _ADC0CN2        DATA 0xb3
0000             62   _ADC0GTH        DATA 0xc4
0000             63   _ADC0GTL        DATA 0xc3
0000             64   _ADC0H          DATA 0xbe
0000             65   _ADC0L          DATA 0xbd
0000             66   _ADC0LTH        DATA 0xc6
0000             67   _ADC0LTL        DATA 0xc5
0000             68   _ADC0MX         DATA 0xbb
0000             69   _B              DATA 0xf0
0000             70   _CKCON0         DATA 0x8e
0000             71   _CKCON1         DATA 0xa6
0000             72   _CLEN0          DATA 0xc6
0000             73   _CLIE0          DATA 0xc7
0000             74   _CLIF0          DATA 0xe8
0000             75   _CLKSEL         DATA 0xa9
0000             76   _CLOUT0         DATA 0xd1
0000             77   _CLU0CF         DATA 0xb1
0000             78   _CLU0FN         DATA 0xaf
0000             79   _CLU0MX         DATA 0x84
0000             80   _CLU1CF         DATA 0xb3
0000             81   _CLU1FN         DATA 0xb2
0000             82   _CLU1MX         DATA 0x85
0000             83   _CLU2CF         DATA 0xb6
0000             84   _CLU2FN         DATA 0xb5
0000             85   _CLU2MX         DATA 0x91
0000             86   _CLU3CF         DATA 0xbf
0000             87   _CLU3FN         DATA 0xbe
0000             88   _CLU3MX         DATA 0xae
0000             89   _CMP0CN0        DATA 0x9b
0000             90   _CMP0CN1        DATA 0x99
0000             91   _CMP0MD         DATA 0x9d
0000             92   _CMP0MX         DATA 0x9f
0000             93   _CMP1CN0        DATA 0xbf
0000             94   _CMP1CN1        DATA 0xac
0000             95   _CMP1MD         DATA 0xab
0000             96   _CMP1MX         DATA 0xaa
0000             97   _CRC0CN0        DATA 0xce
0000             98   _CRC0CN1        DATA 0x86
0000             99   _CRC0CNT        DATA 0xd3
0000            100   _CRC0DAT        DATA 0xcb
0000            101   _CRC0FLIP       DATA 0xcf
0000            102   _CRC0IN         DATA 0xca
0000            103   _CRC0ST         DATA 0xd2
0000            104   _DAC0CF0        DATA 0x91
0000            105   _DAC0CF1        DATA 0x92
0000            106   _DAC0H          DATA 0x85
0000            107   _DAC0L          DATA 0x84
0000            108   _DAC1CF0        DATA 0x93
0000            109   _DAC1CF1        DATA 0x94
0000            110   _DAC1H          DATA 0x8a
0000            111   _DAC1L          DATA 0x89
0000            112   _DAC2CF0        DATA 0x95
0000            113   _DAC2CF1        DATA 0x96
0000            114   _DAC2H          DATA 0x8c
0000            115   _DAC2L          DATA 0x8b
0000            116   _DAC3CF0        DATA 0x9a
0000            117   _DAC3CF1        DATA 0x9c
0000            118   _DAC3H          DATA 0x8e
0000            119   _DAC3L          DATA 0x8d
0000            120   _DACGCF0        DATA 0x88
0000            121   _DACGCF1        DATA 0x98
0000            122   _DACGCF2        DATA 0xa2
0000            123   _DERIVID        DATA 0xad
0000            124   _DEVICEID       DATA 0xb5
0000            125   _DPH            DATA 0x83
0000            126   _DPL            DATA 0x82
0000            127   _EIE1           DATA 0xe6
0000            128   _EIE2           DATA 0xf3
0000            129   _EIP1           DATA 0xbb
0000            130   _EIP1H          DATA 0xee
0000            131   _EIP2           DATA 0xed
0000            132   _EIP2H          DATA 0xf6
0000            133   _EMI0CN         DATA 0xe7
0000            134   _FLKEY          DATA 0xb7
0000            135   _HFO0CAL        DATA 0xc7
0000            136   _HFO1CAL        DATA 0xd6
0000            137   _HFOCN          DATA 0xef
0000            138   _I2C0ADM        DATA 0xff
0000            139   _I2C0CN0        DATA 0xba
0000            140   _I2C0DIN        DATA 0xbc
0000            141   _I2C0DOUT       DATA 0xbb
0000            142   _I2C0FCN0       DATA 0xad
0000            143   _I2C0FCN1       DATA 0xab
0000            144   _I2C0FCT        DATA 0xf5
0000            145   _I2C0SLAD       DATA 0xbd
0000            146   _I2C0STAT       DATA 0xb9
0000            147   _IE             DATA 0xa8
0000            148   _IP             DATA 0xb8
0000            149   _IPH            DATA 0xf2
0000            150   _IT01CF         DATA 0xe4
0000            151   _LFO0CN         DATA 0xb1
0000            152   _P0             DATA 0x80
0000            153   _P0MASK         DATA 0xfe
0000            154   _P0MAT          DATA 0xfd
0000            155   _P0MDIN         DATA 0xf1
0000            156   _P0MDOUT        DATA 0xa4
0000            157   _P0SKIP         DATA 0xd4
0000            158   _P1             DATA 0x90
0000            159   _P1MASK         DATA 0xee
0000            160   _P1MAT          DATA 0xed
0000            161   _P1MDIN         DATA 0xf2
0000            162   _P1MDOUT        DATA 0xa5
0000            163   _P1SKIP         DATA 0xd5
0000            164   _P2             DATA 0xa0
0000            165   _P2MASK         DATA 0xfc
0000            166   _P2MAT          DATA 0xfb
0000            167   _P2MDIN         DATA 0xf3
0000            168   _P2MDOUT        DATA 0xa6
0000            169   _P2SKIP         DATA 0xcc
0000            170   _P3             DATA 0xb0
0000            171   _P3MDIN         DATA 0xf4
0000            172   _P3MDOUT        DATA 0x9c
0000            173   _PCA0CENT       DATA 0x9e
0000            174   _PCA0CLR        DATA 0x9c
0000            175   _PCA0CN0        DATA 0xd8
0000            176   _PCA0CPH0       DATA 0xfc
0000            177   _PCA0CPH1       DATA 0xea
0000            178   _PCA0CPH2       DATA 0xec
0000            179   _PCA0CPH3       DATA 0xf5
0000            180   _PCA0CPH4       DATA 0x85
0000            181   _PCA0CPH5       DATA 0xde
0000            182   _PCA0CPL0       DATA 0xfb
0000            183   _PCA0CPL1       DATA 0xe9
0000            184   _PCA0CPL2       DATA 0xeb
0000            185   _PCA0CPL3       DATA 0xf4
0000            186   _PCA0CPL4       DATA 0x84
0000            187   _PCA0CPL5       DATA 0xdd
0000            188   _PCA0CPM0       DATA 0xda
0000            189   _PCA0CPM1       DATA 0xdb
0000            190   _PCA0CPM2       DATA 0xdc
0000            191   _PCA0CPM3       DATA 0xae
0000            192   _PCA0CPM4       DATA 0xaf
0000            193   _PCA0CPM5       DATA 0xcc
0000            194   _PCA0H          DATA 0xfa
0000            195   _PCA0L          DATA 0xf9
0000            196   _PCA0MD         DATA 0xd9
0000            197   _PCA0POL        DATA 0x96
0000            198   _PCA0PWM        DATA 0xf7
0000            199   _PCON0          DATA 0x87
0000            200   _PCON1          DATA 0xcd
0000            201   _PFE0CN         DATA 0xc1
0000            202   _PRTDRV         DATA 0xf6
0000            203   _PSCTL          DATA 0x8f
0000            204   _PSTAT0         DATA 0xaa
0000            205   _PSW            DATA 0xd0
0000            206   _REF0CN         DATA 0xd1
0000            207   _REG0CN         DATA 0xc9
0000            208   _REVID          DATA 0xb6
0000            209   _RSTSRC         DATA 0xef
0000            210   _SBCON1         DATA 0x94
0000            211   _SBRLH1         DATA 0x96
0000            212   _SBRLL1         DATA 0x95
0000            213   _SBUF           DATA 0x99
0000            214   _SBUF0          DATA 0x99
0000            215   _SBUF1          DATA 0x92
0000            216   _SCON           DATA 0x98
0000            217   _SCON0          DATA 0x98
0000            218   _SCON1          DATA 0xc8
0000            219   _SFRPAGE        DATA 0xa7
0000            220   _SFRPGCN        DATA 0xbc
0000            221   _SFRSTACK       DATA 0xd7
0000            222   _SMB0ADM        DATA 0xd6
0000            223   _SMB0ADR        DATA 0xd7
0000            224   _SMB0CF         DATA 0xc1
0000            225   _SMB0CN0        DATA 0xc0
0000            226   _SMB0DAT        DATA 0xc2
0000            227   _SMB0FCN0       DATA 0xc3
0000            228   _SMB0FCN1       DATA 0xc4
0000            229   _SMB0FCT        DATA 0xef
0000            230   _SMB0RXLN       DATA 0xc5
0000            231   _SMB0TC         DATA 0xac
0000            232   _SMOD1          DATA 0x93
0000            233   _SP             DATA 0x81
0000            234   _SPI0CFG        DATA 0xa1
0000            235   _SPI0CKR        DATA 0xa2
0000            236   _SPI0CN0        DATA 0xf8
0000            237   _SPI0DAT        DATA 0xa3
0000            238   _SPI0FCN0       DATA 0x9a
0000            239   _SPI0FCN1       DATA 0x9b
0000            240   _SPI0FCT        DATA 0xf7
0000            241   _SPI0PCF        DATA 0xdf
0000            242   _TCON           DATA 0x88
0000            243   _TH0            DATA 0x8c
0000            244   _TH1            DATA 0x8d
0000            245   _TL0            DATA 0x8a
0000            246   _TL1            DATA 0x8b
0000            247   _TMOD           DATA 0x89
0000            248   _TMR2CN0        DATA 0xc8
0000            249   _TMR2CN1        DATA 0xfd
0000            250   _TMR2H          DATA 0xcf
0000            251   _TMR2L          DATA 0xce
0000            252   _TMR2RLH        DATA 0xcb
0000            253   _TMR2RLL        DATA 0xca
0000            254   _TMR3CN0        DATA 0x91
0000            255   _TMR3CN1        DATA 0xfe
0000            256   _TMR3H          DATA 0x95
0000            257   _TMR3L          DATA 0x94
0000            258   _TMR3RLH        DATA 0x93
0000            259   _TMR3RLL        DATA 0x92
0000            260   _TMR4CN0        DATA 0x98
0000            261   _TMR4CN1        DATA 0xff
0000            262   _TMR4H          DATA 0xa5
0000            263   _TMR4L          DATA 0xa4
0000            264   _TMR4RLH        DATA 0xa3
0000            265   _TMR4RLL        DATA 0xa2
0000            266   _TMR5CN0        DATA 0xc0
0000            267   _TMR5CN1        DATA 0xf1
0000            268   _TMR5H          DATA 0xd5
0000            269   _TMR5L          DATA 0xd4
0000            270   _TMR5RLH        DATA 0xd3
0000            271   _TMR5RLL        DATA 0xd2
0000            272   _UART0PCF       DATA 0xd9
0000            273   _UART1FCN0      DATA 0x9d
0000            274   _UART1FCN1      DATA 0xd8
0000            275   _UART1FCT       DATA 0xfa
0000            276   _UART1LIN       DATA 0x9e
0000            277   _UART1PCF       DATA 0xda
0000            278   _VDM0CN         DATA 0xff
0000            279   _WDTCN          DATA 0x97
0000            280   _XBR0           DATA 0xe1
0000            281   _XBR1           DATA 0xe2
0000            282   _XBR2           DATA 0xe3
0000            283   _XOSC0CN        DATA 0x86
0000            284   _DPTR           DATA 0x8382
0000            285   _TMR2RL         DATA 0xcbca
0000            286   _TMR3RL         DATA 0x9392
0000            287   _TMR4RL         DATA 0xa3a2
0000            288   _TMR5RL         DATA 0xd3d2
0000            289   _TMR0           DATA 0x8c8a
0000            290   _TMR1           DATA 0x8d8b
0000            291   _TMR2           DATA 0xcfce
0000            292   _TMR3           DATA 0x9594
0000            293   _TMR4           DATA 0xa5a4
0000            294   _TMR5           DATA 0xd5d4
0000            295   _SBRL1          DATA 0x9695
0000            296   _PCA0           DATA 0xfaf9
0000            297   _PCA0CP0        DATA 0xfcfb
0000            298   _PCA0CP1        DATA 0xeae9
0000            299   _PCA0CP2        DATA 0xeceb
0000            300   _PCA0CP3        DATA 0xf5f4
0000            301   _PCA0CP4        DATA 0x8584
0000            302   _PCA0CP5        DATA 0xdedd
0000            303   _ADC0ASA        DATA 0xb6b5
0000            304   _ADC0GT         DATA 0xc4c3
0000            305   _ADC0           DATA 0xbebd
0000            306   _ADC0LT         DATA 0xc6c5
0000            307   _DAC0           DATA 0x8584
0000            308   _DAC1           DATA 0x8a89
0000            309   _DAC2           DATA 0x8c8b
0000            310   _DAC3           DATA 0x8e8d
0000            311   ;--------------------------------------------------------
0000            312   ; special function bits
0000            313   ;--------------------------------------------------------
0000            314   _ACC_0          BIT 0xe0
0000            315   _ACC_1          BIT 0xe1
0000            316   _ACC_2          BIT 0xe2
0000            317   _ACC_3          BIT 0xe3
0000            318   _ACC_4          BIT 0xe4
0000            319   _ACC_5          BIT 0xe5
0000            320   _ACC_6          BIT 0xe6
0000            321   _ACC_7          BIT 0xe7
0000            322   _TEMPE          BIT 0xe8
0000            323   _ADGN0          BIT 0xe9
0000            324   _ADGN1          BIT 0xea
0000            325   _ADWINT         BIT 0xeb
0000            326   _ADBUSY         BIT 0xec
0000            327   _ADINT          BIT 0xed
0000            328   _IPOEN          BIT 0xee
0000            329   _ADEN           BIT 0xef
0000            330   _B_0            BIT 0xf0
0000            331   _B_1            BIT 0xf1
0000            332   _B_2            BIT 0xf2
0000            333   _B_3            BIT 0xf3
0000            334   _B_4            BIT 0xf4
0000            335   _B_5            BIT 0xf5
0000            336   _B_6            BIT 0xf6
0000            337   _B_7            BIT 0xf7
0000            338   _C0FIF          BIT 0xe8
0000            339   _C0RIF          BIT 0xe9
0000            340   _C1FIF          BIT 0xea
0000            341   _C1RIF          BIT 0xeb
0000            342   _C2FIF          BIT 0xec
0000            343   _C2RIF          BIT 0xed
0000            344   _C3FIF          BIT 0xee
0000            345   _C3RIF          BIT 0xef
0000            346   _D1SRC0         BIT 0x88
0000            347   _D1SRC1         BIT 0x89
0000            348   _D1AMEN         BIT 0x8a
0000            349   _D01REFSL       BIT 0x8b
0000            350   _D3SRC0         BIT 0x8c
0000            351   _D3SRC1         BIT 0x8d
0000            352   _D3AMEN         BIT 0x8e
0000            353   _D23REFSL       BIT 0x8f
0000            354   _D0UDIS         BIT 0x98
0000            355   _D1UDIS         BIT 0x99
0000            356   _D2UDIS         BIT 0x9a
0000            357   _D3UDIS         BIT 0x9b
0000            358   _EX0            BIT 0xa8
0000            359   _ET0            BIT 0xa9
0000            360   _EX1            BIT 0xaa
0000            361   _ET1            BIT 0xab
0000            362   _ES0            BIT 0xac
0000            363   _ET2            BIT 0xad
0000            364   _ESPI0          BIT 0xae
0000            365   _EA             BIT 0xaf
0000            366   _PX0            BIT 0xb8
0000            367   _PT0            BIT 0xb9
0000            368   _PX1            BIT 0xba
0000            369   _PT1            BIT 0xbb
0000            370   _PS0            BIT 0xbc
0000            371   _PT2            BIT 0xbd
0000            372   _PSPI0          BIT 0xbe
0000            373   _P0_0           BIT 0x80
0000            374   _P0_1           BIT 0x81
0000            375   _P0_2           BIT 0x82
0000            376   _P0_3           BIT 0x83
0000            377   _P0_4           BIT 0x84
0000            378   _P0_5           BIT 0x85
0000            379   _P0_6           BIT 0x86
0000            380   _P0_7           BIT 0x87
0000            381   _P1_0           BIT 0x90
0000            382   _P1_1           BIT 0x91
0000            383   _P1_2           BIT 0x92
0000            384   _P1_3           BIT 0x93
0000            385   _P1_4           BIT 0x94
0000            386   _P1_5           BIT 0x95
0000            387   _P1_6           BIT 0x96
0000            388   _P1_7           BIT 0x97
0000            389   _P2_0           BIT 0xa0
0000            390   _P2_1           BIT 0xa1
0000            391   _P2_2           BIT 0xa2
0000            392   _P2_3           BIT 0xa3
0000            393   _P2_4           BIT 0xa4
0000            394   _P2_5           BIT 0xa5
0000            395   _P2_6           BIT 0xa6
0000            396   _P3_0           BIT 0xb0
0000            397   _P3_1           BIT 0xb1
0000            398   _P3_2           BIT 0xb2
0000            399   _P3_3           BIT 0xb3
0000            400   _P3_4           BIT 0xb4
0000            401   _P3_7           BIT 0xb7
0000            402   _CCF0           BIT 0xd8
0000            403   _CCF1           BIT 0xd9
0000            404   _CCF2           BIT 0xda
0000            405   _CCF3           BIT 0xdb
0000            406   _CCF4           BIT 0xdc
0000            407   _CCF5           BIT 0xdd
0000            408   _CR             BIT 0xde
0000            409   _CF             BIT 0xdf
0000            410   _PARITY         BIT 0xd0
0000            411   _F1             BIT 0xd1
0000            412   _OV             BIT 0xd2
0000            413   _RS0            BIT 0xd3
0000            414   _RS1            BIT 0xd4
0000            415   _F0             BIT 0xd5
0000            416   _AC             BIT 0xd6
0000            417   _CY             BIT 0xd7
0000            418   _RI             BIT 0x98
0000            419   _TI             BIT 0x99
0000            420   _RB8            BIT 0x9a
0000            421   _TB8            BIT 0x9b
0000            422   _REN            BIT 0x9c
0000            423   _CE             BIT 0x9d
0000            424   _SMODE          BIT 0x9e
0000            425   _RI1            BIT 0xc8
0000            426   _TI1            BIT 0xc9
0000            427   _RBX1           BIT 0xca
0000            428   _TBX1           BIT 0xcb
0000            429   _REN1           BIT 0xcc
0000            430   _PERR1          BIT 0xcd
0000            431   _OVR1           BIT 0xce
0000            432   _SI             BIT 0xc0
0000            433   _ACK            BIT 0xc1
0000            434   _ARBLOST        BIT 0xc2
0000            435   _ACKRQ          BIT 0xc3
0000            436   _STO            BIT 0xc4
0000            437   _STA            BIT 0xc5
0000            438   _TXMODE         BIT 0xc6
0000            439   _MASTER         BIT 0xc7
0000            440   _SPIEN          BIT 0xf8
0000            441   _TXNF           BIT 0xf9
0000            442   _NSSMD0         BIT 0xfa
0000            443   _NSSMD1         BIT 0xfb
0000            444   _RXOVRN         BIT 0xfc
0000            445   _MODF           BIT 0xfd
0000            446   _WCOL           BIT 0xfe
0000            447   _SPIF           BIT 0xff
0000            448   _IT0            BIT 0x88
0000            449   _IE0            BIT 0x89
0000            450   _IT1            BIT 0x8a
0000            451   _IE1            BIT 0x8b
0000            452   _TR0            BIT 0x8c
0000            453   _TF0            BIT 0x8d
0000            454   _TR1            BIT 0x8e
0000            455   _TF1            BIT 0x8f
0000            456   _T2XCLK0        BIT 0xc8
0000            457   _T2XCLK1        BIT 0xc9
0000            458   _TR2            BIT 0xca
0000            459   _T2SPLIT        BIT 0xcb
0000            460   _TF2CEN         BIT 0xcc
0000            461   _TF2LEN         BIT 0xcd
0000            462   _TF2L           BIT 0xce
0000            463   _TF2H           BIT 0xcf
0000            464   _T4XCLK0        BIT 0x98
0000            465   _T4XCLK1        BIT 0x99
0000            466   _TR4            BIT 0x9a
0000            467   _T4SPLIT        BIT 0x9b
0000            468   _TF4CEN         BIT 0x9c
0000            469   _TF4LEN         BIT 0x9d
0000            470   _TF4L           BIT 0x9e
0000            471   _TF4H           BIT 0x9f
0000            472   _T5XCLK0        BIT 0xc0
0000            473   _T5XCLK1        BIT 0xc1
0000            474   _TR5            BIT 0xc2
0000            475   _T5SPLIT        BIT 0xc3
0000            476   _TF5CEN         BIT 0xc4
0000            477   _TF5LEN         BIT 0xc5
0000            478   _TF5L           BIT 0xc6
0000            479   _TF5H           BIT 0xc7
0000            480   _RIE            BIT 0xd8
0000            481   _RXTO0          BIT 0xd9
0000            482   _RXTO1          BIT 0xda
0000            483   _RFRQ           BIT 0xdb
0000            484   _TIE            BIT 0xdc
0000            485   _TXHOLD         BIT 0xdd
0000            486   _TXNF1          BIT 0xde
0000            487   _TFRQ           BIT 0xdf
0000            488   ;--------------------------------------------------------
0000            489   ; overlayable register banks
0000            490   ;--------------------------------------------------------
0000            491            rbank0 segment data overlay
0000            492   ;--------------------------------------------------------
0000            493   ; internal ram data
0000            494   ;--------------------------------------------------------
0000            495            rseg R_DSEG
0000            496   _overflow_count:
0000            497            ds 1
0001            498   _LCDprint_PARM_2:
0001            499            ds 1
0002            500   _main_buffer_1_77:
0002            501            ds 20
0016            502   _main_period_1_77:
0016            503            ds 4
001A            504   _main_freq_1_77:
001A            505            ds 4
001E            506   _main_quarterPeriod_1_77:
001E            507            ds 4
0022            508   _main_prev_period_1_77:
0022            509            ds 4
0026            510   _main_vrms_spl_1_77:
0026            511            ds 4
002A            512   _main_vrms_ref_1_77:
002A            513            ds 4
002E            514   _main_phase_diff_time_1_77:
002E            515            ds 4
0032            516   ;--------------------------------------------------------
0032            517   ; overlayable items in internal ram 
0032            518   ;--------------------------------------------------------
0000            519            rseg    R_OSEG
0000            520            rseg    R_OSEG
0000            521   _InitPinADC_PARM_2:
0000            522            ds 1
0001            523            rseg    R_OSEG
0001            524   ;--------------------------------------------------------
0001            525   ; indirectly addressable internal ram data
0001            526   ;--------------------------------------------------------
0000            527            rseg R_ISEG
0000            528   ;--------------------------------------------------------
0000            529   ; absolute internal ram data
0000            530   ;--------------------------------------------------------
0000            531            DSEG
0000            532   ;--------------------------------------------------------
0000            533   ; bit data
0000            534   ;--------------------------------------------------------
0000            535            rseg R_BSEG
0000            536   _LCDprint_PARM_3:
0000            537            DBIT    1
0001            538   ;--------------------------------------------------------
0001            539   ; paged external ram data
0001            540   ;--------------------------------------------------------
0000            541            rseg R_PSEG
0000            542   ;--------------------------------------------------------
0000            543   ; external ram data
0000            544   ;--------------------------------------------------------
0000            545            rseg R_XSEG
0000            546   ;--------------------------------------------------------
0000            547   ; absolute external ram data
0000            548   ;--------------------------------------------------------
0000            549            XSEG
0000            550   ;--------------------------------------------------------
0000            551   ; external initialized ram data
0000            552   ;--------------------------------------------------------
0000            553            rseg R_IXSEG
0000            554            rseg R_HOME
0000            555            rseg R_GSINIT
0000            556            rseg R_CSEG
0000            557   ;--------------------------------------------------------
0000            558   ; Reset entry point and interrupt vectors
0000            559   ;--------------------------------------------------------
0000            560            CSEG at 0x0000
0000 020000     561            ljmp    _crt0
0003            562   ;--------------------------------------------------------
0003            563   ; global & static initialisations
0003            564   ;--------------------------------------------------------
0000            565            rseg R_HOME
0000            566            rseg R_GSINIT
0000            567            rseg R_GSINIT
0000            568   ;--------------------------------------------------------
0000            569   ; data variables initialization
0000            570   ;--------------------------------------------------------
0000            571            rseg R_DINIT
0000            572            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            573   ;--------------------------------------------------------
0000            574   ; code
0000            575   ;--------------------------------------------------------
0000            576            rseg R_CSEG
0000            577   ;------------------------------------------------------------
0000            578   ;Allocation info for local variables in function '_c51_external_startup'
0000            579   ;------------------------------------------------------------
0000            580   ;------------------------------------------------------------
0000            581   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:32: char _c51_external_startup (void)
0000            582   ;        -----------------------------------------
0000            583   ;         function _c51_external_startup
0000            584   ;        -----------------------------------------
0000            585   __c51_external_startup:
0000            586            using   0
0000            587   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:35: SFRPAGE = 0x00;
0000 75A700     588            mov     _SFRPAGE,#0x00
0003            589   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:36: WDTCN = 0xDE; //First key
0003 7597DE     590            mov     _WDTCN,#0xDE
0006            591   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:37: WDTCN = 0xAD; //Second key
0006 7597AD     592            mov     _WDTCN,#0xAD
0009            593   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:39: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     594            mov     _VDM0CN,#0x80
000C            595   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:40: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     596            mov     _RSTSRC,#0x06
000F            597   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:47: SFRPAGE = 0x10;
000F 75A710     598            mov     _SFRPAGE,#0x10
0012            599   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:48: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     600            mov     _PFE0CN,#0x20
0015            601   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:49: SFRPAGE = 0x00;
0015 75A700     602            mov     _SFRPAGE,#0x00
0018            603   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:70: CLKSEL = 0x00;
0018 75A900     604            mov     _CLKSEL,#0x00
001B            605   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:71: CLKSEL = 0x00;
001B 75A900     606            mov     _CLKSEL,#0x00
001E            607   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:72: while ((CLKSEL & 0x80) == 0);
001E            608   L002001?:
001E E5A9       609            mov     a,_CLKSEL
0020 30E7B8     610            jnb     acc.7,L002001?
0023            611   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:73: CLKSEL = 0x03;
0023 75A903     612            mov     _CLKSEL,#0x03
0026            613   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:74: CLKSEL = 0x03;
0026 75A903     614            mov     _CLKSEL,#0x03
0029            615   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:75: while ((CLKSEL & 0x80) == 0);
0029            616   L002004?:
0029 E5A9       617            mov     a,_CLKSEL
002B 30E738     618            jnb     acc.7,L002004?
002E            619   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:80: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     620            orl     _P0MDOUT,#0x10
0031            621   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:81: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     622            mov     _XBR0,#0x01
0034            623   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:82: XBR1     = 0X00;
0034 75E200     624            mov     _XBR1,#0x00
0037            625   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:83: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     626            mov     _XBR2,#0x40
003A            627   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:89: SCON0 = 0x10;
003A 759810     628            mov     _SCON0,#0x10
003D            629   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:90: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*PRESCALAR));
003D 758DE6     630            mov     _TH1,#0xE6
0040            631   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:91: TL1 = TH1;      // Init Timer1
0040 858D8B     632            mov     _TL1,_TH1
0043            633   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:92: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     634            anl     _TMOD,#0x0F
0046            635   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:93: TMOD |=  0x20;                       
0046 438920     636            orl     _TMOD,#0x20
0049            637   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:94: TR1 = 1; // START Timer1
0049 D28E       638            setb    _TR1
004B            639   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:95: TI = 1;  // Indicate TX0 ready
004B D299       640            setb    _TI
004D            641   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:97: return 0;
004D 758200     642            mov     dpl,#0x00
0050 22         643            ret
0051            644   ;------------------------------------------------------------
0051            645   ;Allocation info for local variables in function 'InitADC'
0051            646   ;------------------------------------------------------------
0051            647   ;------------------------------------------------------------
0051            648   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:101: void InitADC (void)
0051            649   ;        -----------------------------------------
0051            650   ;         function InitADC
0051            651   ;        -----------------------------------------
0051            652   _InitADC:
0051            653   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:103: SFRPAGE = 0x00;
0051 75A700     654            mov     _SFRPAGE,#0x00
0054            655   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:104: ADEN=0; // Disable ADC
0054 C2EF       656            clr     _ADEN
0056            657   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:109: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     658            mov     _ADC0CN1,#0x80
0059            659   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:113: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     660            mov     _ADC0CF0,#0x20
005C            661   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:117: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     662            mov     _ADC0CF1,#0x1E
005F            663   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:126: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     664            mov     _ADC0CN0,#0x00
0062            665   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:131: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     666            mov     _ADC0CF2,#0x3F
0065            667   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:135: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     668            mov     _ADC0CN2,#0x00
0068            669   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:137: ADEN=1; // Enable ADC
0068 D2EF       670            setb    _ADEN
006A 22         671            ret
006B            672   ;------------------------------------------------------------
006B            673   ;Allocation info for local variables in function 'Timer3us'
006B            674   ;------------------------------------------------------------
006B            675   ;us                        Allocated to registers r2 
006B            676   ;i                         Allocated to registers r3 
006B            677   ;------------------------------------------------------------
006B            678   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:144: void Timer3us(unsigned char us)
006B            679   ;        -----------------------------------------
006B            680   ;         function Timer3us
006B            681   ;        -----------------------------------------
006B            682   _Timer3us:
006B AA82       683            mov     r2,dpl
006D            684   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:149: CKCON0|=0b_0100_0000;
006D 438E40     685            orl     _CKCON0,#0x40
0070            686   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:152: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     687            mov     _TMR3RL,#0xB8
0073 7593FF     688            mov     (_TMR3RL >> 8),#0xFF
0076            689   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:153: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     690            mov     _TMR3,_TMR3RL
0079 859395     691            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            692   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:155: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     693            mov     _TMR3CN0,#0x04
007F            694   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       695            mov     r3,#0x00
0081            696   L004004?:
0081 C3         697            clr     c
0082 EB         698            mov     a,r3
0083 9A         699            subb    a,r2
0084 5000       700            jnc     L004007?
0086            701   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:158: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            702   L004001?:
0086 E591       703            mov     a,_TMR3CN0
0088 30E738     704            jnb     acc.7,L004001?
008B            705   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:159: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     706            anl     _TMR3CN0,#0x7F
008E            707   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         708            inc     r3
008F 8000       709            sjmp    L004004?
0091            710   L004007?:
0091            711   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:161: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     712            mov     _TMR3CN0,#0x00
0094 22         713            ret
0095            714   ;------------------------------------------------------------
0095            715   ;Allocation info for local variables in function 'waitms'
0095            716   ;------------------------------------------------------------
0095            717   ;ms                        Allocated to registers r2 r3 
0095            718   ;j                         Allocated to registers r4 r5 
0095            719   ;k                         Allocated to registers r6 
0095            720   ;------------------------------------------------------------
0095            721   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:164: void waitms (unsigned int ms)
0095            722   ;        -----------------------------------------
0095            723   ;         function waitms
0095            724   ;        -----------------------------------------
0095            725   _waitms:
0095 AA82       726            mov     r2,dpl
0097 AB83       727            mov     r3,dph
0099            728   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:168: for(j=0; j<ms; j++)
0099 7C00       729            mov     r4,#0x00
009B 7D00       730            mov     r5,#0x00
009D            731   L005005?:
009D C3         732            clr     c
009E EC         733            mov     a,r4
009F 9A         734            subb    a,r2
00A0 ED         735            mov     a,r5
00A1 9B         736            subb    a,r3
00A2 5000       737            jnc     L005009?
00A4            738   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:169: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       739            mov     r6,#0x00
00A6            740   L005001?:
00A6 BE0478     741            cjne    r6,#0x04,L005018?
00A9            742   L005018?:
00A9 5000       743            jnc     L005007?
00AB 7582FA     744            mov     dpl,#0xFA
00AE C002       745            push    ar2
00B0 C003       746            push    ar3
00B2 C004       747            push    ar4
00B4 C005       748            push    ar5
00B6 C006       749            push    ar6
00B8 120000     750            lcall   _Timer3us
00BB D006       751            pop     ar6
00BD D005       752            pop     ar5
00BF D004       753            pop     ar4
00C1 D003       754            pop     ar3
00C3 D002       755            pop     ar2
00C5 0E         756            inc     r6
00C6 8000       757            sjmp    L005001?
00C8            758   L005007?:
00C8            759   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:168: for(j=0; j<ms; j++)
00C8 0C         760            inc     r4
00C9 BC00B8     761            cjne    r4,#0x00,L005005?
00CC 0D         762            inc     r5
00CD 8000       763            sjmp    L005005?
00CF            764   L005009?:
00CF 22         765            ret
00D0            766   ;------------------------------------------------------------
00D0            767   ;Allocation info for local variables in function 'wait100us'
00D0            768   ;------------------------------------------------------------
00D0            769   ;time                      Allocated to registers r2 r3 r4 r5 
00D0            770   ;j                         Allocated to registers r6 r7 r0 r1 
00D0            771   ;------------------------------------------------------------
00D0            772   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:173: void wait100us (unsigned long time){              
00D0            773   ;        -----------------------------------------
00D0            774   ;         function wait100us
00D0            775   ;        -----------------------------------------
00D0            776   _wait100us:
00D0 AA82       777            mov     r2,dpl
00D2 AB83       778            mov     r3,dph
00D4 ACF0       779            mov     r4,b
00D6 FD         780            mov     r5,a
00D7            781   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:175: for(j = 0; j<time; j++) Timer3us(100);    
00D7 7E00       782            mov     r6,#0x00
00D9 7F00       783            mov     r7,#0x00
00DB 7800       784            mov     r0,#0x00
00DD 7900       785            mov     r1,#0x00
00DF            786   L006001?:
00DF C3         787            clr     c
00E0 EE         788            mov     a,r6
00E1 9A         789            subb    a,r2
00E2 EF         790            mov     a,r7
00E3 9B         791            subb    a,r3
00E4 E8         792            mov     a,r0
00E5 9C         793            subb    a,r4
00E6 E9         794            mov     a,r1
00E7 9D         795            subb    a,r5
00E8 5000       796            jnc     L006005?
00EA 758264     797            mov     dpl,#0x64
00ED C002       798            push    ar2
00EF C003       799            push    ar3
00F1 C004       800            push    ar4
00F3 C005       801            push    ar5
00F5 C006       802            push    ar6
00F7 C007       803            push    ar7
00F9 C000       804            push    ar0
00FB C001       805            push    ar1
00FD 120000     806            lcall   _Timer3us
0100 D001       807            pop     ar1
0102 D000       808            pop     ar0
0104 D007       809            pop     ar7
0106 D006       810            pop     ar6
0108 D005       811            pop     ar5
010A D004       812            pop     ar4
010C D003       813            pop     ar3
010E D002       814            pop     ar2
0110 0E         815            inc     r6
0111 BE0038     816            cjne    r6,#0x00,L006001?
0114 0F         817            inc     r7
0115 BF0038     818            cjne    r7,#0x00,L006001?
0118 08         819            inc     r0
0119 B80038     820            cjne    r0,#0x00,L006001?
011C 09         821            inc     r1
011D 8000       822            sjmp    L006001?
011F            823   L006005?:
011F 22         824            ret
0120            825   ;------------------------------------------------------------
0120            826   ;Allocation info for local variables in function 'TIMER0_Init'
0120            827   ;------------------------------------------------------------
0120            828   ;------------------------------------------------------------
0120            829   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:178: void TIMER0_Init(void)
0120            830   ;        -----------------------------------------
0120            831   ;         function TIMER0_Init
0120            832   ;        -----------------------------------------
0120            833   _TIMER0_Init:
0120            834   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:180: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0120 5389F0     835            anl     _TMOD,#0xF0
0123            836   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:181: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit counter
0123 438901     837            orl     _TMOD,#0x01
0126            838   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:182: TR0=0; // Stop Timer/Counter 0
0126 C28C       839            clr     _TR0
0128 22         840            ret
0129            841   ;------------------------------------------------------------
0129            842   ;Allocation info for local variables in function 'InitPinADC'
0129            843   ;------------------------------------------------------------
0129            844   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0129            845   ;portno                    Allocated to registers r2 
0129            846   ;mask                      Allocated to registers r3 
0129            847   ;------------------------------------------------------------
0129            848   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:187: void InitPinADC (unsigned char portno, unsigned char pinno)
0129            849   ;        -----------------------------------------
0129            850   ;         function InitPinADC
0129            851   ;        -----------------------------------------
0129            852   _InitPinADC:
0129 AA82       853            mov     r2,dpl
012B            854   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:191: mask=1<<pinno;
012B 85D8F0     855            mov     b,_InitPinADC_PARM_2
012E 05F0       856            inc     b
0130 7401       857            mov     a,#0x01
0132 8000       858            sjmp    L008013?
0134            859   L008011?:
0134 25E0       860            add     a,acc
0136            861   L008013?:
0136 D5F0F8     862            djnz    b,L008011?
0139 FB         863            mov     r3,a
013A            864   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:193: SFRPAGE = 0x20;
013A 75A720     865            mov     _SFRPAGE,#0x20
013D            866   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:194: switch (portno)
013D BA0038     867            cjne    r2,#0x00,L008014?
0140 8000       868            sjmp    L008001?
0142            869   L008014?:
0142 BA01B8     870            cjne    r2,#0x01,L008015?
0145 8000       871            sjmp    L008002?
0147            872   L008015?:
0147            873   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:196: case 0:
0147 BA0238     874            cjne    r2,#0x02,L008005?
014A 8000       875            sjmp    L008003?
014C            876   L008001?:
014C            877   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:197: P0MDIN &= (~mask); // Set pin as analog input
014C EB         878            mov     a,r3
014D F4         879            cpl     a
014E FA         880            mov     r2,a
014F 52F1       881            anl     _P0MDIN,a
0151            882   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:198: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0151 EB         883            mov     a,r3
0152 42D4       884            orl     _P0SKIP,a
0154            885   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:199: break;
0154            886   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:200: case 1:
0154 8000       887            sjmp    L008005?
0156            888   L008002?:
0156            889   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:201: P1MDIN &= (~mask); // Set pin as analog input
0156 EB         890            mov     a,r3
0157 F4         891            cpl     a
0158 FA         892            mov     r2,a
0159 52F2       893            anl     _P1MDIN,a
015B            894   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:202: P1SKIP |= mask; // Skip Crossbar decoding for this pin
015B EB         895            mov     a,r3
015C 42D5       896            orl     _P1SKIP,a
015E            897   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:203: break;
015E            898   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:204: case 2:
015E 8000       899            sjmp    L008005?
0160            900   L008003?:
0160            901   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:205: P2MDIN &= (~mask); // Set pin as analog input
0160 EB         902            mov     a,r3
0161 F4         903            cpl     a
0162 FA         904            mov     r2,a
0163 52F3       905            anl     _P2MDIN,a
0165            906   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:206: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0165 EB         907            mov     a,r3
0166 42CC       908            orl     _P2SKIP,a
0168            909   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:210: }
0168            910   L008005?:
0168            911   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:211: SFRPAGE = 0x00;
0168 75A700     912            mov     _SFRPAGE,#0x00
016B 22         913            ret
016C            914   ;------------------------------------------------------------
016C            915   ;Allocation info for local variables in function 'ADC_at_Pin'
016C            916   ;------------------------------------------------------------
016C            917   ;pin                       Allocated to registers 
016C            918   ;------------------------------------------------------------
016C            919   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:215: unsigned int ADC_at_Pin(unsigned char pin)
016C            920   ;        -----------------------------------------
016C            921   ;         function ADC_at_Pin
016C            922   ;        -----------------------------------------
016C            923   _ADC_at_Pin:
016C 8582BB     924            mov     _ADC0MX,dpl
016F            925   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:218: ADINT = 0;
016F C2ED       926            clr     _ADINT
0171            927   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:219: ADBUSY = 1;     // Convert voltage at the pin
0171 D2EC       928            setb    _ADBUSY
0173            929   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:220: while (!ADINT); // Wait for conversion to complete
0173            930   L009001?:
0173 30EDB8     931            jnb     _ADINT,L009001?
0176            932   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:221: return (ADC0);
0176 85BD82     933            mov     dpl,_ADC0
0179 85BE83     934            mov     dph,(_ADC0 >> 8)
017C 22         935            ret
017D            936   ;------------------------------------------------------------
017D            937   ;Allocation info for local variables in function 'Volts_at_Pin'
017D            938   ;------------------------------------------------------------
017D            939   ;pin                       Allocated to registers r2 
017D            940   ;------------------------------------------------------------
017D            941   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:224: float Volts_at_Pin(unsigned char pin)
017D            942   ;        -----------------------------------------
017D            943   ;         function Volts_at_Pin
017D            944   ;        -----------------------------------------
017D            945   _Volts_at_Pin:
017D            946   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:226: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111); //b/c 14 bit adc
017D 120000     947            lcall   _ADC_at_Pin
0180 120000     948            lcall   ___uint2fs
0183 AA82       949            mov     r2,dpl
0185 AB83       950            mov     r3,dph
0187 ACF0       951            mov     r4,b
0189 FD         952            mov     r5,a
018A C002       953            push    ar2
018C C003       954            push    ar3
018E C004       955            push    ar4
0190 C005       956            push    ar5
0192 906C8B     957            mov     dptr,#0x6C8B
0195 75F053     958            mov     b,#0x53
0198 7440       959            mov     a,#0x40
019A 120000     960            lcall   ___fsmul
019D AA82       961            mov     r2,dpl
019F AB83       962            mov     r3,dph
01A1 ACF0       963            mov     r4,b
01A3 FD         964            mov     r5,a
01A4 E581       965            mov     a,sp
01A6 24FC       966            add     a,#0xfc
01A8 F581       967            mov     sp,a
01AA E4         968            clr     a
01AB C0E0       969            push    acc
01AD 74FC       970            mov     a,#0xFC
01AF C0E0       971            push    acc
01B1 747F       972            mov     a,#0x7F
01B3 C0E0       973            push    acc
01B5 7446       974            mov     a,#0x46
01B7 C0E0       975            push    acc
01B9 8A82       976            mov     dpl,r2
01BB 8B83       977            mov     dph,r3
01BD 8CF0       978            mov     b,r4
01BF ED         979            mov     a,r5
01C0 120000     980            lcall   ___fsdiv
01C3 AA82       981            mov     r2,dpl
01C5 AB83       982            mov     r3,dph
01C7 ACF0       983            mov     r4,b
01C9 FD         984            mov     r5,a
01CA E581       985            mov     a,sp
01CC 24FC       986            add     a,#0xfc
01CE F581       987            mov     sp,a
01D0 8A82       988            mov     dpl,r2
01D2 8B83       989            mov     dph,r3
01D4 8CF0       990            mov     b,r4
01D6 ED         991            mov     a,r5
01D7 22         992            ret
01D8            993   ;------------------------------------------------------------
01D8            994   ;Allocation info for local variables in function 'LCD_pulse'
01D8            995   ;------------------------------------------------------------
01D8            996   ;------------------------------------------------------------
01D8            997   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:230: void LCD_pulse (void)
01D8            998   ;        -----------------------------------------
01D8            999   ;         function LCD_pulse
01D8           1000   ;        -----------------------------------------
01D8           1001   _LCD_pulse:
01D8           1002   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:232: LCD_E=1;
01D8 D2A0      1003            setb    _P2_0
01DA           1004   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:233: Timer3us(40);
01DA 758228    1005            mov     dpl,#0x28
01DD 120000    1006            lcall   _Timer3us
01E0           1007   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:234: LCD_E=0;
01E0 C2A0      1008            clr     _P2_0
01E2 22        1009            ret
01E3           1010   ;------------------------------------------------------------
01E3           1011   ;Allocation info for local variables in function 'LCD_byte'
01E3           1012   ;------------------------------------------------------------
01E3           1013   ;x                         Allocated to registers r2 
01E3           1014   ;------------------------------------------------------------
01E3           1015   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:236: void LCD_byte (unsigned char x)
01E3           1016   ;        -----------------------------------------
01E3           1017   ;         function LCD_byte
01E3           1018   ;        -----------------------------------------
01E3           1019   _LCD_byte:
01E3 AA82      1020            mov     r2,dpl
01E5           1021   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:239: ACC=x; //Send high nible
01E5 8AE0      1022            mov     _ACC,r2
01E7           1023   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:240: LCD_D7=ACC_7;
01E7 A2E7      1024            mov     c,_ACC_7
01E9 9290      1025            mov     _P1_0,c
01EB           1026   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:241: LCD_D6=ACC_6;
01EB A2E6      1027            mov     c,_ACC_6
01ED 9291      1028            mov     _P1_1,c
01EF           1029   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:242: LCD_D5=ACC_5;
01EF A2E5      1030            mov     c,_ACC_5
01F1 9292      1031            mov     _P1_2,c
01F3           1032   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:243: LCD_D4=ACC_4;
01F3 A2E4      1033            mov     c,_ACC_4
01F5 9293      1034            mov     _P1_3,c
01F7           1035   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:244: LCD_pulse();
01F7 C002      1036            push    ar2
01F9 120000    1037            lcall   _LCD_pulse
01FC           1038   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:245: Timer3us(40);
01FC 758228    1039            mov     dpl,#0x28
01FF 120000    1040            lcall   _Timer3us
0202 D002      1041            pop     ar2
0204           1042   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:246: ACC=x; //Send low nible
0204 8AE0      1043            mov     _ACC,r2
0206           1044   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:247: LCD_D7=ACC_3;
0206 A2E3      1045            mov     c,_ACC_3
0208 9290      1046            mov     _P1_0,c
020A           1047   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:248: LCD_D6=ACC_2;
020A A2E2      1048            mov     c,_ACC_2
020C 9291      1049            mov     _P1_1,c
020E           1050   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:249: LCD_D5=ACC_1;
020E A2E1      1051            mov     c,_ACC_1
0210 9292      1052            mov     _P1_2,c
0212           1053   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:250: LCD_D4=ACC_0;
0212 A2E0      1054            mov     c,_ACC_0
0214 9293      1055            mov     _P1_3,c
0216           1056   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:251: LCD_pulse();
0216 020000    1057            ljmp    _LCD_pulse
0219           1058   ;------------------------------------------------------------
0219           1059   ;Allocation info for local variables in function 'WriteData'
0219           1060   ;------------------------------------------------------------
0219           1061   ;x                         Allocated to registers r2 
0219           1062   ;------------------------------------------------------------
0219           1063   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:254: void WriteData (unsigned char x)
0219           1064   ;        -----------------------------------------
0219           1065   ;         function WriteData
0219           1066   ;        -----------------------------------------
0219           1067   _WriteData:
0219 AA82      1068            mov     r2,dpl
021B           1069   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:256: LCD_RS=1;
021B D297      1070            setb    _P1_7
021D           1071   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:257: LCD_byte(x);
021D 8A82      1072            mov     dpl,r2
021F 120000    1073            lcall   _LCD_byte
0222           1074   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:258: waitms(2);
0222 900002    1075            mov     dptr,#0x0002
0225 020000    1076            ljmp    _waitms
0228           1077   ;------------------------------------------------------------
0228           1078   ;Allocation info for local variables in function 'WriteCommand'
0228           1079   ;------------------------------------------------------------
0228           1080   ;x                         Allocated to registers r2 
0228           1081   ;------------------------------------------------------------
0228           1082   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:261: void WriteCommand (unsigned char x)
0228           1083   ;        -----------------------------------------
0228           1084   ;         function WriteCommand
0228           1085   ;        -----------------------------------------
0228           1086   _WriteCommand:
0228 AA82      1087            mov     r2,dpl
022A           1088   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:263: LCD_RS=0;
022A C297      1089            clr     _P1_7
022C           1090   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:264: LCD_byte(x);
022C 8A82      1091            mov     dpl,r2
022E 120000    1092            lcall   _LCD_byte
0231           1093   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:265: waitms(5);
0231 900005    1094            mov     dptr,#0x0005
0234 020000    1095            ljmp    _waitms
0237           1096   ;------------------------------------------------------------
0237           1097   ;Allocation info for local variables in function 'LCD_4BIT'
0237           1098   ;------------------------------------------------------------
0237           1099   ;------------------------------------------------------------
0237           1100   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:268: void LCD_4BIT (void)
0237           1101   ;        -----------------------------------------
0237           1102   ;         function LCD_4BIT
0237           1103   ;        -----------------------------------------
0237           1104   _LCD_4BIT:
0237           1105   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:270: LCD_E=0; // Resting state of LCD's enable is zero
0237 C2A0      1106            clr     _P2_0
0239           1107   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:272: waitms(20);
0239 900014    1108            mov     dptr,#0x0014
023C 120000    1109            lcall   _waitms
023F           1110   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:274: WriteCommand(0x33);
023F 758233    1111            mov     dpl,#0x33
0242 120000    1112            lcall   _WriteCommand
0245           1113   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:275: WriteCommand(0x33);
0245 758233    1114            mov     dpl,#0x33
0248 120000    1115            lcall   _WriteCommand
024B           1116   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:276: WriteCommand(0x32); // Change to 4-bit mode
024B 758232    1117            mov     dpl,#0x32
024E 120000    1118            lcall   _WriteCommand
0251           1119   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:279: WriteCommand(0x28);
0251 758228    1120            mov     dpl,#0x28
0254 120000    1121            lcall   _WriteCommand
0257           1122   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:280: WriteCommand(0x0c);
0257 75820C    1123            mov     dpl,#0x0C
025A 120000    1124            lcall   _WriteCommand
025D           1125   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:281: WriteCommand(0x01); // Clear screen command (takes some time)
025D 758201    1126            mov     dpl,#0x01
0260 120000    1127            lcall   _WriteCommand
0263           1128   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:282: waitms(20); // Wait for clear screen command to finsih.
0263 900014    1129            mov     dptr,#0x0014
0266 020000    1130            ljmp    _waitms
0269           1131   ;------------------------------------------------------------
0269           1132   ;Allocation info for local variables in function 'LCDprint'
0269           1133   ;------------------------------------------------------------
0269           1134   ;line                      Allocated with name '_LCDprint_PARM_2'
0269           1135   ;string                    Allocated to registers r2 r3 r4 
0269           1136   ;j                         Allocated to registers r5 r6 
0269           1137   ;------------------------------------------------------------
0269           1138   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:285: void LCDprint(char * string, unsigned char line, bit clear)
0269           1139   ;        -----------------------------------------
0269           1140   ;         function LCDprint
0269           1141   ;        -----------------------------------------
0269           1142   _LCDprint:
0269 AA82      1143            mov     r2,dpl
026B AB83      1144            mov     r3,dph
026D ACF0      1145            mov     r4,b
026F           1146   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:289: WriteCommand(line==2?0xc0:0x80);
026F 7402      1147            mov     a,#0x02
0271 B5C8F8    1148            cjne    a,_LCDprint_PARM_2,L016013?
0274 7DC0      1149            mov     r5,#0xC0
0276 8000      1150            sjmp    L016014?
0278           1151   L016013?:
0278 7D80      1152            mov     r5,#0x80
027A           1153   L016014?:
027A 8D82      1154            mov     dpl,r5
027C C002      1155            push    ar2
027E C003      1156            push    ar3
0280 C004      1157            push    ar4
0282 120000    1158            lcall   _WriteCommand
0285           1159   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:290: waitms(5);
0285 900005    1160            mov     dptr,#0x0005
0288 120000    1161            lcall   _waitms
028B D004      1162            pop     ar4
028D D003      1163            pop     ar3
028F D002      1164            pop     ar2
0291           1165   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:291: for(j=0; string[j]!=0; j++)       WriteData(string[j]);// Write the message
0291 7D00      1166            mov     r5,#0x00
0293 7E00      1167            mov     r6,#0x00
0295           1168   L016003?:
0295 ED        1169            mov     a,r5
0296 2A        1170            add     a,r2
0297 FF        1171            mov     r7,a
0298 EE        1172            mov     a,r6
0299 3B        1173            addc    a,r3
029A F8        1174            mov     r0,a
029B 8C01      1175            mov     ar1,r4
029D 8F82      1176            mov     dpl,r7
029F 8883      1177            mov     dph,r0
02A1 89F0      1178            mov     b,r1
02A3 120000    1179            lcall   __gptrget
02A6 FF        1180            mov     r7,a
02A7 6000      1181            jz      L016006?
02A9 8F82      1182            mov     dpl,r7
02AB C002      1183            push    ar2
02AD C003      1184            push    ar3
02AF C004      1185            push    ar4
02B1 C005      1186            push    ar5
02B3 C006      1187            push    ar6
02B5 120000    1188            lcall   _WriteData
02B8 D006      1189            pop     ar6
02BA D005      1190            pop     ar5
02BC D004      1191            pop     ar4
02BE D003      1192            pop     ar3
02C0 D002      1193            pop     ar2
02C2 0D        1194            inc     r5
02C3 BD0078    1195            cjne    r5,#0x00,L016003?
02C6 0E        1196            inc     r6
02C7 8000      1197            sjmp    L016003?
02C9           1198   L016006?:
02C9           1199   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:292: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
02C9 307838    1200            jnb     _LCDprint_PARM_3,L016011?
02CC 8D02      1201            mov     ar2,r5
02CE 8E03      1202            mov     ar3,r6
02D0           1203   L016007?:
02D0 C3        1204            clr     c
02D1 EA        1205            mov     a,r2
02D2 9410      1206            subb    a,#0x10
02D4 EB        1207            mov     a,r3
02D5 6480      1208            xrl     a,#0x80
02D7 9480      1209            subb    a,#0x80
02D9 5000      1210            jnc     L016011?
02DB 758220    1211            mov     dpl,#0x20
02DE C002      1212            push    ar2
02E0 C003      1213            push    ar3
02E2 120000    1214            lcall   _WriteData
02E5 D003      1215            pop     ar3
02E7 D002      1216            pop     ar2
02E9 0A        1217            inc     r2
02EA BA0078    1218            cjne    r2,#0x00,L016007?
02ED 0B        1219            inc     r3
02EE 8000      1220            sjmp    L016007?
02F0           1221   L016011?:
02F0 22        1222            ret
02F1           1223   ;------------------------------------------------------------
02F1           1224   ;Allocation info for local variables in function 'Get_ADC'
02F1           1225   ;------------------------------------------------------------
02F1           1226   ;------------------------------------------------------------
02F1           1227   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:295: unsigned int Get_ADC(void)
02F1           1228   ;        -----------------------------------------
02F1           1229   ;         function Get_ADC
02F1           1230   ;        -----------------------------------------
02F1           1231   _Get_ADC:
02F1           1232   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:297: ADINT = 0;
02F1 C2ED      1233            clr     _ADINT
02F3           1234   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:298: ADBUSY = 1;
02F3 D2EC      1235            setb    _ADBUSY
02F5           1236   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:299: while (!ADINT);
02F5           1237   L017001?:
02F5 30EDB8    1238            jnb     _ADINT,L017001?
02F8           1239   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:300: return (ADC0);
02F8 85BD82    1240            mov     dpl,_ADC0
02FB 85BE83    1241            mov     dph,(_ADC0 >> 8)
02FE 22        1242            ret
02FF           1243   ;------------------------------------------------------------
02FF           1244   ;Allocation info for local variables in function 'main'
02FF           1245   ;------------------------------------------------------------
02FF           1246   ;buffer                    Allocated with name '_main_buffer_1_77'
02FF           1247   ;halfPeriod                Allocated to registers r2 r3 r4 r5 
02FF           1248   ;period                    Allocated with name '_main_period_1_77'
02FF           1249   ;freq                      Allocated with name '_main_freq_1_77'
02FF           1250   ;quarterPeriod             Allocated with name '_main_quarterPeriod_1_77'
02FF           1251   ;prev_period               Allocated with name '_main_prev_period_1_77'
02FF           1252   ;vrms_spl                  Allocated with name '_main_vrms_spl_1_77'
02FF           1253   ;vrms_ref                  Allocated with name '_main_vrms_ref_1_77'
02FF           1254   ;phase_diff_deg            Allocated to registers r6 r7 r0 r1 
02FF           1255   ;phase_diff_time           Allocated with name '_main_phase_diff_time_1_77'
02FF           1256   ;------------------------------------------------------------
02FF           1257   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:304: void main (void)
02FF           1258   ;        -----------------------------------------
02FF           1259   ;         function main
02FF           1260   ;        -----------------------------------------
02FF           1261   _main:
02FF           1262   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:320: LCD_4BIT();
02FF 120000    1263            lcall   _LCD_4BIT
0302           1264   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:321: TIMER0_Init();
0302 120000    1265            lcall   _TIMER0_Init
0305           1266   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:323: waitms(500); // Give PuTTy a chance to start before sending
0305 9001F4    1267            mov     dptr,#0x01F4
0308 120000    1268            lcall   _waitms
030B           1269   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:324: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
030B 7400      1270            mov     a,#__str_0
030D C0E0      1271            push    acc
030F 74C0      1272            mov     a,#(__str_0 >> 8)
0311 C0E0      1273            push    acc
0313 7480      1274            mov     a,#0x80
0315 C0E0      1275            push    acc
0317 120000    1276            lcall   _printf
031A 1581      1277            dec     sp
031C 1581      1278            dec     sp
031E 1581      1279            dec     sp
0320           1280   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:329: __FILE__, __DATE__, __TIME__);
0320           1281   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:328: "Compiled: %s, %s\n\n",
0320 7480      1282            mov     a,#__str_4
0322 C0E0      1283            push    acc
0324 74C0      1284            mov     a,#(__str_4 >> 8)
0326 C0E0      1285            push    acc
0328 7480      1286            mov     a,#0x80
032A C0E0      1287            push    acc
032C 74C0      1288            mov     a,#__str_3
032E C0E0      1289            push    acc
0330 74C0      1290            mov     a,#(__str_3 >> 8)
0332 C0E0      1291            push    acc
0334 7480      1292            mov     a,#0x80
0336 C0E0      1293            push    acc
0338 7400      1294            mov     a,#__str_2
033A C0E0      1295            push    acc
033C 74C1      1296            mov     a,#(__str_2 >> 8)
033E C0E0      1297            push    acc
0340 7480      1298            mov     a,#0x80
0342 C0E0      1299            push    acc
0344 7440      1300            mov     a,#__str_1
0346 C0E0      1301            push    acc
0348 74C1      1302            mov     a,#(__str_1 >> 8)
034A C0E0      1303            push    acc
034C 7480      1304            mov     a,#0x80
034E C0E0      1305            push    acc
0350 120000    1306            lcall   _printf
0353 E581      1307            mov     a,sp
0355 24F4      1308            add     a,#0xf4
0357 F581      1309            mov     sp,a
0359           1310   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:331: InitPinADC(2, 2); // Configure P2.2 as analog input
0359 75D802    1311            mov     _InitPinADC_PARM_2,#0x02
035C 758202    1312            mov     dpl,#0x02
035F 120000    1313            lcall   _InitPinADC
0362           1314   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:332: InitPinADC(2, 3); // Configure P2.3 as analog input
0362 75D803    1315            mov     _InitPinADC_PARM_2,#0x03
0365 758202    1316            mov     dpl,#0x02
0368 120000    1317            lcall   _InitPinADC
036B           1318   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:333: InitPinADC(2, 4); // Configure P2.4 as analog input
036B 75D804    1319            mov     _InitPinADC_PARM_2,#0x04
036E 758202    1320            mov     dpl,#0x02
0371 120000    1321            lcall   _InitPinADC
0374           1322   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:334: InitPinADC(2, 5); // Configure P2.5 as analog input
0374 75D805    1323            mov     _InitPinADC_PARM_2,#0x05
0377 758202    1324            mov     dpl,#0x02
037A 120000    1325            lcall   _InitPinADC
037D           1326   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:335: InitPinADC(0, 1);
037D 75D801    1327            mov     _InitPinADC_PARM_2,#0x01
0380 758200    1328            mov     dpl,#0x00
0383 120000    1329            lcall   _InitPinADC
0386           1330   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:336: InitADC();
0386 120000    1331            lcall   _InitADC
0389           1332   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:339: prev_period = 10000;
0389 754800    1333            mov     _main_prev_period_1_77,#0x00
038C 754940    1334            mov     (_main_prev_period_1_77 + 1),#0x40
038F 754A1C    1335            mov     (_main_prev_period_1_77 + 2),#0x1C
0392 754B46    1336            mov     (_main_prev_period_1_77 + 3),#0x46
0395           1337   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:341: while(1)
0395           1338   L018075?:
0395           1339   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:345: ADC0MX=REF_SIGNAL;        // <---- PORT FOR REFERENCE SIGNAL
0395 75BB12    1340            mov     _ADC0MX,#0x12
0398           1341   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:346: ADINT = 0;
0398 C2ED      1342            clr     _ADINT
039A           1343   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:347: ADBUSY=1;
039A D2EC      1344            setb    _ADBUSY
039C           1345   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:348: while (!ADINT);                   // wait for conversion to complete
039C           1346   L018001?:
039C 30EDC0    1347            jnb     _ADINT,L018001?
039F           1348   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:349: while (Get_ADC()!=0);     // wait for signal to be 0
039F           1349   L018004?:
039F 120000    1350            lcall   _Get_ADC
03A2 E582      1351            mov     a,dpl
03A4 8583F0    1352            mov     b,dph
03A7 45F0      1353            orl     a,b
03A9 7000      1354            jnz     L018004?
03AB           1355   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:350: while (Get_ADC()==0);     // wait for signal to be pos            
03AB           1356   L018007?:
03AB 120000    1357            lcall   _Get_ADC
03AE E582      1358            mov     a,dpl
03B0 8583F0    1359            mov     b,dph
03B3 45F0      1360            orl     a,b
03B5 6000      1361            jz      L018007?
03B7           1362   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:351: overflow_count = 0;               // reset timer 
03B7 750800    1363            mov     _overflow_count,#0x00
03BA           1364   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:352: TL0=0;
03BA 758A00    1365            mov     _TL0,#0x00
03BD           1366   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:353: TH0=0;
03BD 758C00    1367            mov     _TH0,#0x00
03C0           1368   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:354: TR0=1; // start timer 0           
03C0 D28C      1369            setb    _TR0
03C2           1370   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:355: while (Get_ADC()!=0){
03C2           1371   L018012?:
03C2 120000    1372            lcall   _Get_ADC
03C5 E582      1373            mov     a,dpl
03C7 8583F0    1374            mov     b,dph
03CA 45F0      1375            orl     a,b
03CC 6000      1376            jz      L018014?
03CE           1377   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:356: if (TF0==1){
03CE           1378   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:357: TF0=0;
03CE 108D00    1379            jbc     _TF0,L018117?
03D1 8000      1380            sjmp    L018012?
03D3           1381   L018117?:
03D3           1382   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:358: overflow_count++;         // count overflows
03D3 0508      1383            inc     _overflow_count
03D5 8000      1384            sjmp    L018012?
03D7           1385   L018014?:
03D7           1386   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:361: TR0=0; // stop timer 0
03D7 C28C      1387            clr     _TR0
03D9           1388   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:362: halfPeriod=(overflow_count*65536.0 + TH0*256.0 + TL0)*(12.0/SYSCLK);      
03D9 850882    1389            mov     dpl,_overflow_count
03DC 120000    1390            lcall   ___uchar2fs
03DF AE82      1391            mov     r6,dpl
03E1 AF83      1392            mov     r7,dph
03E3 A8F0      1393            mov     r0,b
03E5 F9        1394            mov     r1,a
03E6 C006      1395            push    ar6
03E8 C007      1396            push    ar7
03EA C000      1397            push    ar0
03EC C001      1398            push    ar1
03EE 900000    1399            mov     dptr,#0x0000
03F1 75F080    1400            mov     b,#0x80
03F4 7447      1401            mov     a,#0x47
03F6 120000    1402            lcall   ___fsmul
03F9 AE82      1403            mov     r6,dpl
03FB AF83      1404            mov     r7,dph
03FD A8F0      1405            mov     r0,b
03FF F9        1406            mov     r1,a
0400 E581      1407            mov     a,sp
0402 24FC      1408            add     a,#0xfc
0404 F581      1409            mov     sp,a
0406 858C82    1410            mov     dpl,_TH0
0409 C006      1411            push    ar6
040B C007      1412            push    ar7
040D C000      1413            push    ar0
040F C001      1414            push    ar1
0411 120000    1415            lcall   ___uchar2fs
0414 AA82      1416            mov     r2,dpl
0416 AB83      1417            mov     r3,dph
0418 ACF0      1418            mov     r4,b
041A FD        1419            mov     r5,a
041B C002      1420            push    ar2
041D C003      1421            push    ar3
041F C004      1422            push    ar4
0421 C005      1423            push    ar5
0423 900000    1424            mov     dptr,#0x0000
0426 75F080    1425            mov     b,#0x80
0429 7443      1426            mov     a,#0x43
042B 120000    1427            lcall   ___fsmul
042E AA82      1428            mov     r2,dpl
0430 AB83      1429            mov     r3,dph
0432 ACF0      1430            mov     r4,b
0434 FD        1431            mov     r5,a
0435 E581      1432            mov     a,sp
0437 24FC      1433            add     a,#0xfc
0439 F581      1434            mov     sp,a
043B D001      1435            pop     ar1
043D D000      1436            pop     ar0
043F D007      1437            pop     ar7
0441 D006      1438            pop     ar6
0443 C002      1439            push    ar2
0445 C003      1440            push    ar3
0447 C004      1441            push    ar4
0449 C005      1442            push    ar5
044B 8E82      1443            mov     dpl,r6
044D 8F83      1444            mov     dph,r7
044F 88F0      1445            mov     b,r0
0451 E9        1446            mov     a,r1
0452 120000    1447            lcall   ___fsadd
0455 AA82      1448            mov     r2,dpl
0457 AB83      1449            mov     r3,dph
0459 ACF0      1450            mov     r4,b
045B FD        1451            mov     r5,a
045C E581      1452            mov     a,sp
045E 24FC      1453            add     a,#0xfc
0460 F581      1454            mov     sp,a
0462 AE8A      1455            mov     r6,_TL0
0464 7F00      1456            mov     r7,#0x00
0466 8E82      1457            mov     dpl,r6
0468 8F83      1458            mov     dph,r7
046A C002      1459            push    ar2
046C C003      1460            push    ar3
046E C004      1461            push    ar4
0470 C005      1462            push    ar5
0472 120000    1463            lcall   ___sint2fs
0475 AE82      1464            mov     r6,dpl
0477 AF83      1465            mov     r7,dph
0479 A8F0      1466            mov     r0,b
047B F9        1467            mov     r1,a
047C D005      1468            pop     ar5
047E D004      1469            pop     ar4
0480 D003      1470            pop     ar3
0482 D002      1471            pop     ar2
0484 C006      1472            push    ar6
0486 C007      1473            push    ar7
0488 C000      1474            push    ar0
048A C001      1475            push    ar1
048C 8A82      1476            mov     dpl,r2
048E 8B83      1477            mov     dph,r3
0490 8CF0      1478            mov     b,r4
0492 ED        1479            mov     a,r5
0493 120000    1480            lcall   ___fsadd
0496 AA82      1481            mov     r2,dpl
0498 AB83      1482            mov     r3,dph
049A ACF0      1483            mov     r4,b
049C FD        1484            mov     r5,a
049D E581      1485            mov     a,sp
049F 24FC      1486            add     a,#0xfc
04A1 F581      1487            mov     sp,a
04A3 C002      1488            push    ar2
04A5 C003      1489            push    ar3
04A7 C004      1490            push    ar4
04A9 C005      1491            push    ar5
04AB 90F4FC    1492            mov     dptr,#0xF4FC
04AE 75F032    1493            mov     b,#0x32
04B1 7434      1494            mov     a,#0x34
04B3 120000    1495            lcall   ___fsmul
04B6 AA82      1496            mov     r2,dpl
04B8 AB83      1497            mov     r3,dph
04BA ACF0      1498            mov     r4,b
04BC FD        1499            mov     r5,a
04BD E581      1500            mov     a,sp
04BF 24FC      1501            add     a,#0xfc
04C1 F581      1502            mov     sp,a
04C3           1503   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:363: overflow_count = 0;                       // reset timer post count for redundancy
04C3 750800    1504            mov     _overflow_count,#0x00
04C6           1505   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:364: TL0=0;
04C6 758A00    1506            mov     _TL0,#0x00
04C9           1507   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:365: TH0=0;
04C9 758C00    1508            mov     _TH0,#0x00
04CC           1509   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:366: period = 2.0*halfPeriod;          // period & freq calcs
04CC C002      1510            push    ar2
04CE C003      1511            push    ar3
04D0 C004      1512            push    ar4
04D2 C005      1513            push    ar5
04D4 900000    1514            mov     dptr,#(0x00&0x00ff)
04D7 E4        1515            clr     a
04D8 F5F0      1516            mov     b,a
04DA 7440      1517            mov     a,#0x40
04DC 120000    1518            lcall   ___fsmul
04DF 858268    1519            mov     _main_period_1_77,dpl
04E2 858369    1520            mov     (_main_period_1_77 + 1),dph
04E5 85F06A    1521            mov     (_main_period_1_77 + 2),b
04E8 F56B      1522            mov     (_main_period_1_77 + 3),a
04EA E581      1523            mov     a,sp
04EC 24FC      1524            add     a,#0xfc
04EE F581      1525            mov     sp,a
04F0           1526   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:367: if(period <= 0.0002){             // freq never exceeds 5000 Hz, ignore bad ones          
04F0 7417      1527            mov     a,#0x17
04F2 C0E0      1528            push    acc
04F4 74B7      1529            mov     a,#0xB7
04F6 C0E0      1530            push    acc
04F8 7451      1531            mov     a,#0x51
04FA C0E0      1532            push    acc
04FC 7439      1533            mov     a,#0x39
04FE C0E0      1534            push    acc
0500 856882    1535            mov     dpl,_main_period_1_77
0503 856983    1536            mov     dph,(_main_period_1_77 + 1)
0506 856AF0    1537            mov     b,(_main_period_1_77 + 2)
0509 E56B      1538            mov     a,(_main_period_1_77 + 3)
050B 120000    1539            lcall   ___fsgt
050E AE82      1540            mov     r6,dpl
0510 E581      1541            mov     a,sp
0512 24FC      1542            add     a,#0xfc
0514 F581      1543            mov     sp,a
0516 EE        1544            mov     a,r6
0517 7000      1545            jnz     L018016?
0519           1546   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:368: period = prev_period;     // noise correction
0519 854868    1547            mov     _main_period_1_77,_main_prev_period_1_77
051C 854969    1548            mov     (_main_period_1_77 + 1),(_main_prev_period_1_77 + 1)
051F 854A6A    1549            mov     (_main_period_1_77 + 2),(_main_prev_period_1_77 + 2)
0522 854B6B    1550            mov     (_main_period_1_77 + 3),(_main_prev_period_1_77 + 3)
0525 8000      1551            sjmp    L018017?
0527           1552   L018016?:
0527           1553   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:370: prev_period = period;
0527 856848    1554            mov     _main_prev_period_1_77,_main_period_1_77
052A 856949    1555            mov     (_main_prev_period_1_77 + 1),(_main_period_1_77 + 1)
052D 856A4A    1556            mov     (_main_prev_period_1_77 + 2),(_main_period_1_77 + 2)
0530 856B4B    1557            mov     (_main_prev_period_1_77 + 3),(_main_period_1_77 + 3)
0533           1558   L018017?:
0533           1559   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:372: freq = 1.0/period;
0533 C068      1560            push    _main_period_1_77
0535 C069      1561            push    (_main_period_1_77 + 1)
0537 C06A      1562            push    (_main_period_1_77 + 2)
0539 C06B      1563            push    (_main_period_1_77 + 3)
053B 900000    1564            mov     dptr,#0x0000
053E 75F080    1565            mov     b,#0x80
0541 743F      1566            mov     a,#0x3F
0543 120000    1567            lcall   ___fsdiv
0546 8582A8    1568            mov     _main_freq_1_77,dpl
0549 8583A9    1569            mov     (_main_freq_1_77 + 1),dph
054C 85F0AA    1570            mov     (_main_freq_1_77 + 2),b
054F F5AB      1571            mov     (_main_freq_1_77 + 3),a
0551 E581      1572            mov     a,sp
0553 24FC      1573            add     a,#0xfc
0555 F581      1574            mov     sp,a
0557           1575   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:373: quarterPeriod = period/4.0;
0557 E4        1576            clr     a
0558 C0E0      1577            push    acc
055A C0E0      1578            push    acc
055C 7480      1579            mov     a,#0x80
055E C0E0      1580            push    acc
0560 7440      1581            mov     a,#0x40
0562 C0E0      1582            push    acc
0564 856882    1583            mov     dpl,_main_period_1_77
0567 856983    1584            mov     dph,(_main_period_1_77 + 1)
056A 856AF0    1585            mov     b,(_main_period_1_77 + 2)
056D E56B      1586            mov     a,(_main_period_1_77 + 3)
056F 120000    1587            lcall   ___fsdiv
0572 8582F8    1588            mov     _main_quarterPeriod_1_77,dpl
0575 8583F9    1589            mov     (_main_quarterPeriod_1_77 + 1),dph
0578 85F0FA    1590            mov     (_main_quarterPeriod_1_77 + 2),b
057B F5FB      1591            mov     (_main_quarterPeriod_1_77 + 3),a
057D E581      1592            mov     a,sp
057F 24FC      1593            add     a,#0xfc
0581 F581      1594            mov     sp,a
0583           1595   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:376: ADINT = 0;
0583 C2ED      1596            clr     _ADINT
0585           1597   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:377: ADBUSY=1;
0585 D2EC      1598            setb    _ADBUSY
0587           1599   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:378: while (!ADINT);                           // wait for conversion to complete
0587           1600   L018018?:
0587 30EDC0    1601            jnb     _ADINT,L018018?
058A           1602   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:380: while (Get_ADC()!=0);     // wait for signal to be 0
058A           1603   L018021?:
058A 120000    1604            lcall   _Get_ADC
058D E582      1605            mov     a,dpl
058F 8583F0    1606            mov     b,dph
0592 45F0      1607            orl     a,b
0594 7000      1608            jnz     L018021?
0596           1609   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:381: while (Get_ADC()==0);     // wait for signal to be pos
0596           1610   L018024?:
0596 120000    1611            lcall   _Get_ADC
0599 E582      1612            mov     a,dpl
059B 8583F0    1613            mov     b,dph
059E 45F0      1614            orl     a,b
05A0 6000      1615            jz      L018024?
05A2           1616   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:382: Timer3us(20);                     
05A2 758214    1617            mov     dpl,#0x14
05A5 120000    1618            lcall   _Timer3us
05A8           1619   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:383: }while(Get_ADC()==0);             // (**SUPER NECESARY**) check if adc aint lying, mitigates noise
05A8 120000    1620            lcall   _Get_ADC
05AB E582      1621            mov     a,dpl
05AD 8583F0    1622            mov     b,dph
05B0 45F0      1623            orl     a,b
05B2 6000      1624            jz      L018021?
05B4           1625   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:384: wait100us(quarterPeriod*1000*10);
05B4 C0F8      1626            push    _main_quarterPeriod_1_77
05B6 C0F9      1627            push    (_main_quarterPeriod_1_77 + 1)
05B8 C0FA      1628            push    (_main_quarterPeriod_1_77 + 2)
05BA C0FB      1629            push    (_main_quarterPeriod_1_77 + 3)
05BC 904000    1630            mov     dptr,#0x4000
05BF 75F01C    1631            mov     b,#0x1C
05C2 7446      1632            mov     a,#0x46
05C4 120000    1633            lcall   ___fsmul
05C7 AE82      1634            mov     r6,dpl
05C9 AF83      1635            mov     r7,dph
05CB A8F0      1636            mov     r0,b
05CD F9        1637            mov     r1,a
05CE E581      1638            mov     a,sp
05D0 24FC      1639            add     a,#0xfc
05D2 F581      1640            mov     sp,a
05D4 8E82      1641            mov     dpl,r6
05D6 8F83      1642            mov     dph,r7
05D8 88F0      1643            mov     b,r0
05DA E9        1644            mov     a,r1
05DB 120000    1645            lcall   ___fs2ulong
05DE AE82      1646            mov     r6,dpl
05E0 AF83      1647            mov     r7,dph
05E2 A8F0      1648            mov     r0,b
05E4 F9        1649            mov     r1,a
05E5 C006      1650            push    ar6
05E7 C007      1651            push    ar7
05E9 C000      1652            push    ar0
05EB C001      1653            push    ar1
05ED 120000    1654            lcall   _wait100us
05F0           1655   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:385: vrms_ref = Volts_at_Pin(REF_SIGNAL)*0.707106781187; // grabs vmax 1/4 T later from 0-cross
05F0 758212    1656            mov     dpl,#0x12
05F3 120000    1657            lcall   _Volts_at_Pin
05F6 AA82      1658            mov     r2,dpl
05F8 AB83      1659            mov     r3,dph
05FA ACF0      1660            mov     r4,b
05FC FD        1661            mov     r5,a
05FD C002      1662            push    ar2
05FF C003      1663            push    ar3
0601 C004      1664            push    ar4
0603 C005      1665            push    ar5
0605 9004F3    1666            mov     dptr,#0x04F3
0608 75F035    1667            mov     b,#0x35
060B 743F      1668            mov     a,#0x3F
060D 120000    1669            lcall   ___fsmul
0610 8582E8    1670            mov     _main_vrms_ref_1_77,dpl
0613 8583E9    1671            mov     (_main_vrms_ref_1_77 + 1),dph
0616 85F0EA    1672            mov     (_main_vrms_ref_1_77 + 2),b
0619 F5EB      1673            mov     (_main_vrms_ref_1_77 + 3),a
061B E581      1674            mov     a,sp
061D 24FC      1675            add     a,#0xfc
061F F581      1676            mov     sp,a
0621           1677   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:387: waitms(50); // some delay very good
0621 900032    1678            mov     dptr,#0x0032
0624 120000    1679            lcall   _waitms
0627 D001      1680            pop     ar1
0629 D000      1681            pop     ar0
062B D007      1682            pop     ar7
062D D006      1683            pop     ar6
062F           1684   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:390: ADC0MX=SPL_SIGNAL;                        // start tracking SPL signal
062F 75BB11    1685            mov     _ADC0MX,#0x11
0632           1686   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:391: ADINT = 0;
0632 C2ED      1687            clr     _ADINT
0634           1688   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:392: ADBUSY=1;
0634 D2EC      1689            setb    _ADBUSY
0636           1690   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:393: while (!ADINT);                           // wait for conversion to complete
0636           1691   L018030?:
0636 30EDC0    1692            jnb     _ADINT,L018030?
0639           1693   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:395: while (Get_ADC()!=0);     // wait for signal to be 0
0639           1694   L018033?:
0639 C006      1695            push    ar6
063B C007      1696            push    ar7
063D C000      1697            push    ar0
063F C001      1698            push    ar1
0641 120000    1699            lcall   _Get_ADC
0644 E582      1700            mov     a,dpl
0646 8583F0    1701            mov     b,dph
0649 D001      1702            pop     ar1
064B D000      1703            pop     ar0
064D D007      1704            pop     ar7
064F D006      1705            pop     ar6
0651 45F0      1706            orl     a,b
0653 7000      1707            jnz     L018033?
0655           1708   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:396: while (Get_ADC()==0);     // wait for signal to be pos
0655           1709   L018036?:
0655 C006      1710            push    ar6
0657 C007      1711            push    ar7
0659 C000      1712            push    ar0
065B C001      1713            push    ar1
065D 120000    1714            lcall   _Get_ADC
0660 E582      1715            mov     a,dpl
0662 8583F0    1716            mov     b,dph
0665 D001      1717            pop     ar1
0667 D000      1718            pop     ar0
0669 D007      1719            pop     ar7
066B D006      1720            pop     ar6
066D 45F0      1721            orl     a,b
066F 6000      1722            jz      L018036?
0671           1723   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:397: Timer3us(20);
0671 758214    1724            mov     dpl,#0x14
0674 C006      1725            push    ar6
0676 C007      1726            push    ar7
0678 C000      1727            push    ar0
067A C001      1728            push    ar1
067C 120000    1729            lcall   _Timer3us
067F           1730   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:398: }while(Get_ADC()==0);             // check if adc aint lying, mitigates noise
067F 120000    1731            lcall   _Get_ADC
0682 E582      1732            mov     a,dpl
0684 8583F0    1733            mov     b,dph
0687 D001      1734            pop     ar1
0689 D000      1735            pop     ar0
068B D007      1736            pop     ar7
068D D006      1737            pop     ar6
068F 45F0      1738            orl     a,b
0691 6000      1739            jz      L018033?
0693           1740   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:399: wait100us(quarterPeriod*1000*10);
0693 8E82      1741            mov     dpl,r6
0695 8F83      1742            mov     dph,r7
0697 88F0      1743            mov     b,r0
0699 E9        1744            mov     a,r1
069A 120000    1745            lcall   _wait100us
069D           1746   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:400: vrms_spl = Volts_at_Pin(SPL_SIGNAL)*0.707106781187; // grabs vrms 1/4 T later from 0-cross
069D 758211    1747            mov     dpl,#0x11
06A0 120000    1748            lcall   _Volts_at_Pin
06A3 AE82      1749            mov     r6,dpl
06A5 AF83      1750            mov     r7,dph
06A7 A8F0      1751            mov     r0,b
06A9 F9        1752            mov     r1,a
06AA C006      1753            push    ar6
06AC C007      1754            push    ar7
06AE C000      1755            push    ar0
06B0 C001      1756            push    ar1
06B2 9004F3    1757            mov     dptr,#0x04F3
06B5 75F035    1758            mov     b,#0x35
06B8 743F      1759            mov     a,#0x3F
06BA 120000    1760            lcall   ___fsmul
06BD 858298    1761            mov     _main_vrms_spl_1_77,dpl
06C0 858399    1762            mov     (_main_vrms_spl_1_77 + 1),dph
06C3 85F09A    1763            mov     (_main_vrms_spl_1_77 + 2),b
06C6 F59B      1764            mov     (_main_vrms_spl_1_77 + 3),a
06C8 E581      1765            mov     a,sp
06CA 24FC      1766            add     a,#0xfc
06CC F581      1767            mov     sp,a
06CE           1768   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:406: ADINT = 0;
06CE C2ED      1769            clr     _ADINT
06D0           1770   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:407: ADBUSY=1;
06D0 D2EC      1771            setb    _ADBUSY
06D2           1772   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:408: while (!ADINT);                           // wait for adc conversion to complete
06D2           1773   L018042?:
06D2 30ED80    1774            jnb     _ADINT,L018042?
06D5           1775   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:410: while (Get_ADC()!=0);     // wait for 0 cross
06D5           1776   L018045?:
06D5 120000    1777            lcall   _Get_ADC
06D8 E582      1778            mov     a,dpl
06DA 8583F0    1779            mov     b,dph
06DD 45F0      1780            orl     a,b
06DF 7000      1781            jnz     L018045?
06E1           1782   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:411: while (Get_ADC()==0);     
06E1           1783   L018048?:
06E1 120000    1784            lcall   _Get_ADC
06E4 E582      1785            mov     a,dpl
06E6 8583F0    1786            mov     b,dph
06E9 45F0      1787            orl     a,b
06EB 6000      1788            jz      L018048?
06ED           1789   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:412: Timer3us(20);
06ED 758214    1790            mov     dpl,#0x14
06F0 120000    1791            lcall   _Timer3us
06F3           1792   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:413: }while(Get_ADC()==0);
06F3 120000    1793            lcall   _Get_ADC
06F6 E582      1794            mov     a,dpl
06F8 8583F0    1795            mov     b,dph
06FB 45F0      1796            orl     a,b
06FD 6000      1797            jz      L018045?
06FF           1798   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:416: overflow_count = 0;
06FF 750800    1799            mov     _overflow_count,#0x00
0702           1800   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:418: TL0=0;                                    // clear timer 0
0702 758A00    1801            mov     _TL0,#0x00
0705           1802   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:419: TH0=0;
0705 758C00    1803            mov     _TH0,#0x00
0708           1804   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:420: TR0=1;                                    // start timer 0
0708 D28C      1805            setb    _TR0
070A           1806   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:421: P0_0 = 1;
070A D280      1807            setb    _P0_0
070C           1808   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:424: ADC0MX=REF_SIGNAL;                        // start tracking REF signal
070C 75BB12    1809            mov     _ADC0MX,#0x12
070F           1810   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:425: ADINT = 0;
070F C2ED      1811            clr     _ADINT
0711           1812   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:426: ADBUSY=1;
0711 D2EC      1813            setb    _ADBUSY
0713           1814   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:427: while (!ADINT);                           // wait for adc conversion to complete
0713           1815   L018054?:
0713 30ED40    1816            jnb     _ADINT,L018054?
0716           1817   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:429: while (Get_ADC()!=0);             // wait for REF signal to be 0
0716           1818   L018057?:
0716 120000    1819            lcall   _Get_ADC
0719 E582      1820            mov     a,dpl
071B 8583F0    1821            mov     b,dph
071E 45F0      1822            orl     a,b
0720 7000      1823            jnz     L018057?
0722           1824   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:430: while (Get_ADC()==0){             // wait for REF signal to be positive
0722           1825   L018062?:
0722 120000    1826            lcall   _Get_ADC
0725 E582      1827            mov     a,dpl
0727 8583F0    1828            mov     b,dph
072A 45F0      1829            orl     a,b
072C 7000      1830            jnz     L018064?
072E           1831   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:431: if (TF0==1){
072E           1832   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:432: TF0=0;
072E 108D40    1833            jbc     _TF0,L018134?
0731 8000      1834            sjmp    L018062?
0733           1835   L018134?:
0733           1836   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:433: overflow_count++;         // count overflows
0733 0508      1837            inc     _overflow_count
0735 8000      1838            sjmp    L018062?
0737           1839   L018064?:
0737           1840   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:436: Timer3us(20);
0737 758214    1841            mov     dpl,#0x14
073A 120000    1842            lcall   _Timer3us
073D           1843   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:437: }while(Get_ADC()==0); // Check if REALLYMREALLYM POSITIVE!!!!!!!! :DDDDDD
073D 120000    1844            lcall   _Get_ADC
0740 E582      1845            mov     a,dpl
0742 8583F0    1846            mov     b,dph
0745 45F0      1847            orl     a,b
0747 6000      1848            jz      L018057?
0749           1849   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:441: TR0=0; // stop timer 0    
0749 C28C      1850            clr     _TR0
074B           1851   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:442: P0_0 = 0;
074B C280      1852            clr     _P0_0
074D           1853   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:443: phase_diff_time = (overflow_count*65536.0 + TH0*256.0 + TL0)*(12.0/SYSCLK) + 0.00002; 
074D 850882    1854            mov     dpl,_overflow_count
0750 120000    1855            lcall   ___uchar2fs
0753 AE82      1856            mov     r6,dpl
0755 AF83      1857            mov     r7,dph
0757 A8F0      1858            mov     r0,b
0759 F9        1859            mov     r1,a
075A C006      1860            push    ar6
075C C007      1861            push    ar7
075E C000      1862            push    ar0
0760 C001      1863            push    ar1
0762 900000    1864            mov     dptr,#0x0000
0765 75F080    1865            mov     b,#0x80
0768 7447      1866            mov     a,#0x47
076A 120000    1867            lcall   ___fsmul
076D AE82      1868            mov     r6,dpl
076F AF83      1869            mov     r7,dph
0771 A8F0      1870            mov     r0,b
0773 F9        1871            mov     r1,a
0774 E581      1872            mov     a,sp
0776 24FC      1873            add     a,#0xfc
0778 F581      1874            mov     sp,a
077A 858C82    1875            mov     dpl,_TH0
077D C006      1876            push    ar6
077F C007      1877            push    ar7
0781 C000      1878            push    ar0
0783 C001      1879            push    ar1
0785 120000    1880            lcall   ___uchar2fs
0788 AA82      1881            mov     r2,dpl
078A AB83      1882            mov     r3,dph
078C ACF0      1883            mov     r4,b
078E FD        1884            mov     r5,a
078F C002      1885            push    ar2
0791 C003      1886            push    ar3
0793 C004      1887            push    ar4
0795 C005      1888            push    ar5
0797 900000    1889            mov     dptr,#0x0000
079A 75F080    1890            mov     b,#0x80
079D 7443      1891            mov     a,#0x43
079F 120000    1892            lcall   ___fsmul
07A2 AA82      1893            mov     r2,dpl
07A4 AB83      1894            mov     r3,dph
07A6 ACF0      1895            mov     r4,b
07A8 FD        1896            mov     r5,a
07A9 E581      1897            mov     a,sp
07AB 24FC      1898            add     a,#0xfc
07AD F581      1899            mov     sp,a
07AF D001      1900            pop     ar1
07B1 D000      1901            pop     ar0
07B3 D007      1902            pop     ar7
07B5 D006      1903            pop     ar6
07B7 C002      1904            push    ar2
07B9 C003      1905            push    ar3
07BB C004      1906            push    ar4
07BD C005      1907            push    ar5
07BF 8E82      1908            mov     dpl,r6
07C1 8F83      1909            mov     dph,r7
07C3 88F0      1910            mov     b,r0
07C5 E9        1911            mov     a,r1
07C6 120000    1912            lcall   ___fsadd
07C9 AA82      1913            mov     r2,dpl
07CB AB83      1914            mov     r3,dph
07CD ACF0      1915            mov     r4,b
07CF FD        1916            mov     r5,a
07D0 E581      1917            mov     a,sp
07D2 24FC      1918            add     a,#0xfc
07D4 F581      1919            mov     sp,a
07D6 AE8A      1920            mov     r6,_TL0
07D8 7F00      1921            mov     r7,#0x00
07DA 8E82      1922            mov     dpl,r6
07DC 8F83      1923            mov     dph,r7
07DE C002      1924            push    ar2
07E0 C003      1925            push    ar3
07E2 C004      1926            push    ar4
07E4 C005      1927            push    ar5
07E6 120000    1928            lcall   ___sint2fs
07E9 AE82      1929            mov     r6,dpl
07EB AF83      1930            mov     r7,dph
07ED A8F0      1931            mov     r0,b
07EF F9        1932            mov     r1,a
07F0 D005      1933            pop     ar5
07F2 D004      1934            pop     ar4
07F4 D003      1935            pop     ar3
07F6 D002      1936            pop     ar2
07F8 C006      1937            push    ar6
07FA C007      1938            push    ar7
07FC C000      1939            push    ar0
07FE C001      1940            push    ar1
0800 8A82      1941            mov     dpl,r2
0802 8B83      1942            mov     dph,r3
0804 8CF0      1943            mov     b,r4
0806 ED        1944            mov     a,r5
0807 120000    1945            lcall   ___fsadd
080A AA82      1946            mov     r2,dpl
080C AB83      1947            mov     r3,dph
080E ACF0      1948            mov     r4,b
0810 FD        1949            mov     r5,a
0811 E581      1950            mov     a,sp
0813 24FC      1951            add     a,#0xfc
0815 F581      1952            mov     sp,a
0817 C002      1953            push    ar2
0819 C003      1954            push    ar3
081B C004      1955            push    ar4
081D C005      1956            push    ar5
081F 90F4FC    1957            mov     dptr,#0xF4FC
0822 75F032    1958            mov     b,#0x32
0825 7434      1959            mov     a,#0x34
0827 120000    1960            lcall   ___fsmul
082A AA82      1961            mov     r2,dpl
082C AB83      1962            mov     r3,dph
082E ACF0      1963            mov     r4,b
0830 FD        1964            mov     r5,a
0831 E581      1965            mov     a,sp
0833 24FC      1966            add     a,#0xfc
0835 F581      1967            mov     sp,a
0837 74AC      1968            mov     a,#0xAC
0839 C0E0      1969            push    acc
083B 74C5      1970            mov     a,#0xC5
083D C0E0      1971            push    acc
083F 74A7      1972            mov     a,#0xA7
0841 C0E0      1973            push    acc
0843 7437      1974            mov     a,#0x37
0845 C0E0      1975            push    acc
0847 8A82      1976            mov     dpl,r2
0849 8B83      1977            mov     dph,r3
084B 8CF0      1978            mov     b,r4
084D ED        1979            mov     a,r5
084E 120000    1980            lcall   ___fsadd
0851 858238    1981            mov     _main_phase_diff_time_1_77,dpl
0854 858339    1982            mov     (_main_phase_diff_time_1_77 + 1),dph
0857 85F03A    1983            mov     (_main_phase_diff_time_1_77 + 2),b
085A F53B      1984            mov     (_main_phase_diff_time_1_77 + 3),a
085C E581      1985            mov     a,sp
085E 24FC      1986            add     a,#0xfc
0860 F581      1987            mov     sp,a
0862           1988   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:446: phase_diff_deg = (phase_diff_time * 360)/period;
0862 C038      1989            push    _main_phase_diff_time_1_77
0864 C039      1990            push    (_main_phase_diff_time_1_77 + 1)
0866 C03A      1991            push    (_main_phase_diff_time_1_77 + 2)
0868 C03B      1992            push    (_main_phase_diff_time_1_77 + 3)
086A 900000    1993            mov     dptr,#0x0000
086D 75F0B4    1994            mov     b,#0xB4
0870 7443      1995            mov     a,#0x43
0872 120000    1996            lcall   ___fsmul
0875 AE82      1997            mov     r6,dpl
0877 AF83      1998            mov     r7,dph
0879 A8F0      1999            mov     r0,b
087B F9        2000            mov     r1,a
087C E581      2001            mov     a,sp
087E 24FC      2002            add     a,#0xfc
0880 F581      2003            mov     sp,a
0882 C068      2004            push    _main_period_1_77
0884 C069      2005            push    (_main_period_1_77 + 1)
0886 C06A      2006            push    (_main_period_1_77 + 2)
0888 C06B      2007            push    (_main_period_1_77 + 3)
088A 8E82      2008            mov     dpl,r6
088C 8F83      2009            mov     dph,r7
088E 88F0      2010            mov     b,r0
0890 E9        2011            mov     a,r1
0891 120000    2012            lcall   ___fsdiv
0894 AE82      2013            mov     r6,dpl
0896 AF83      2014            mov     r7,dph
0898 A8F0      2015            mov     r0,b
089A F9        2016            mov     r1,a
089B E581      2017            mov     a,sp
089D 24FC      2018            add     a,#0xfc
089F F581      2019            mov     sp,a
08A1           2020   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:447: TL0=0;
08A1 758A00    2021            mov     _TL0,#0x00
08A4           2022   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:448: TH0=0;
08A4 758C00    2023            mov     _TH0,#0x00
08A7           2024   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:449: overflow_count = 0;       // stop timer
08A7 750800    2025            mov     _overflow_count,#0x00
08AA           2026   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:452: while(phase_diff_deg < -180){
08AA           2027   L018068?:
08AA C006      2028            push    ar6
08AC C007      2029            push    ar7
08AE C000      2030            push    ar0
08B0 C001      2031            push    ar1
08B2 E4        2032            clr     a
08B3 C0E0      2033            push    acc
08B5 C0E0      2034            push    acc
08B7 7434      2035            mov     a,#0x34
08B9 C0E0      2036            push    acc
08BB 74C3      2037            mov     a,#0xC3
08BD C0E0      2038            push    acc
08BF 8E82      2039            mov     dpl,r6
08C1 8F83      2040            mov     dph,r7
08C3 88F0      2041            mov     b,r0
08C5 E9        2042            mov     a,r1
08C6 120000    2043            lcall   ___fslt
08C9 AA82      2044            mov     r2,dpl
08CB E581      2045            mov     a,sp
08CD 24FC      2046            add     a,#0xfc
08CF F581      2047            mov     sp,a
08D1 D001      2048            pop     ar1
08D3 D000      2049            pop     ar0
08D5 D007      2050            pop     ar7
08D7 D006      2051            pop     ar6
08D9 EA        2052            mov     a,r2
08DA 6000      2053            jz      L018071?
08DC           2054   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:453: phase_diff_deg += 360;
08DC E4        2055            clr     a
08DD C0E0      2056            push    acc
08DF C0E0      2057            push    acc
08E1 74B4      2058            mov     a,#0xB4
08E3 C0E0      2059            push    acc
08E5 7443      2060            mov     a,#0x43
08E7 C0E0      2061            push    acc
08E9 8E82      2062            mov     dpl,r6
08EB 8F83      2063            mov     dph,r7
08ED 88F0      2064            mov     b,r0
08EF E9        2065            mov     a,r1
08F0 120000    2066            lcall   ___fsadd
08F3 AE82      2067            mov     r6,dpl
08F5 AF83      2068            mov     r7,dph
08F7 A8F0      2069            mov     r0,b
08F9 F9        2070            mov     r1,a
08FA E581      2071            mov     a,sp
08FC 24FC      2072            add     a,#0xfc
08FE F581      2073            mov     sp,a
0900           2074   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:458: while(phase_diff_deg > 180){
0900 8000      2075            sjmp    L018068?
0902           2076   L018071?:
0902 C006      2077            push    ar6
0904 C007      2078            push    ar7
0906 C000      2079            push    ar0
0908 C001      2080            push    ar1
090A E4        2081            clr     a
090B C0E0      2082            push    acc
090D C0E0      2083            push    acc
090F 7434      2084            mov     a,#0x34
0911 C0E0      2085            push    acc
0913 7443      2086            mov     a,#0x43
0915 C0E0      2087            push    acc
0917 8E82      2088            mov     dpl,r6
0919 8F83      2089            mov     dph,r7
091B 88F0      2090            mov     b,r0
091D E9        2091            mov     a,r1
091E 120000    2092            lcall   ___fsgt
0921 AA82      2093            mov     r2,dpl
0923 E581      2094            mov     a,sp
0925 24FC      2095            add     a,#0xfc
0927 F581      2096            mov     sp,a
0929 D001      2097            pop     ar1
092B D000      2098            pop     ar0
092D D007      2099            pop     ar7
092F D006      2100            pop     ar6
0931 EA        2101            mov     a,r2
0932 6000      2102            jz      L018073?
0934           2103   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:459: phase_diff_deg -= 360;
0934 E4        2104            clr     a
0935 C0E0      2105            push    acc
0937 C0E0      2106            push    acc
0939 74B4      2107            mov     a,#0xB4
093B C0E0      2108            push    acc
093D 7443      2109            mov     a,#0x43
093F C0E0      2110            push    acc
0941 8E82      2111            mov     dpl,r6
0943 8F83      2112            mov     dph,r7
0945 88F0      2113            mov     b,r0
0947 E9        2114            mov     a,r1
0948 120000    2115            lcall   ___fssub
094B AE82      2116            mov     r6,dpl
094D AF83      2117            mov     r7,dph
094F A8F0      2118            mov     r0,b
0951 F9        2119            mov     r1,a
0952 E581      2120            mov     a,sp
0954 24FC      2121            add     a,#0xfc
0956 F581      2122            mov     sp,a
0958 8000      2123            sjmp    L018071?
095A           2124   L018073?:
095A           2125   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:468: printf("Period(T):  %7.6f ms  Freq(f):  %7.6f s \n",period*1000, freq);
095A C006      2126            push    ar6
095C C007      2127            push    ar7
095E C000      2128            push    ar0
0960 C001      2129            push    ar1
0962 C068      2130            push    _main_period_1_77
0964 C069      2131            push    (_main_period_1_77 + 1)
0966 C06A      2132            push    (_main_period_1_77 + 2)
0968 C06B      2133            push    (_main_period_1_77 + 3)
096A 900000    2134            mov     dptr,#0x0000
096D 75F07A    2135            mov     b,#0x7A
0970 7444      2136            mov     a,#0x44
0972 120000    2137            lcall   ___fsmul
0975 AA82      2138            mov     r2,dpl
0977 AB83      2139            mov     r3,dph
0979 ACF0      2140            mov     r4,b
097B FD        2141            mov     r5,a
097C E581      2142            mov     a,sp
097E 24FC      2143            add     a,#0xfc
0980 F581      2144            mov     sp,a
0982 C0A8      2145            push    _main_freq_1_77
0984 C0A9      2146            push    (_main_freq_1_77 + 1)
0986 C0AA      2147            push    (_main_freq_1_77 + 2)
0988 C0AB      2148            push    (_main_freq_1_77 + 3)
098A C002      2149            push    ar2
098C C003      2150            push    ar3
098E C004      2151            push    ar4
0990 C005      2152            push    ar5
0992 74C0      2153            mov     a,#__str_5
0994 C0E0      2154            push    acc
0996 74C9      2155            mov     a,#(__str_5 >> 8)
0998 C0E0      2156            push    acc
099A 7480      2157            mov     a,#0x80
099C C0E0      2158            push    acc
099E 120000    2159            lcall   _printf
09A1 E581      2160            mov     a,sp
09A3 24F5      2161            add     a,#0xf5
09A5 F581      2162            mov     sp,a
09A7           2163   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:469: printf("1/4 Period: %7.6f ms\n", quarterPeriod*1000);
09A7 C0F8      2164            push    _main_quarterPeriod_1_77
09A9 C0F9      2165            push    (_main_quarterPeriod_1_77 + 1)
09AB C0FA      2166            push    (_main_quarterPeriod_1_77 + 2)
09AD C0FB      2167            push    (_main_quarterPeriod_1_77 + 3)
09AF 900000    2168            mov     dptr,#0x0000
09B2 75F07A    2169            mov     b,#0x7A
09B5 7444      2170            mov     a,#0x44
09B7 120000    2171            lcall   ___fsmul
09BA AA82      2172            mov     r2,dpl
09BC AB83      2173            mov     r3,dph
09BE ACF0      2174            mov     r4,b
09C0 FD        2175            mov     r5,a
09C1 E581      2176            mov     a,sp
09C3 24FC      2177            add     a,#0xfc
09C5 F581      2178            mov     sp,a
09C7 C002      2179            push    ar2
09C9 C003      2180            push    ar3
09CB C004      2181            push    ar4
09CD C005      2182            push    ar5
09CF 7400      2183            mov     a,#__str_6
09D1 C0E0      2184            push    acc
09D3 74CA      2185            mov     a,#(__str_6 >> 8)
09D5 C0E0      2186            push    acc
09D7 7480      2187            mov     a,#0x80
09D9 C0E0      2188            push    acc
09DB 120000    2189            lcall   _printf
09DE E581      2190            mov     a,sp
09E0 24F9      2191            add     a,#0xf9
09E2 F581      2192            mov     sp,a
09E4           2193   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:470: printf("Vrms (ref):  %4.4f V  Vrms (spl): %4.4f V \n",vrms_ref, vrms_spl);
09E4 C098      2194            push    _main_vrms_spl_1_77
09E6 C099      2195            push    (_main_vrms_spl_1_77 + 1)
09E8 C09A      2196            push    (_main_vrms_spl_1_77 + 2)
09EA C09B      2197            push    (_main_vrms_spl_1_77 + 3)
09EC C0E8      2198            push    _main_vrms_ref_1_77
09EE C0E9      2199            push    (_main_vrms_ref_1_77 + 1)
09F0 C0EA      2200            push    (_main_vrms_ref_1_77 + 2)
09F2 C0EB      2201            push    (_main_vrms_ref_1_77 + 3)
09F4 7440      2202            mov     a,#__str_7
09F6 C0E0      2203            push    acc
09F8 74CA      2204            mov     a,#(__str_7 >> 8)
09FA C0E0      2205            push    acc
09FC 7480      2206            mov     a,#0x80
09FE C0E0      2207            push    acc
0A00 120000    2208            lcall   _printf
0A03 E581      2209            mov     a,sp
0A05 24F5      2210            add     a,#0xf5
0A07 F581      2211            mov     sp,a
0A09 D001      2212            pop     ar1
0A0B D000      2213            pop     ar0
0A0D D007      2214            pop     ar7
0A0F D006      2215            pop     ar6
0A11           2216   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:471: printf("Phase Difference: %7.6f degrees  Phase diff time: %7.6f s \n", phase_diff_deg, phase_diff_time);
0A11 C038      2217            push    _main_phase_diff_time_1_77
0A13 C039      2218            push    (_main_phase_diff_time_1_77 + 1)
0A15 C03A      2219            push    (_main_phase_diff_time_1_77 + 2)
0A17 C03B      2220            push    (_main_phase_diff_time_1_77 + 3)
0A19 C006      2221            push    ar6
0A1B C007      2222            push    ar7
0A1D C000      2223            push    ar0
0A1F C001      2224            push    ar1
0A21 7480      2225            mov     a,#__str_8
0A23 C0E0      2226            push    acc
0A25 74CA      2227            mov     a,#(__str_8 >> 8)
0A27 C0E0      2228            push    acc
0A29 7480      2229            mov     a,#0x80
0A2B C0E0      2230            push    acc
0A2D 120000    2231            lcall   _printf
0A30 E581      2232            mov     a,sp
0A32 24F5      2233            add     a,#0xf5
0A34 F581      2234            mov     sp,a
0A36           2235   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:473: printf("\033[A");
0A36 74C0      2236            mov     a,#__str_9
0A38 C0E0      2237            push    acc
0A3A 74CA      2238            mov     a,#(__str_9 >> 8)
0A3C C0E0      2239            push    acc
0A3E 7480      2240            mov     a,#0x80
0A40 C0E0      2241            push    acc
0A42 120000    2242            lcall   _printf
0A45 1581      2243            dec     sp
0A47 1581      2244            dec     sp
0A49 1581      2245            dec     sp
0A4B           2246   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:474: printf("\033[A");
0A4B 74C0      2247            mov     a,#__str_9
0A4D C0E0      2248            push    acc
0A4F 74CA      2249            mov     a,#(__str_9 >> 8)
0A51 C0E0      2250            push    acc
0A53 7480      2251            mov     a,#0x80
0A55 C0E0      2252            push    acc
0A57 120000    2253            lcall   _printf
0A5A 1581      2254            dec     sp
0A5C 1581      2255            dec     sp
0A5E 1581      2256            dec     sp
0A60           2257   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:475: printf("\033[A");
0A60 74C0      2258            mov     a,#__str_9
0A62 C0E0      2259            push    acc
0A64 74CA      2260            mov     a,#(__str_9 >> 8)
0A66 C0E0      2261            push    acc
0A68 7480      2262            mov     a,#0x80
0A6A C0E0      2263            push    acc
0A6C 120000    2264            lcall   _printf
0A6F 1581      2265            dec     sp
0A71 1581      2266            dec     sp
0A73 1581      2267            dec     sp
0A75           2268   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:476: printf("\033[A");
0A75 74C0      2269            mov     a,#__str_9
0A77 C0E0      2270            push    acc
0A79 74CA      2271            mov     a,#(__str_9 >> 8)
0A7B C0E0      2272            push    acc
0A7D 7480      2273            mov     a,#0x80
0A7F C0E0      2274            push    acc
0A81 120000    2275            lcall   _printf
0A84 1581      2276            dec     sp
0A86 1581      2277            dec     sp
0A88 1581      2278            dec     sp
0A8A           2279   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:479: sprintf(buffer,"Rf:%2d Sp:%2d Hz",(int)freq%1000, (int)freq%1000);
0A8A 85A882    2280            mov     dpl,_main_freq_1_77
0A8D 85A983    2281            mov     dph,(_main_freq_1_77 + 1)
0A90 85AAF0    2282            mov     b,(_main_freq_1_77 + 2)
0A93 E5AB      2283            mov     a,(_main_freq_1_77 + 3)
0A95 120000    2284            lcall   ___fs2sint
0A98 7500E8    2285            mov     __modsint_PARM_2,#0xE8
0A9B 750103    2286            mov     (__modsint_PARM_2 + 1),#0x03
0A9E 120000    2287            lcall   __modsint
0AA1 AA82      2288            mov     r2,dpl
0AA3 AB83      2289            mov     r3,dph
0AA5 C002      2290            push    ar2
0AA7 C003      2291            push    ar3
0AA9 C002      2292            push    ar2
0AAB C003      2293            push    ar3
0AAD 74D0      2294            mov     a,#__str_10
0AAF C0E0      2295            push    acc
0AB1 74CB      2296            mov     a,#(__str_10 >> 8)
0AB3 C0E0      2297            push    acc
0AB5 7480      2298            mov     a,#0x80
0AB7 C0E0      2299            push    acc
0AB9 7418      2300            mov     a,#_main_buffer_1_77
0ABB C0E0      2301            push    acc
0ABD 74B4      2302            mov     a,#(_main_buffer_1_77 >> 8)
0ABF C0E0      2303            push    acc
0AC1 7440      2304            mov     a,#0x40
0AC3 C0E0      2305            push    acc
0AC5 120000    2306            lcall   _sprintf
0AC8 E581      2307            mov     a,sp
0ACA 24F6      2308            add     a,#0xf6
0ACC F581      2309            mov     sp,a
0ACE           2310   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:480: LCDprint(buffer,1,1);
0ACE 75C801    2311            mov     _LCDprint_PARM_2,#0x01
0AD1 D278      2312            setb    _LCDprint_PARM_3
0AD3 90B418    2313            mov     dptr,#_main_buffer_1_77
0AD6 75F040    2314            mov     b,#0x40
0AD9 120000    2315            lcall   _LCDprint
0ADC           2316   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:482: sprintf(buffer,"Vr:%4.4f V",vrms_ref);
0ADC C0E8      2317            push    _main_vrms_ref_1_77
0ADE C0E9      2318            push    (_main_vrms_ref_1_77 + 1)
0AE0 C0EA      2319            push    (_main_vrms_ref_1_77 + 2)
0AE2 C0EB      2320            push    (_main_vrms_ref_1_77 + 3)
0AE4 7450      2321            mov     a,#__str_11
0AE6 C0E0      2322            push    acc
0AE8 74CC      2323            mov     a,#(__str_11 >> 8)
0AEA C0E0      2324            push    acc
0AEC 7480      2325            mov     a,#0x80
0AEE C0E0      2326            push    acc
0AF0 7418      2327            mov     a,#_main_buffer_1_77
0AF2 C0E0      2328            push    acc
0AF4 74B4      2329            mov     a,#(_main_buffer_1_77 >> 8)
0AF6 C0E0      2330            push    acc
0AF8 7440      2331            mov     a,#0x40
0AFA C0E0      2332            push    acc
0AFC 120000    2333            lcall   _sprintf
0AFF E581      2334            mov     a,sp
0B01 24F6      2335            add     a,#0xf6
0B03 F581      2336            mov     sp,a
0B05           2337   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:483: LCDprint(buffer,2,1);
0B05 75C802    2338            mov     _LCDprint_PARM_2,#0x02
0B08 D278      2339            setb    _LCDprint_PARM_3
0B0A 90B418    2340            mov     dptr,#_main_buffer_1_77
0B0D 75F040    2341            mov     b,#0x40
0B10 120000    2342            lcall   _LCDprint
0B13           2343   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:484: waitms(500);
0B13 9001F4    2344            mov     dptr,#0x01F4
0B16 120000    2345            lcall   _waitms
0B19 020000    2346            ljmp    L018075?
0B1C           2347            rseg R_CSEG
0B1C           2348   
0000           2349            rseg R_XINIT
0000           2350   
0000           2351            rseg R_CONST
0000           2352   __str_0:
0000 1B        2353            db 0x1B
0001 5B324A    2354            db '[2J'
0004 00        2355            db 0x00
0005           2356   __str_1:
0005 41444320  2357            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        2358            db 0x0A
0016 46696C65  2359            db 'File: %s'
     3A202573
001E 0A        2360            db 0x0A
001F 436F6D70  2361            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        2362            db 0x0A
0030 0A        2363            db 0x0A
0031 00        2364            db 0x00
0032           2365   __str_2:
0032 433A      2366            db 'C:'
0034 5C        2367            db 0x5C
0035 55736572  2368            db 'Users'
     73
003A 5C        2369            db 0x5C
003B 636F7372  2370            db 'cosr3'
     33
0040 5C        2371            db 0x5C
0041 446F6375  2372            db 'Documents'
     6D656E74
     73
004A 5C        2373            db 0x5C
004B 47697448  2374            db 'GitHub'
     7562
0051 5C        2375            db 0x5C
0052 454C4543  2376            db 'ELEC-291-Lab5'
     2D323931
     2D4C6162
     35
005F 5C        2377            db 0x5C
0060 45464D38  2378            db 'EFM8_ADC.c'
     5F414443
     2E63
006A 00        2379            db 0x00
006B           2380   __str_3:
006B 4D617220  2381            db 'Mar  5 2024'
     20352032
     303234
0076 00        2382            db 0x00
0077           2383   __str_4:
0077 30343A31  2384            db '04:10:00'
     303A3030
007F 00        2385            db 0x00
0080           2386   __str_5:
0080 50657269  2387            db 'Period(T):  %7.6f ms  Freq(f):  %7.6f s '
     6F642854
     293A2020
     25372E36
     66206D73
     20204672
     65712866
     293A2020
     25372E36
     66207320
00A8 0A        2388            db 0x0A
00A9 00        2389            db 0x00
00AA           2390   __str_6:
00AA 312F3420  2391            db '1/4 Period: %7.6f ms'
     50657269
     6F643A20
     25372E36
     66206D73
00BE 0A        2392            db 0x0A
00BF 00        2393            db 0x00
00C0           2394   __str_7:
00C0 56726D73  2395            db 'Vrms (ref):  %4.4f V  Vrms (spl): %4.4f V '
     20287265
     66293A20
     2025342E
     34662056
     20205672
     6D732028
     73706C29
     3A202534
     2E346620
     5620
00EA 0A        2396            db 0x0A
00EB 00        2397            db 0x00
00EC           2398   __str_8:
00EC 50686173  2399            db 'Phase Difference: %7.6f degrees  Phase diff time: %7.6f s '
     65204469
     66666572
     656E6365
     3A202537
     2E366620
     64656772
     65657320
     20506861
     73652064
     69666620
     74696D65
     3A202537
     2E366620
     7320
0126 0A        2400            db 0x0A
0127 00        2401            db 0x00
0128           2402   __str_9:
0128 1B        2403            db 0x1B
0129 5B41      2404            db '[A'
012B 00        2405            db 0x00
012C           2406   __str_10:
012C 52663A25  2407            db 'Rf:%2d Sp:%2d Hz'
     32642053
     703A2532
     6420487A
013C 00        2408            db 0x00
013D           2409   __str_11:
013D 56723A25  2410            db 'Vr:%4.4f V'
     342E3466
     2056
0147 00        2411            db 0x00
0148           2412   
0003           2413            CSEG
0003           2414   
0003           2415   end
