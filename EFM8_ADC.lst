0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 07 15:55:11 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Get_ADC
0000             30            public _LCDprint
0000             31            public _LCD_4BIT
0000             32            public _WriteCommand
0000             33            public _WriteData
0000             34            public _LCD_byte
0000             35            public _LCD_pulse
0000             36            public _Volts_at_Pin
0000             37            public _ADC_at_Pin
0000             38            public _InitPinADC
0000             39            public _TIMER0_Init
0000             40            public _wait100us
0000             41            public _waitms
0000             42            public _Timer3us
0000             43            public _InitADC
0000             44            public __c51_external_startup
0000             45            public _LCDprint_PARM_3
0000             46            public _LCDprint_PARM_2
0000             47            public _overflow_count
0000             48   ;--------------------------------------------------------
0000             49   ; Special Function Registers
0000             50   ;--------------------------------------------------------
0000             51   _ACC            DATA 0xe0
0000             52   _ADC0ASAH       DATA 0xb6
0000             53   _ADC0ASAL       DATA 0xb5
0000             54   _ADC0ASCF       DATA 0xa1
0000             55   _ADC0ASCT       DATA 0xc7
0000             56   _ADC0CF0        DATA 0xbc
0000             57   _ADC0CF1        DATA 0xb9
0000             58   _ADC0CF2        DATA 0xdf
0000             59   _ADC0CN0        DATA 0xe8
0000             60   _ADC0CN1        DATA 0xb2
0000             61   _ADC0CN2        DATA 0xb3
0000             62   _ADC0GTH        DATA 0xc4
0000             63   _ADC0GTL        DATA 0xc3
0000             64   _ADC0H          DATA 0xbe
0000             65   _ADC0L          DATA 0xbd
0000             66   _ADC0LTH        DATA 0xc6
0000             67   _ADC0LTL        DATA 0xc5
0000             68   _ADC0MX         DATA 0xbb
0000             69   _B              DATA 0xf0
0000             70   _CKCON0         DATA 0x8e
0000             71   _CKCON1         DATA 0xa6
0000             72   _CLEN0          DATA 0xc6
0000             73   _CLIE0          DATA 0xc7
0000             74   _CLIF0          DATA 0xe8
0000             75   _CLKSEL         DATA 0xa9
0000             76   _CLOUT0         DATA 0xd1
0000             77   _CLU0CF         DATA 0xb1
0000             78   _CLU0FN         DATA 0xaf
0000             79   _CLU0MX         DATA 0x84
0000             80   _CLU1CF         DATA 0xb3
0000             81   _CLU1FN         DATA 0xb2
0000             82   _CLU1MX         DATA 0x85
0000             83   _CLU2CF         DATA 0xb6
0000             84   _CLU2FN         DATA 0xb5
0000             85   _CLU2MX         DATA 0x91
0000             86   _CLU3CF         DATA 0xbf
0000             87   _CLU3FN         DATA 0xbe
0000             88   _CLU3MX         DATA 0xae
0000             89   _CMP0CN0        DATA 0x9b
0000             90   _CMP0CN1        DATA 0x99
0000             91   _CMP0MD         DATA 0x9d
0000             92   _CMP0MX         DATA 0x9f
0000             93   _CMP1CN0        DATA 0xbf
0000             94   _CMP1CN1        DATA 0xac
0000             95   _CMP1MD         DATA 0xab
0000             96   _CMP1MX         DATA 0xaa
0000             97   _CRC0CN0        DATA 0xce
0000             98   _CRC0CN1        DATA 0x86
0000             99   _CRC0CNT        DATA 0xd3
0000            100   _CRC0DAT        DATA 0xcb
0000            101   _CRC0FLIP       DATA 0xcf
0000            102   _CRC0IN         DATA 0xca
0000            103   _CRC0ST         DATA 0xd2
0000            104   _DAC0CF0        DATA 0x91
0000            105   _DAC0CF1        DATA 0x92
0000            106   _DAC0H          DATA 0x85
0000            107   _DAC0L          DATA 0x84
0000            108   _DAC1CF0        DATA 0x93
0000            109   _DAC1CF1        DATA 0x94
0000            110   _DAC1H          DATA 0x8a
0000            111   _DAC1L          DATA 0x89
0000            112   _DAC2CF0        DATA 0x95
0000            113   _DAC2CF1        DATA 0x96
0000            114   _DAC2H          DATA 0x8c
0000            115   _DAC2L          DATA 0x8b
0000            116   _DAC3CF0        DATA 0x9a
0000            117   _DAC3CF1        DATA 0x9c
0000            118   _DAC3H          DATA 0x8e
0000            119   _DAC3L          DATA 0x8d
0000            120   _DACGCF0        DATA 0x88
0000            121   _DACGCF1        DATA 0x98
0000            122   _DACGCF2        DATA 0xa2
0000            123   _DERIVID        DATA 0xad
0000            124   _DEVICEID       DATA 0xb5
0000            125   _DPH            DATA 0x83
0000            126   _DPL            DATA 0x82
0000            127   _EIE1           DATA 0xe6
0000            128   _EIE2           DATA 0xf3
0000            129   _EIP1           DATA 0xbb
0000            130   _EIP1H          DATA 0xee
0000            131   _EIP2           DATA 0xed
0000            132   _EIP2H          DATA 0xf6
0000            133   _EMI0CN         DATA 0xe7
0000            134   _FLKEY          DATA 0xb7
0000            135   _HFO0CAL        DATA 0xc7
0000            136   _HFO1CAL        DATA 0xd6
0000            137   _HFOCN          DATA 0xef
0000            138   _I2C0ADM        DATA 0xff
0000            139   _I2C0CN0        DATA 0xba
0000            140   _I2C0DIN        DATA 0xbc
0000            141   _I2C0DOUT       DATA 0xbb
0000            142   _I2C0FCN0       DATA 0xad
0000            143   _I2C0FCN1       DATA 0xab
0000            144   _I2C0FCT        DATA 0xf5
0000            145   _I2C0SLAD       DATA 0xbd
0000            146   _I2C0STAT       DATA 0xb9
0000            147   _IE             DATA 0xa8
0000            148   _IP             DATA 0xb8
0000            149   _IPH            DATA 0xf2
0000            150   _IT01CF         DATA 0xe4
0000            151   _LFO0CN         DATA 0xb1
0000            152   _P0             DATA 0x80
0000            153   _P0MASK         DATA 0xfe
0000            154   _P0MAT          DATA 0xfd
0000            155   _P0MDIN         DATA 0xf1
0000            156   _P0MDOUT        DATA 0xa4
0000            157   _P0SKIP         DATA 0xd4
0000            158   _P1             DATA 0x90
0000            159   _P1MASK         DATA 0xee
0000            160   _P1MAT          DATA 0xed
0000            161   _P1MDIN         DATA 0xf2
0000            162   _P1MDOUT        DATA 0xa5
0000            163   _P1SKIP         DATA 0xd5
0000            164   _P2             DATA 0xa0
0000            165   _P2MASK         DATA 0xfc
0000            166   _P2MAT          DATA 0xfb
0000            167   _P2MDIN         DATA 0xf3
0000            168   _P2MDOUT        DATA 0xa6
0000            169   _P2SKIP         DATA 0xcc
0000            170   _P3             DATA 0xb0
0000            171   _P3MDIN         DATA 0xf4
0000            172   _P3MDOUT        DATA 0x9c
0000            173   _PCA0CENT       DATA 0x9e
0000            174   _PCA0CLR        DATA 0x9c
0000            175   _PCA0CN0        DATA 0xd8
0000            176   _PCA0CPH0       DATA 0xfc
0000            177   _PCA0CPH1       DATA 0xea
0000            178   _PCA0CPH2       DATA 0xec
0000            179   _PCA0CPH3       DATA 0xf5
0000            180   _PCA0CPH4       DATA 0x85
0000            181   _PCA0CPH5       DATA 0xde
0000            182   _PCA0CPL0       DATA 0xfb
0000            183   _PCA0CPL1       DATA 0xe9
0000            184   _PCA0CPL2       DATA 0xeb
0000            185   _PCA0CPL3       DATA 0xf4
0000            186   _PCA0CPL4       DATA 0x84
0000            187   _PCA0CPL5       DATA 0xdd
0000            188   _PCA0CPM0       DATA 0xda
0000            189   _PCA0CPM1       DATA 0xdb
0000            190   _PCA0CPM2       DATA 0xdc
0000            191   _PCA0CPM3       DATA 0xae
0000            192   _PCA0CPM4       DATA 0xaf
0000            193   _PCA0CPM5       DATA 0xcc
0000            194   _PCA0H          DATA 0xfa
0000            195   _PCA0L          DATA 0xf9
0000            196   _PCA0MD         DATA 0xd9
0000            197   _PCA0POL        DATA 0x96
0000            198   _PCA0PWM        DATA 0xf7
0000            199   _PCON0          DATA 0x87
0000            200   _PCON1          DATA 0xcd
0000            201   _PFE0CN         DATA 0xc1
0000            202   _PRTDRV         DATA 0xf6
0000            203   _PSCTL          DATA 0x8f
0000            204   _PSTAT0         DATA 0xaa
0000            205   _PSW            DATA 0xd0
0000            206   _REF0CN         DATA 0xd1
0000            207   _REG0CN         DATA 0xc9
0000            208   _REVID          DATA 0xb6
0000            209   _RSTSRC         DATA 0xef
0000            210   _SBCON1         DATA 0x94
0000            211   _SBRLH1         DATA 0x96
0000            212   _SBRLL1         DATA 0x95
0000            213   _SBUF           DATA 0x99
0000            214   _SBUF0          DATA 0x99
0000            215   _SBUF1          DATA 0x92
0000            216   _SCON           DATA 0x98
0000            217   _SCON0          DATA 0x98
0000            218   _SCON1          DATA 0xc8
0000            219   _SFRPAGE        DATA 0xa7
0000            220   _SFRPGCN        DATA 0xbc
0000            221   _SFRSTACK       DATA 0xd7
0000            222   _SMB0ADM        DATA 0xd6
0000            223   _SMB0ADR        DATA 0xd7
0000            224   _SMB0CF         DATA 0xc1
0000            225   _SMB0CN0        DATA 0xc0
0000            226   _SMB0DAT        DATA 0xc2
0000            227   _SMB0FCN0       DATA 0xc3
0000            228   _SMB0FCN1       DATA 0xc4
0000            229   _SMB0FCT        DATA 0xef
0000            230   _SMB0RXLN       DATA 0xc5
0000            231   _SMB0TC         DATA 0xac
0000            232   _SMOD1          DATA 0x93
0000            233   _SP             DATA 0x81
0000            234   _SPI0CFG        DATA 0xa1
0000            235   _SPI0CKR        DATA 0xa2
0000            236   _SPI0CN0        DATA 0xf8
0000            237   _SPI0DAT        DATA 0xa3
0000            238   _SPI0FCN0       DATA 0x9a
0000            239   _SPI0FCN1       DATA 0x9b
0000            240   _SPI0FCT        DATA 0xf7
0000            241   _SPI0PCF        DATA 0xdf
0000            242   _TCON           DATA 0x88
0000            243   _TH0            DATA 0x8c
0000            244   _TH1            DATA 0x8d
0000            245   _TL0            DATA 0x8a
0000            246   _TL1            DATA 0x8b
0000            247   _TMOD           DATA 0x89
0000            248   _TMR2CN0        DATA 0xc8
0000            249   _TMR2CN1        DATA 0xfd
0000            250   _TMR2H          DATA 0xcf
0000            251   _TMR2L          DATA 0xce
0000            252   _TMR2RLH        DATA 0xcb
0000            253   _TMR2RLL        DATA 0xca
0000            254   _TMR3CN0        DATA 0x91
0000            255   _TMR3CN1        DATA 0xfe
0000            256   _TMR3H          DATA 0x95
0000            257   _TMR3L          DATA 0x94
0000            258   _TMR3RLH        DATA 0x93
0000            259   _TMR3RLL        DATA 0x92
0000            260   _TMR4CN0        DATA 0x98
0000            261   _TMR4CN1        DATA 0xff
0000            262   _TMR4H          DATA 0xa5
0000            263   _TMR4L          DATA 0xa4
0000            264   _TMR4RLH        DATA 0xa3
0000            265   _TMR4RLL        DATA 0xa2
0000            266   _TMR5CN0        DATA 0xc0
0000            267   _TMR5CN1        DATA 0xf1
0000            268   _TMR5H          DATA 0xd5
0000            269   _TMR5L          DATA 0xd4
0000            270   _TMR5RLH        DATA 0xd3
0000            271   _TMR5RLL        DATA 0xd2
0000            272   _UART0PCF       DATA 0xd9
0000            273   _UART1FCN0      DATA 0x9d
0000            274   _UART1FCN1      DATA 0xd8
0000            275   _UART1FCT       DATA 0xfa
0000            276   _UART1LIN       DATA 0x9e
0000            277   _UART1PCF       DATA 0xda
0000            278   _VDM0CN         DATA 0xff
0000            279   _WDTCN          DATA 0x97
0000            280   _XBR0           DATA 0xe1
0000            281   _XBR1           DATA 0xe2
0000            282   _XBR2           DATA 0xe3
0000            283   _XOSC0CN        DATA 0x86
0000            284   _DPTR           DATA 0x8382
0000            285   _TMR2RL         DATA 0xcbca
0000            286   _TMR3RL         DATA 0x9392
0000            287   _TMR4RL         DATA 0xa3a2
0000            288   _TMR5RL         DATA 0xd3d2
0000            289   _TMR0           DATA 0x8c8a
0000            290   _TMR1           DATA 0x8d8b
0000            291   _TMR2           DATA 0xcfce
0000            292   _TMR3           DATA 0x9594
0000            293   _TMR4           DATA 0xa5a4
0000            294   _TMR5           DATA 0xd5d4
0000            295   _SBRL1          DATA 0x9695
0000            296   _PCA0           DATA 0xfaf9
0000            297   _PCA0CP0        DATA 0xfcfb
0000            298   _PCA0CP1        DATA 0xeae9
0000            299   _PCA0CP2        DATA 0xeceb
0000            300   _PCA0CP3        DATA 0xf5f4
0000            301   _PCA0CP4        DATA 0x8584
0000            302   _PCA0CP5        DATA 0xdedd
0000            303   _ADC0ASA        DATA 0xb6b5
0000            304   _ADC0GT         DATA 0xc4c3
0000            305   _ADC0           DATA 0xbebd
0000            306   _ADC0LT         DATA 0xc6c5
0000            307   _DAC0           DATA 0x8584
0000            308   _DAC1           DATA 0x8a89
0000            309   _DAC2           DATA 0x8c8b
0000            310   _DAC3           DATA 0x8e8d
0000            311   ;--------------------------------------------------------
0000            312   ; special function bits
0000            313   ;--------------------------------------------------------
0000            314   _ACC_0          BIT 0xe0
0000            315   _ACC_1          BIT 0xe1
0000            316   _ACC_2          BIT 0xe2
0000            317   _ACC_3          BIT 0xe3
0000            318   _ACC_4          BIT 0xe4
0000            319   _ACC_5          BIT 0xe5
0000            320   _ACC_6          BIT 0xe6
0000            321   _ACC_7          BIT 0xe7
0000            322   _TEMPE          BIT 0xe8
0000            323   _ADGN0          BIT 0xe9
0000            324   _ADGN1          BIT 0xea
0000            325   _ADWINT         BIT 0xeb
0000            326   _ADBUSY         BIT 0xec
0000            327   _ADINT          BIT 0xed
0000            328   _IPOEN          BIT 0xee
0000            329   _ADEN           BIT 0xef
0000            330   _B_0            BIT 0xf0
0000            331   _B_1            BIT 0xf1
0000            332   _B_2            BIT 0xf2
0000            333   _B_3            BIT 0xf3
0000            334   _B_4            BIT 0xf4
0000            335   _B_5            BIT 0xf5
0000            336   _B_6            BIT 0xf6
0000            337   _B_7            BIT 0xf7
0000            338   _C0FIF          BIT 0xe8
0000            339   _C0RIF          BIT 0xe9
0000            340   _C1FIF          BIT 0xea
0000            341   _C1RIF          BIT 0xeb
0000            342   _C2FIF          BIT 0xec
0000            343   _C2RIF          BIT 0xed
0000            344   _C3FIF          BIT 0xee
0000            345   _C3RIF          BIT 0xef
0000            346   _D1SRC0         BIT 0x88
0000            347   _D1SRC1         BIT 0x89
0000            348   _D1AMEN         BIT 0x8a
0000            349   _D01REFSL       BIT 0x8b
0000            350   _D3SRC0         BIT 0x8c
0000            351   _D3SRC1         BIT 0x8d
0000            352   _D3AMEN         BIT 0x8e
0000            353   _D23REFSL       BIT 0x8f
0000            354   _D0UDIS         BIT 0x98
0000            355   _D1UDIS         BIT 0x99
0000            356   _D2UDIS         BIT 0x9a
0000            357   _D3UDIS         BIT 0x9b
0000            358   _EX0            BIT 0xa8
0000            359   _ET0            BIT 0xa9
0000            360   _EX1            BIT 0xaa
0000            361   _ET1            BIT 0xab
0000            362   _ES0            BIT 0xac
0000            363   _ET2            BIT 0xad
0000            364   _ESPI0          BIT 0xae
0000            365   _EA             BIT 0xaf
0000            366   _PX0            BIT 0xb8
0000            367   _PT0            BIT 0xb9
0000            368   _PX1            BIT 0xba
0000            369   _PT1            BIT 0xbb
0000            370   _PS0            BIT 0xbc
0000            371   _PT2            BIT 0xbd
0000            372   _PSPI0          BIT 0xbe
0000            373   _P0_0           BIT 0x80
0000            374   _P0_1           BIT 0x81
0000            375   _P0_2           BIT 0x82
0000            376   _P0_3           BIT 0x83
0000            377   _P0_4           BIT 0x84
0000            378   _P0_5           BIT 0x85
0000            379   _P0_6           BIT 0x86
0000            380   _P0_7           BIT 0x87
0000            381   _P1_0           BIT 0x90
0000            382   _P1_1           BIT 0x91
0000            383   _P1_2           BIT 0x92
0000            384   _P1_3           BIT 0x93
0000            385   _P1_4           BIT 0x94
0000            386   _P1_5           BIT 0x95
0000            387   _P1_6           BIT 0x96
0000            388   _P1_7           BIT 0x97
0000            389   _P2_0           BIT 0xa0
0000            390   _P2_1           BIT 0xa1
0000            391   _P2_2           BIT 0xa2
0000            392   _P2_3           BIT 0xa3
0000            393   _P2_4           BIT 0xa4
0000            394   _P2_5           BIT 0xa5
0000            395   _P2_6           BIT 0xa6
0000            396   _P3_0           BIT 0xb0
0000            397   _P3_1           BIT 0xb1
0000            398   _P3_2           BIT 0xb2
0000            399   _P3_3           BIT 0xb3
0000            400   _P3_4           BIT 0xb4
0000            401   _P3_7           BIT 0xb7
0000            402   _CCF0           BIT 0xd8
0000            403   _CCF1           BIT 0xd9
0000            404   _CCF2           BIT 0xda
0000            405   _CCF3           BIT 0xdb
0000            406   _CCF4           BIT 0xdc
0000            407   _CCF5           BIT 0xdd
0000            408   _CR             BIT 0xde
0000            409   _CF             BIT 0xdf
0000            410   _PARITY         BIT 0xd0
0000            411   _F1             BIT 0xd1
0000            412   _OV             BIT 0xd2
0000            413   _RS0            BIT 0xd3
0000            414   _RS1            BIT 0xd4
0000            415   _F0             BIT 0xd5
0000            416   _AC             BIT 0xd6
0000            417   _CY             BIT 0xd7
0000            418   _RI             BIT 0x98
0000            419   _TI             BIT 0x99
0000            420   _RB8            BIT 0x9a
0000            421   _TB8            BIT 0x9b
0000            422   _REN            BIT 0x9c
0000            423   _CE             BIT 0x9d
0000            424   _SMODE          BIT 0x9e
0000            425   _RI1            BIT 0xc8
0000            426   _TI1            BIT 0xc9
0000            427   _RBX1           BIT 0xca
0000            428   _TBX1           BIT 0xcb
0000            429   _REN1           BIT 0xcc
0000            430   _PERR1          BIT 0xcd
0000            431   _OVR1           BIT 0xce
0000            432   _SI             BIT 0xc0
0000            433   _ACK            BIT 0xc1
0000            434   _ARBLOST        BIT 0xc2
0000            435   _ACKRQ          BIT 0xc3
0000            436   _STO            BIT 0xc4
0000            437   _STA            BIT 0xc5
0000            438   _TXMODE         BIT 0xc6
0000            439   _MASTER         BIT 0xc7
0000            440   _SPIEN          BIT 0xf8
0000            441   _TXNF           BIT 0xf9
0000            442   _NSSMD0         BIT 0xfa
0000            443   _NSSMD1         BIT 0xfb
0000            444   _RXOVRN         BIT 0xfc
0000            445   _MODF           BIT 0xfd
0000            446   _WCOL           BIT 0xfe
0000            447   _SPIF           BIT 0xff
0000            448   _IT0            BIT 0x88
0000            449   _IE0            BIT 0x89
0000            450   _IT1            BIT 0x8a
0000            451   _IE1            BIT 0x8b
0000            452   _TR0            BIT 0x8c
0000            453   _TF0            BIT 0x8d
0000            454   _TR1            BIT 0x8e
0000            455   _TF1            BIT 0x8f
0000            456   _T2XCLK0        BIT 0xc8
0000            457   _T2XCLK1        BIT 0xc9
0000            458   _TR2            BIT 0xca
0000            459   _T2SPLIT        BIT 0xcb
0000            460   _TF2CEN         BIT 0xcc
0000            461   _TF2LEN         BIT 0xcd
0000            462   _TF2L           BIT 0xce
0000            463   _TF2H           BIT 0xcf
0000            464   _T4XCLK0        BIT 0x98
0000            465   _T4XCLK1        BIT 0x99
0000            466   _TR4            BIT 0x9a
0000            467   _T4SPLIT        BIT 0x9b
0000            468   _TF4CEN         BIT 0x9c
0000            469   _TF4LEN         BIT 0x9d
0000            470   _TF4L           BIT 0x9e
0000            471   _TF4H           BIT 0x9f
0000            472   _T5XCLK0        BIT 0xc0
0000            473   _T5XCLK1        BIT 0xc1
0000            474   _TR5            BIT 0xc2
0000            475   _T5SPLIT        BIT 0xc3
0000            476   _TF5CEN         BIT 0xc4
0000            477   _TF5LEN         BIT 0xc5
0000            478   _TF5L           BIT 0xc6
0000            479   _TF5H           BIT 0xc7
0000            480   _RIE            BIT 0xd8
0000            481   _RXTO0          BIT 0xd9
0000            482   _RXTO1          BIT 0xda
0000            483   _RFRQ           BIT 0xdb
0000            484   _TIE            BIT 0xdc
0000            485   _TXHOLD         BIT 0xdd
0000            486   _TXNF1          BIT 0xde
0000            487   _TFRQ           BIT 0xdf
0000            488   ;--------------------------------------------------------
0000            489   ; overlayable register banks
0000            490   ;--------------------------------------------------------
0000            491            rbank0 segment data overlay
0000            492   ;--------------------------------------------------------
0000            493   ; internal ram data
0000            494   ;--------------------------------------------------------
0000            495            rseg R_DSEG
0000            496   _overflow_count:
0000            497            ds 1
0001            498   _LCDprint_PARM_2:
0001            499            ds 1
0002            500   _main_buffer_1_77:
0002            501            ds 20
0016            502   _main_bsel_1_77:
0016            503            ds 2
0018            504   _main_led_1_77:
0018            505            ds 2
001A            506   _main_period_1_77:
001A            507            ds 4
001E            508   _main_freq_1_77:
001E            509            ds 4
0022            510   _main_quarterPeriod_1_77:
0022            511            ds 4
0026            512   _main_prev_period_1_77:
0026            513            ds 4
002A            514   _main_vrms_spl_1_77:
002A            515            ds 4
002E            516   _main_vrms_ref_1_77:
002E            517            ds 4
0032            518   _main_phase_diff_deg_1_77:
0032            519            ds 4
0036            520   _main_phase_diff_time_1_77:
0036            521            ds 4
003A            522   ;--------------------------------------------------------
003A            523   ; overlayable items in internal ram 
003A            524   ;--------------------------------------------------------
0000            525            rseg    R_OSEG
0000            526            rseg    R_OSEG
0000            527   _InitPinADC_PARM_2:
0000            528            ds 1
0001            529            rseg    R_OSEG
0001            530   ;--------------------------------------------------------
0001            531   ; indirectly addressable internal ram data
0001            532   ;--------------------------------------------------------
0000            533            rseg R_ISEG
0000            534   ;--------------------------------------------------------
0000            535   ; absolute internal ram data
0000            536   ;--------------------------------------------------------
0000            537            DSEG
0000            538   ;--------------------------------------------------------
0000            539   ; bit data
0000            540   ;--------------------------------------------------------
0000            541            rseg R_BSEG
0000            542   _LCDprint_PARM_3:
0000            543            DBIT    1
0001            544   ;--------------------------------------------------------
0001            545   ; paged external ram data
0001            546   ;--------------------------------------------------------
0000            547            rseg R_PSEG
0000            548   ;--------------------------------------------------------
0000            549   ; external ram data
0000            550   ;--------------------------------------------------------
0000            551            rseg R_XSEG
0000            552   ;--------------------------------------------------------
0000            553   ; absolute external ram data
0000            554   ;--------------------------------------------------------
0000            555            XSEG
0000            556   ;--------------------------------------------------------
0000            557   ; external initialized ram data
0000            558   ;--------------------------------------------------------
0000            559            rseg R_IXSEG
0000            560            rseg R_HOME
0000            561            rseg R_GSINIT
0000            562            rseg R_CSEG
0000            563   ;--------------------------------------------------------
0000            564   ; Reset entry point and interrupt vectors
0000            565   ;--------------------------------------------------------
0000            566            CSEG at 0x0000
0000 020000     567            ljmp    _crt0
0003            568   ;--------------------------------------------------------
0003            569   ; global & static initialisations
0003            570   ;--------------------------------------------------------
0000            571            rseg R_HOME
0000            572            rseg R_GSINIT
0000            573            rseg R_GSINIT
0000            574   ;--------------------------------------------------------
0000            575   ; data variables initialization
0000            576   ;--------------------------------------------------------
0000            577            rseg R_DINIT
0000            578            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            579   ;--------------------------------------------------------
0000            580   ; code
0000            581   ;--------------------------------------------------------
0000            582            rseg R_CSEG
0000            583   ;------------------------------------------------------------
0000            584   ;Allocation info for local variables in function '_c51_external_startup'
0000            585   ;------------------------------------------------------------
0000            586   ;------------------------------------------------------------
0000            587   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:37: char _c51_external_startup (void)
0000            588   ;        -----------------------------------------
0000            589   ;         function _c51_external_startup
0000            590   ;        -----------------------------------------
0000            591   __c51_external_startup:
0000            592            using   0
0000            593   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:40: SFRPAGE = 0x00;
0000 75A700     594            mov     _SFRPAGE,#0x00
0003            595   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:41: WDTCN = 0xDE; //First key
0003 7597DE     596            mov     _WDTCN,#0xDE
0006            597   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:42: WDTCN = 0xAD; //Second key
0006 7597AD     598            mov     _WDTCN,#0xAD
0009            599   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:44: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     600            mov     _VDM0CN,#0x80
000C            601   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:45: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     602            mov     _RSTSRC,#0x06
000F            603   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:52: SFRPAGE = 0x10;
000F 75A710     604            mov     _SFRPAGE,#0x10
0012            605   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:53: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     606            mov     _PFE0CN,#0x20
0015            607   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:54: SFRPAGE = 0x00;
0015 75A700     608            mov     _SFRPAGE,#0x00
0018            609   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:75: CLKSEL = 0x00;
0018 75A900     610            mov     _CLKSEL,#0x00
001B            611   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:76: CLKSEL = 0x00;
001B 75A900     612            mov     _CLKSEL,#0x00
001E            613   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:77: while ((CLKSEL & 0x80) == 0);
001E            614   L002001?:
001E E5A9       615            mov     a,_CLKSEL
0020 30E7D0     616            jnb     acc.7,L002001?
0023            617   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:78: CLKSEL = 0x03;
0023 75A903     618            mov     _CLKSEL,#0x03
0026            619   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:79: CLKSEL = 0x03;
0026 75A903     620            mov     _CLKSEL,#0x03
0029            621   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:80: while ((CLKSEL & 0x80) == 0);
0029            622   L002004?:
0029 E5A9       623            mov     a,_CLKSEL
002B 30E750     624            jnb     acc.7,L002004?
002E            625   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:85: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     626            orl     _P0MDOUT,#0x10
0031            627   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:86: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     628            mov     _XBR0,#0x01
0034            629   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:87: XBR1     = 0X00;
0034 75E200     630            mov     _XBR1,#0x00
0037            631   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:88: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     632            mov     _XBR2,#0x40
003A            633   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:94: SCON0 = 0x10;
003A 759810     634            mov     _SCON0,#0x10
003D            635   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:95: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*PRESCALAR));
003D 758DE6     636            mov     _TH1,#0xE6
0040            637   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:96: TL1 = TH1;      // Init Timer1
0040 858D8B     638            mov     _TL1,_TH1
0043            639   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:97: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     640            anl     _TMOD,#0x0F
0046            641   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:98: TMOD |=  0x20;                       
0046 438920     642            orl     _TMOD,#0x20
0049            643   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:99: TR1 = 1; // START Timer1
0049 D28E       644            setb    _TR1
004B            645   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:100: TI = 1;  // Indicate TX0 ready
004B D299       646            setb    _TI
004D            647   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:102: return 0;
004D 758200     648            mov     dpl,#0x00
0050 22         649            ret
0051            650   ;------------------------------------------------------------
0051            651   ;Allocation info for local variables in function 'InitADC'
0051            652   ;------------------------------------------------------------
0051            653   ;------------------------------------------------------------
0051            654   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:106: void InitADC (void)
0051            655   ;        -----------------------------------------
0051            656   ;         function InitADC
0051            657   ;        -----------------------------------------
0051            658   _InitADC:
0051            659   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:108: SFRPAGE = 0x00;
0051 75A700     660            mov     _SFRPAGE,#0x00
0054            661   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:109: ADEN=0; // Disable ADC
0054 C2EF       662            clr     _ADEN
0056            663   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:114: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     664            mov     _ADC0CN1,#0x80
0059            665   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:118: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     666            mov     _ADC0CF0,#0x20
005C            667   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:122: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     668            mov     _ADC0CF1,#0x1E
005F            669   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:131: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     670            mov     _ADC0CN0,#0x00
0062            671   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:136: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     672            mov     _ADC0CF2,#0x3F
0065            673   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:140: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     674            mov     _ADC0CN2,#0x00
0068            675   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:142: ADEN=1; // Enable ADC
0068 D2EF       676            setb    _ADEN
006A 22         677            ret
006B            678   ;------------------------------------------------------------
006B            679   ;Allocation info for local variables in function 'Timer3us'
006B            680   ;------------------------------------------------------------
006B            681   ;us                        Allocated to registers r2 
006B            682   ;i                         Allocated to registers r3 
006B            683   ;------------------------------------------------------------
006B            684   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:149: void Timer3us(unsigned char us)
006B            685   ;        -----------------------------------------
006B            686   ;         function Timer3us
006B            687   ;        -----------------------------------------
006B            688   _Timer3us:
006B AA82       689            mov     r2,dpl
006D            690   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:154: CKCON0|=0b_0100_0000;
006D 438E40     691            orl     _CKCON0,#0x40
0070            692   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:157: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     693            mov     _TMR3RL,#0xB8
0073 7593FF     694            mov     (_TMR3RL >> 8),#0xFF
0076            695   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:158: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     696            mov     _TMR3,_TMR3RL
0079 859395     697            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            698   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:160: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     699            mov     _TMR3CN0,#0x04
007F            700   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:161: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       701            mov     r3,#0x00
0081            702   L004004?:
0081 C3         703            clr     c
0082 EB         704            mov     a,r3
0083 9A         705            subb    a,r2
0084 5000       706            jnc     L004007?
0086            707   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:163: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            708   L004001?:
0086 E591       709            mov     a,_TMR3CN0
0088 30E750     710            jnb     acc.7,L004001?
008B            711   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:164: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     712            anl     _TMR3CN0,#0x7F
008E            713   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:161: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         714            inc     r3
008F 8000       715            sjmp    L004004?
0091            716   L004007?:
0091            717   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:166: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     718            mov     _TMR3CN0,#0x00
0094 22         719            ret
0095            720   ;------------------------------------------------------------
0095            721   ;Allocation info for local variables in function 'waitms'
0095            722   ;------------------------------------------------------------
0095            723   ;ms                        Allocated to registers r2 r3 
0095            724   ;j                         Allocated to registers r4 r5 
0095            725   ;k                         Allocated to registers r6 
0095            726   ;------------------------------------------------------------
0095            727   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:169: void waitms (unsigned int ms)
0095            728   ;        -----------------------------------------
0095            729   ;         function waitms
0095            730   ;        -----------------------------------------
0095            731   _waitms:
0095 AA82       732            mov     r2,dpl
0097 AB83       733            mov     r3,dph
0099            734   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:173: for(j=0; j<ms; j++)
0099 7C00       735            mov     r4,#0x00
009B 7D00       736            mov     r5,#0x00
009D            737   L005005?:
009D C3         738            clr     c
009E EC         739            mov     a,r4
009F 9A         740            subb    a,r2
00A0 ED         741            mov     a,r5
00A1 9B         742            subb    a,r3
00A2 5000       743            jnc     L005009?
00A4            744   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:174: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       745            mov     r6,#0x00
00A6            746   L005001?:
00A6 BE0490     747            cjne    r6,#0x04,L005018?
00A9            748   L005018?:
00A9 5000       749            jnc     L005007?
00AB 7582FA     750            mov     dpl,#0xFA
00AE C002       751            push    ar2
00B0 C003       752            push    ar3
00B2 C004       753            push    ar4
00B4 C005       754            push    ar5
00B6 C006       755            push    ar6
00B8 120000     756            lcall   _Timer3us
00BB D006       757            pop     ar6
00BD D005       758            pop     ar5
00BF D004       759            pop     ar4
00C1 D003       760            pop     ar3
00C3 D002       761            pop     ar2
00C5 0E         762            inc     r6
00C6 8000       763            sjmp    L005001?
00C8            764   L005007?:
00C8            765   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:173: for(j=0; j<ms; j++)
00C8 0C         766            inc     r4
00C9 BC00D0     767            cjne    r4,#0x00,L005005?
00CC 0D         768            inc     r5
00CD 8000       769            sjmp    L005005?
00CF            770   L005009?:
00CF 22         771            ret
00D0            772   ;------------------------------------------------------------
00D0            773   ;Allocation info for local variables in function 'wait100us'
00D0            774   ;------------------------------------------------------------
00D0            775   ;time                      Allocated to registers r2 r3 r4 r5 
00D0            776   ;j                         Allocated to registers r6 r7 r0 r1 
00D0            777   ;------------------------------------------------------------
00D0            778   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:178: void wait100us (unsigned long time){              
00D0            779   ;        -----------------------------------------
00D0            780   ;         function wait100us
00D0            781   ;        -----------------------------------------
00D0            782   _wait100us:
00D0 AA82       783            mov     r2,dpl
00D2 AB83       784            mov     r3,dph
00D4 ACF0       785            mov     r4,b
00D6 FD         786            mov     r5,a
00D7            787   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:180: for(j = 0; j<time; j++) Timer3us(100);    
00D7 7E00       788            mov     r6,#0x00
00D9 7F00       789            mov     r7,#0x00
00DB 7800       790            mov     r0,#0x00
00DD 7900       791            mov     r1,#0x00
00DF            792   L006001?:
00DF C3         793            clr     c
00E0 EE         794            mov     a,r6
00E1 9A         795            subb    a,r2
00E2 EF         796            mov     a,r7
00E3 9B         797            subb    a,r3
00E4 E8         798            mov     a,r0
00E5 9C         799            subb    a,r4
00E6 E9         800            mov     a,r1
00E7 9D         801            subb    a,r5
00E8 5000       802            jnc     L006005?
00EA 758264     803            mov     dpl,#0x64
00ED C002       804            push    ar2
00EF C003       805            push    ar3
00F1 C004       806            push    ar4
00F3 C005       807            push    ar5
00F5 C006       808            push    ar6
00F7 C007       809            push    ar7
00F9 C000       810            push    ar0
00FB C001       811            push    ar1
00FD 120000     812            lcall   _Timer3us
0100 D001       813            pop     ar1
0102 D000       814            pop     ar0
0104 D007       815            pop     ar7
0106 D006       816            pop     ar6
0108 D005       817            pop     ar5
010A D004       818            pop     ar4
010C D003       819            pop     ar3
010E D002       820            pop     ar2
0110 0E         821            inc     r6
0111 BE0050     822            cjne    r6,#0x00,L006001?
0114 0F         823            inc     r7
0115 BF0050     824            cjne    r7,#0x00,L006001?
0118 08         825            inc     r0
0119 B80050     826            cjne    r0,#0x00,L006001?
011C 09         827            inc     r1
011D 8000       828            sjmp    L006001?
011F            829   L006005?:
011F 22         830            ret
0120            831   ;------------------------------------------------------------
0120            832   ;Allocation info for local variables in function 'TIMER0_Init'
0120            833   ;------------------------------------------------------------
0120            834   ;------------------------------------------------------------
0120            835   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:183: void TIMER0_Init(void)
0120            836   ;        -----------------------------------------
0120            837   ;         function TIMER0_Init
0120            838   ;        -----------------------------------------
0120            839   _TIMER0_Init:
0120            840   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:185: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0120 5389F0     841            anl     _TMOD,#0xF0
0123            842   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:186: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit counter
0123 438901     843            orl     _TMOD,#0x01
0126            844   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:187: TR0=0; // Stop Timer/Counter 0
0126 C28C       845            clr     _TR0
0128 22         846            ret
0129            847   ;------------------------------------------------------------
0129            848   ;Allocation info for local variables in function 'InitPinADC'
0129            849   ;------------------------------------------------------------
0129            850   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0129            851   ;portno                    Allocated to registers r2 
0129            852   ;mask                      Allocated to registers r3 
0129            853   ;------------------------------------------------------------
0129            854   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:192: void InitPinADC (unsigned char portno, unsigned char pinno)
0129            855   ;        -----------------------------------------
0129            856   ;         function InitPinADC
0129            857   ;        -----------------------------------------
0129            858   _InitPinADC:
0129 AA82       859            mov     r2,dpl
012B            860   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:196: mask=1<<pinno;
012B 8560F0     861            mov     b,_InitPinADC_PARM_2
012E 05F0       862            inc     b
0130 7401       863            mov     a,#0x01
0132 8000       864            sjmp    L008013?
0134            865   L008011?:
0134 25E0       866            add     a,acc
0136            867   L008013?:
0136 D5F010     868            djnz    b,L008011?
0139 FB         869            mov     r3,a
013A            870   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:198: SFRPAGE = 0x20;
013A 75A720     871            mov     _SFRPAGE,#0x20
013D            872   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:199: switch (portno)
013D BA0050     873            cjne    r2,#0x00,L008014?
0140 8000       874            sjmp    L008001?
0142            875   L008014?:
0142 BA01D0     876            cjne    r2,#0x01,L008015?
0145 8000       877            sjmp    L008002?
0147            878   L008015?:
0147            879   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:201: case 0:
0147 BA0250     880            cjne    r2,#0x02,L008005?
014A 8000       881            sjmp    L008003?
014C            882   L008001?:
014C            883   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:202: P0MDIN &= (~mask); // Set pin as analog input
014C EB         884            mov     a,r3
014D F4         885            cpl     a
014E FA         886            mov     r2,a
014F 52F1       887            anl     _P0MDIN,a
0151            888   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:203: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0151 EB         889            mov     a,r3
0152 42D4       890            orl     _P0SKIP,a
0154            891   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:204: break;
0154            892   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:205: case 1:
0154 8000       893            sjmp    L008005?
0156            894   L008002?:
0156            895   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:206: P1MDIN &= (~mask); // Set pin as analog input
0156 EB         896            mov     a,r3
0157 F4         897            cpl     a
0158 FA         898            mov     r2,a
0159 52F2       899            anl     _P1MDIN,a
015B            900   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:207: P1SKIP |= mask; // Skip Crossbar decoding for this pin
015B EB         901            mov     a,r3
015C 42D5       902            orl     _P1SKIP,a
015E            903   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:208: break;
015E            904   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:209: case 2:
015E 8000       905            sjmp    L008005?
0160            906   L008003?:
0160            907   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:210: P2MDIN &= (~mask); // Set pin as analog input
0160 EB         908            mov     a,r3
0161 F4         909            cpl     a
0162 FA         910            mov     r2,a
0163 52F3       911            anl     _P2MDIN,a
0165            912   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:211: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0165 EB         913            mov     a,r3
0166 42CC       914            orl     _P2SKIP,a
0168            915   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:215: }
0168            916   L008005?:
0168            917   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:216: SFRPAGE = 0x00;
0168 75A700     918            mov     _SFRPAGE,#0x00
016B 22         919            ret
016C            920   ;------------------------------------------------------------
016C            921   ;Allocation info for local variables in function 'ADC_at_Pin'
016C            922   ;------------------------------------------------------------
016C            923   ;pin                       Allocated to registers 
016C            924   ;------------------------------------------------------------
016C            925   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:220: unsigned int ADC_at_Pin(unsigned char pin)
016C            926   ;        -----------------------------------------
016C            927   ;         function ADC_at_Pin
016C            928   ;        -----------------------------------------
016C            929   _ADC_at_Pin:
016C 8582BB     930            mov     _ADC0MX,dpl
016F            931   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:223: ADINT = 0;
016F C2ED       932            clr     _ADINT
0171            933   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:224: ADBUSY = 1;     // Convert voltage at the pin
0171 D2EC       934            setb    _ADBUSY
0173            935   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:225: while (!ADINT); // Wait for conversion to complete
0173            936   L009001?:
0173 30EDD0     937            jnb     _ADINT,L009001?
0176            938   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:226: return (ADC0);
0176 85BD82     939            mov     dpl,_ADC0
0179 85BE83     940            mov     dph,(_ADC0 >> 8)
017C 22         941            ret
017D            942   ;------------------------------------------------------------
017D            943   ;Allocation info for local variables in function 'Volts_at_Pin'
017D            944   ;------------------------------------------------------------
017D            945   ;pin                       Allocated to registers r2 
017D            946   ;------------------------------------------------------------
017D            947   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:229: float Volts_at_Pin(unsigned char pin)
017D            948   ;        -----------------------------------------
017D            949   ;         function Volts_at_Pin
017D            950   ;        -----------------------------------------
017D            951   _Volts_at_Pin:
017D            952   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:231: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111); //b/c 14 bit adc
017D 120000     953            lcall   _ADC_at_Pin
0180 120000     954            lcall   ___uint2fs
0183 AA82       955            mov     r2,dpl
0185 AB83       956            mov     r3,dph
0187 ACF0       957            mov     r4,b
0189 FD         958            mov     r5,a
018A C002       959            push    ar2
018C C003       960            push    ar3
018E C004       961            push    ar4
0190 C005       962            push    ar5
0192 906C8B     963            mov     dptr,#0x6C8B
0195 75F053     964            mov     b,#0x53
0198 7440       965            mov     a,#0x40
019A 120000     966            lcall   ___fsmul
019D AA82       967            mov     r2,dpl
019F AB83       968            mov     r3,dph
01A1 ACF0       969            mov     r4,b
01A3 FD         970            mov     r5,a
01A4 E581       971            mov     a,sp
01A6 24FC       972            add     a,#0xfc
01A8 F581       973            mov     sp,a
01AA E4         974            clr     a
01AB C0E0       975            push    acc
01AD 74FC       976            mov     a,#0xFC
01AF C0E0       977            push    acc
01B1 747F       978            mov     a,#0x7F
01B3 C0E0       979            push    acc
01B5 7446       980            mov     a,#0x46
01B7 C0E0       981            push    acc
01B9 8A82       982            mov     dpl,r2
01BB 8B83       983            mov     dph,r3
01BD 8CF0       984            mov     b,r4
01BF ED         985            mov     a,r5
01C0 120000     986            lcall   ___fsdiv
01C3 AA82       987            mov     r2,dpl
01C5 AB83       988            mov     r3,dph
01C7 ACF0       989            mov     r4,b
01C9 FD         990            mov     r5,a
01CA E581       991            mov     a,sp
01CC 24FC       992            add     a,#0xfc
01CE F581       993            mov     sp,a
01D0 8A82       994            mov     dpl,r2
01D2 8B83       995            mov     dph,r3
01D4 8CF0       996            mov     b,r4
01D6 ED         997            mov     a,r5
01D7 22         998            ret
01D8            999   ;------------------------------------------------------------
01D8           1000   ;Allocation info for local variables in function 'LCD_pulse'
01D8           1001   ;------------------------------------------------------------
01D8           1002   ;------------------------------------------------------------
01D8           1003   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:235: void LCD_pulse (void)
01D8           1004   ;        -----------------------------------------
01D8           1005   ;         function LCD_pulse
01D8           1006   ;        -----------------------------------------
01D8           1007   _LCD_pulse:
01D8           1008   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:237: LCD_E=1;
01D8 D2A0      1009            setb    _P2_0
01DA           1010   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:238: Timer3us(40);
01DA 758228    1011            mov     dpl,#0x28
01DD 120000    1012            lcall   _Timer3us
01E0           1013   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:239: LCD_E=0;
01E0 C2A0      1014            clr     _P2_0
01E2 22        1015            ret
01E3           1016   ;------------------------------------------------------------
01E3           1017   ;Allocation info for local variables in function 'LCD_byte'
01E3           1018   ;------------------------------------------------------------
01E3           1019   ;x                         Allocated to registers r2 
01E3           1020   ;------------------------------------------------------------
01E3           1021   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:241: void LCD_byte (unsigned char x)
01E3           1022   ;        -----------------------------------------
01E3           1023   ;         function LCD_byte
01E3           1024   ;        -----------------------------------------
01E3           1025   _LCD_byte:
01E3 AA82      1026            mov     r2,dpl
01E5           1027   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:244: ACC=x; //Send high nible
01E5 8AE0      1028            mov     _ACC,r2
01E7           1029   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:245: LCD_D7=ACC_7;
01E7 A2E7      1030            mov     c,_ACC_7
01E9 9290      1031            mov     _P1_0,c
01EB           1032   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:246: LCD_D6=ACC_6;
01EB A2E6      1033            mov     c,_ACC_6
01ED 9291      1034            mov     _P1_1,c
01EF           1035   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:247: LCD_D5=ACC_5;
01EF A2E5      1036            mov     c,_ACC_5
01F1 9292      1037            mov     _P1_2,c
01F3           1038   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:248: LCD_D4=ACC_4;
01F3 A2E4      1039            mov     c,_ACC_4
01F5 9293      1040            mov     _P1_3,c
01F7           1041   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:249: LCD_pulse();
01F7 C002      1042            push    ar2
01F9 120000    1043            lcall   _LCD_pulse
01FC           1044   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:250: Timer3us(40);
01FC 758228    1045            mov     dpl,#0x28
01FF 120000    1046            lcall   _Timer3us
0202 D002      1047            pop     ar2
0204           1048   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:251: ACC=x; //Send low nible
0204 8AE0      1049            mov     _ACC,r2
0206           1050   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:252: LCD_D7=ACC_3;
0206 A2E3      1051            mov     c,_ACC_3
0208 9290      1052            mov     _P1_0,c
020A           1053   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:253: LCD_D6=ACC_2;
020A A2E2      1054            mov     c,_ACC_2
020C 9291      1055            mov     _P1_1,c
020E           1056   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:254: LCD_D5=ACC_1;
020E A2E1      1057            mov     c,_ACC_1
0210 9292      1058            mov     _P1_2,c
0212           1059   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:255: LCD_D4=ACC_0;
0212 A2E0      1060            mov     c,_ACC_0
0214 9293      1061            mov     _P1_3,c
0216           1062   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:256: LCD_pulse();
0216 020000    1063            ljmp    _LCD_pulse
0219           1064   ;------------------------------------------------------------
0219           1065   ;Allocation info for local variables in function 'WriteData'
0219           1066   ;------------------------------------------------------------
0219           1067   ;x                         Allocated to registers r2 
0219           1068   ;------------------------------------------------------------
0219           1069   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:259: void WriteData (unsigned char x)
0219           1070   ;        -----------------------------------------
0219           1071   ;         function WriteData
0219           1072   ;        -----------------------------------------
0219           1073   _WriteData:
0219 AA82      1074            mov     r2,dpl
021B           1075   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:261: LCD_RS=1;
021B D297      1076            setb    _P1_7
021D           1077   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:262: LCD_byte(x);
021D 8A82      1078            mov     dpl,r2
021F 120000    1079            lcall   _LCD_byte
0222           1080   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:263: waitms(2);
0222 900002    1081            mov     dptr,#0x0002
0225 020000    1082            ljmp    _waitms
0228           1083   ;------------------------------------------------------------
0228           1084   ;Allocation info for local variables in function 'WriteCommand'
0228           1085   ;------------------------------------------------------------
0228           1086   ;x                         Allocated to registers r2 
0228           1087   ;------------------------------------------------------------
0228           1088   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:266: void WriteCommand (unsigned char x)
0228           1089   ;        -----------------------------------------
0228           1090   ;         function WriteCommand
0228           1091   ;        -----------------------------------------
0228           1092   _WriteCommand:
0228 AA82      1093            mov     r2,dpl
022A           1094   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:268: LCD_RS=0;
022A C297      1095            clr     _P1_7
022C           1096   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:269: LCD_byte(x);
022C 8A82      1097            mov     dpl,r2
022E 120000    1098            lcall   _LCD_byte
0231           1099   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:270: waitms(5);
0231 900005    1100            mov     dptr,#0x0005
0234 020000    1101            ljmp    _waitms
0237           1102   ;------------------------------------------------------------
0237           1103   ;Allocation info for local variables in function 'LCD_4BIT'
0237           1104   ;------------------------------------------------------------
0237           1105   ;------------------------------------------------------------
0237           1106   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:273: void LCD_4BIT (void)
0237           1107   ;        -----------------------------------------
0237           1108   ;         function LCD_4BIT
0237           1109   ;        -----------------------------------------
0237           1110   _LCD_4BIT:
0237           1111   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:275: LCD_E=0; // Resting state of LCD's enable is zero
0237 C2A0      1112            clr     _P2_0
0239           1113   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:277: waitms(20);
0239 900014    1114            mov     dptr,#0x0014
023C 120000    1115            lcall   _waitms
023F           1116   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:279: WriteCommand(0x33);
023F 758233    1117            mov     dpl,#0x33
0242 120000    1118            lcall   _WriteCommand
0245           1119   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:280: WriteCommand(0x33);
0245 758233    1120            mov     dpl,#0x33
0248 120000    1121            lcall   _WriteCommand
024B           1122   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:281: WriteCommand(0x32); // Change to 4-bit mode
024B 758232    1123            mov     dpl,#0x32
024E 120000    1124            lcall   _WriteCommand
0251           1125   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:284: WriteCommand(0x28);
0251 758228    1126            mov     dpl,#0x28
0254 120000    1127            lcall   _WriteCommand
0257           1128   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:285: WriteCommand(0x0c);
0257 75820C    1129            mov     dpl,#0x0C
025A 120000    1130            lcall   _WriteCommand
025D           1131   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:286: WriteCommand(0x01); // Clear screen command (takes some time)
025D 758201    1132            mov     dpl,#0x01
0260 120000    1133            lcall   _WriteCommand
0263           1134   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:287: waitms(20); // Wait for clear screen command to finsih.
0263 900014    1135            mov     dptr,#0x0014
0266 020000    1136            ljmp    _waitms
0269           1137   ;------------------------------------------------------------
0269           1138   ;Allocation info for local variables in function 'LCDprint'
0269           1139   ;------------------------------------------------------------
0269           1140   ;line                      Allocated with name '_LCDprint_PARM_2'
0269           1141   ;string                    Allocated to registers r2 r3 r4 
0269           1142   ;j                         Allocated to registers r5 r6 
0269           1143   ;------------------------------------------------------------
0269           1144   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:290: void LCDprint(char * string, unsigned char line, bit clear)
0269           1145   ;        -----------------------------------------
0269           1146   ;         function LCDprint
0269           1147   ;        -----------------------------------------
0269           1148   _LCDprint:
0269 AA82      1149            mov     r2,dpl
026B AB83      1150            mov     r3,dph
026D ACF0      1151            mov     r4,b
026F           1152   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:294: WriteCommand(line==2?0xc0:0x80);
026F 7402      1153            mov     a,#0x02
0271 B55010    1154            cjne    a,_LCDprint_PARM_2,L016013?
0274 7DC0      1155            mov     r5,#0xC0
0276 8000      1156            sjmp    L016014?
0278           1157   L016013?:
0278 7D80      1158            mov     r5,#0x80
027A           1159   L016014?:
027A 8D82      1160            mov     dpl,r5
027C C002      1161            push    ar2
027E C003      1162            push    ar3
0280 C004      1163            push    ar4
0282 120000    1164            lcall   _WriteCommand
0285           1165   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:295: waitms(5);
0285 900005    1166            mov     dptr,#0x0005
0288 120000    1167            lcall   _waitms
028B D004      1168            pop     ar4
028D D003      1169            pop     ar3
028F D002      1170            pop     ar2
0291           1171   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:296: for(j=0; string[j]!=0; j++)       WriteData(string[j]);// Write the message
0291 7D00      1172            mov     r5,#0x00
0293 7E00      1173            mov     r6,#0x00
0295           1174   L016003?:
0295 ED        1175            mov     a,r5
0296 2A        1176            add     a,r2
0297 FF        1177            mov     r7,a
0298 EE        1178            mov     a,r6
0299 3B        1179            addc    a,r3
029A F8        1180            mov     r0,a
029B 8C01      1181            mov     ar1,r4
029D 8F82      1182            mov     dpl,r7
029F 8883      1183            mov     dph,r0
02A1 89F0      1184            mov     b,r1
02A3 120000    1185            lcall   __gptrget
02A6 FF        1186            mov     r7,a
02A7 6000      1187            jz      L016006?
02A9 8F82      1188            mov     dpl,r7
02AB C002      1189            push    ar2
02AD C003      1190            push    ar3
02AF C004      1191            push    ar4
02B1 C005      1192            push    ar5
02B3 C006      1193            push    ar6
02B5 120000    1194            lcall   _WriteData
02B8 D006      1195            pop     ar6
02BA D005      1196            pop     ar5
02BC D004      1197            pop     ar4
02BE D003      1198            pop     ar3
02C0 D002      1199            pop     ar2
02C2 0D        1200            inc     r5
02C3 BD0090    1201            cjne    r5,#0x00,L016003?
02C6 0E        1202            inc     r6
02C7 8000      1203            sjmp    L016003?
02C9           1204   L016006?:
02C9           1205   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:297: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
02C9 300050    1206            jnb     _LCDprint_PARM_3,L016011?
02CC 8D02      1207            mov     ar2,r5
02CE 8E03      1208            mov     ar3,r6
02D0           1209   L016007?:
02D0 C3        1210            clr     c
02D1 EA        1211            mov     a,r2
02D2 9410      1212            subb    a,#0x10
02D4 EB        1213            mov     a,r3
02D5 6480      1214            xrl     a,#0x80
02D7 9480      1215            subb    a,#0x80
02D9 5000      1216            jnc     L016011?
02DB 758220    1217            mov     dpl,#0x20
02DE C002      1218            push    ar2
02E0 C003      1219            push    ar3
02E2 120000    1220            lcall   _WriteData
02E5 D003      1221            pop     ar3
02E7 D002      1222            pop     ar2
02E9 0A        1223            inc     r2
02EA BA0090    1224            cjne    r2,#0x00,L016007?
02ED 0B        1225            inc     r3
02EE 8000      1226            sjmp    L016007?
02F0           1227   L016011?:
02F0 22        1228            ret
02F1           1229   ;------------------------------------------------------------
02F1           1230   ;Allocation info for local variables in function 'Get_ADC'
02F1           1231   ;------------------------------------------------------------
02F1           1232   ;------------------------------------------------------------
02F1           1233   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:300: unsigned int Get_ADC(void)
02F1           1234   ;        -----------------------------------------
02F1           1235   ;         function Get_ADC
02F1           1236   ;        -----------------------------------------
02F1           1237   _Get_ADC:
02F1           1238   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:302: ADINT = 0;
02F1 C2ED      1239            clr     _ADINT
02F3           1240   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:303: ADBUSY = 1;
02F3 D2EC      1241            setb    _ADBUSY
02F5           1242   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:304: while (!ADINT);
02F5           1243   L017001?:
02F5 30EDD0    1244            jnb     _ADINT,L017001?
02F8           1245   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:305: return (ADC0);
02F8 85BD82    1246            mov     dpl,_ADC0
02FB 85BE83    1247            mov     dph,(_ADC0 >> 8)
02FE 22        1248            ret
02FF           1249   ;------------------------------------------------------------
02FF           1250   ;Allocation info for local variables in function 'main'
02FF           1251   ;------------------------------------------------------------
02FF           1252   ;buffer                    Allocated with name '_main_buffer_1_77'
02FF           1253   ;bsel                      Allocated with name '_main_bsel_1_77'
02FF           1254   ;led                       Allocated with name '_main_led_1_77'
02FF           1255   ;halfPeriod                Allocated to registers r2 r3 r4 r5 
02FF           1256   ;period                    Allocated with name '_main_period_1_77'
02FF           1257   ;freq                      Allocated with name '_main_freq_1_77'
02FF           1258   ;quarterPeriod             Allocated with name '_main_quarterPeriod_1_77'
02FF           1259   ;prev_period               Allocated with name '_main_prev_period_1_77'
02FF           1260   ;vrms_spl                  Allocated with name '_main_vrms_spl_1_77'
02FF           1261   ;vrms_ref                  Allocated with name '_main_vrms_ref_1_77'
02FF           1262   ;phase_diff_deg            Allocated with name '_main_phase_diff_deg_1_77'
02FF           1263   ;phase_diff_time           Allocated with name '_main_phase_diff_time_1_77'
02FF           1264   ;------------------------------------------------------------
02FF           1265   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:309: void main (void)
02FF           1266   ;        -----------------------------------------
02FF           1267   ;         function main
02FF           1268   ;        -----------------------------------------
02FF           1269   _main:
02FF           1270   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:313: int bsel = 0;
02FF E4        1271            clr     a
0300 F5A0      1272            mov     _main_bsel_1_77,a
0302 F5A1      1273            mov     (_main_bsel_1_77 + 1),a
0304           1274   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:314: int led = 1;
0304 75E001    1275            mov     _main_led_1_77,#0x01
0307 E4        1276            clr     a
0308 F5E1      1277            mov     (_main_led_1_77 + 1),a
030A           1278   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:328: LCD_4BIT();
030A 120000    1279            lcall   _LCD_4BIT
030D           1280   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:329: TIMER0_Init();
030D 120000    1281            lcall   _TIMER0_Init
0310           1282   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:331: waitms(500); // Give PuTTy a chance to start before sending
0310 9001F4    1283            mov     dptr,#0x01F4
0313 120000    1284            lcall   _waitms
0316           1285   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:332: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0316 7410      1286            mov     a,#__str_0
0318 C0E0      1287            push    acc
031A 74C1      1288            mov     a,#(__str_0 >> 8)
031C C0E0      1289            push    acc
031E 7480      1290            mov     a,#0x80
0320 C0E0      1291            push    acc
0322 120000    1292            lcall   _printf
0325 1581      1293            dec     sp
0327 1581      1294            dec     sp
0329 1581      1295            dec     sp
032B           1296   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:337: __FILE__, __DATE__, __TIME__);
032B           1297   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:336: "Compiled: %s, %s\n\n",
032B 7490      1298            mov     a,#__str_4
032D C0E0      1299            push    acc
032F 74C1      1300            mov     a,#(__str_4 >> 8)
0331 C0E0      1301            push    acc
0333 7480      1302            mov     a,#0x80
0335 C0E0      1303            push    acc
0337 74D0      1304            mov     a,#__str_3
0339 C0E0      1305            push    acc
033B 74C1      1306            mov     a,#(__str_3 >> 8)
033D C0E0      1307            push    acc
033F 7480      1308            mov     a,#0x80
0341 C0E0      1309            push    acc
0343 7410      1310            mov     a,#__str_2
0345 C0E0      1311            push    acc
0347 74C2      1312            mov     a,#(__str_2 >> 8)
0349 C0E0      1313            push    acc
034B 7480      1314            mov     a,#0x80
034D C0E0      1315            push    acc
034F 7450      1316            mov     a,#__str_1
0351 C0E0      1317            push    acc
0353 74C2      1318            mov     a,#(__str_1 >> 8)
0355 C0E0      1319            push    acc
0357 7480      1320            mov     a,#0x80
0359 C0E0      1321            push    acc
035B 120000    1322            lcall   _printf
035E E581      1323            mov     a,sp
0360 24F4      1324            add     a,#0xf4
0362 F581      1325            mov     sp,a
0364           1326   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:339: InitPinADC(2, 2); // Configure P2.2 as analog input
0364 756002    1327            mov     _InitPinADC_PARM_2,#0x02
0367 758202    1328            mov     dpl,#0x02
036A 120000    1329            lcall   _InitPinADC
036D           1330   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:340: InitPinADC(2, 3); // Configure P2.3 as analog input
036D 756003    1331            mov     _InitPinADC_PARM_2,#0x03
0370 758202    1332            mov     dpl,#0x02
0373 120000    1333            lcall   _InitPinADC
0376           1334   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:341: InitPinADC(2, 4); // Configure P2.4 as analog input
0376 756004    1335            mov     _InitPinADC_PARM_2,#0x04
0379 758202    1336            mov     dpl,#0x02
037C 120000    1337            lcall   _InitPinADC
037F           1338   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:342: InitPinADC(2, 5); // Configure P2.5 as analog input
037F 756005    1339            mov     _InitPinADC_PARM_2,#0x05
0382 758202    1340            mov     dpl,#0x02
0385 120000    1341            lcall   _InitPinADC
0388           1342   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:343: InitPinADC(0, 1);
0388 756001    1343            mov     _InitPinADC_PARM_2,#0x01
038B 758200    1344            mov     dpl,#0x00
038E 120000    1345            lcall   _InitPinADC
0391           1346   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:344: InitADC();
0391 120000    1347            lcall   _InitADC
0394           1348   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:346: prev_period = 10000;      // initilize these to a period value thats impossible to get
0394 751000    1349            mov     _main_prev_period_1_77,#0x00
0397 751140    1350            mov     (_main_prev_period_1_77 + 1),#0x40
039A 75121C    1351            mov     (_main_prev_period_1_77 + 2),#0x1C
039D 751346    1352            mov     (_main_prev_period_1_77 + 3),#0x46
03A0           1353   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:348: while(1)
03A0           1354   L018109?:
03A0           1355   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:352: ADC0MX=REF_SIGNAL;        // <---- PORT FOR REFERENCE SIGNAL
03A0 75BB12    1356            mov     _ADC0MX,#0x12
03A3           1357   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:353: ADINT = 0;
03A3 C2ED      1358            clr     _ADINT
03A5           1359   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:354: ADBUSY=1;
03A5 D2EC      1360            setb    _ADBUSY
03A7           1361   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:355: while (!ADINT);                   // wait for conversion to complete
03A7           1362   L018001?:
03A7 30EDD0    1363            jnb     _ADINT,L018001?
03AA           1364   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:356: while (Get_ADC()!=0);     // wait for signal to be 0
03AA           1365   L018004?:
03AA 120000    1366            lcall   _Get_ADC
03AD E582      1367            mov     a,dpl
03AF 8583F0    1368            mov     b,dph
03B2 45F0      1369            orl     a,b
03B4 7000      1370            jnz     L018004?
03B6           1371   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:357: while (Get_ADC()==0);     // wait for signal to be pos            
03B6           1372   L018007?:
03B6 120000    1373            lcall   _Get_ADC
03B9 E582      1374            mov     a,dpl
03BB 8583F0    1375            mov     b,dph
03BE 45F0      1376            orl     a,b
03C0 6000      1377            jz      L018007?
03C2           1378   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:358: overflow_count = 0;               // reset timer 
03C2 759000    1379            mov     _overflow_count,#0x00
03C5           1380   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:359: TL0=0;
03C5 758A00    1381            mov     _TL0,#0x00
03C8           1382   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:360: TH0=0;
03C8 758C00    1383            mov     _TH0,#0x00
03CB           1384   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:361: TR0=1; // start timer 0           
03CB D28C      1385            setb    _TR0
03CD           1386   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:362: while (Get_ADC()!=0){
03CD           1387   L018012?:
03CD 120000    1388            lcall   _Get_ADC
03D0 E582      1389            mov     a,dpl
03D2 8583F0    1390            mov     b,dph
03D5 45F0      1391            orl     a,b
03D7 6000      1392            jz      L018014?
03D9           1393   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:363: if (TF0==1){
03D9           1394   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:364: TF0=0;
03D9 108D10    1395            jbc     _TF0,L018167?
03DC 8000      1396            sjmp    L018012?
03DE           1397   L018167?:
03DE           1398   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:365: overflow_count++;         // count overflows
03DE 0590      1399            inc     _overflow_count
03E0 8000      1400            sjmp    L018012?
03E2           1401   L018014?:
03E2           1402   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:368: TR0=0; // stop timer 0
03E2 C28C      1403            clr     _TR0
03E4           1404   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:369: halfPeriod=(overflow_count*65536.0 + TH0*256.0 + TL0)*(12.0/SYSCLK);      
03E4 859082    1405            mov     dpl,_overflow_count
03E7 120000    1406            lcall   ___uchar2fs
03EA AE82      1407            mov     r6,dpl
03EC AF83      1408            mov     r7,dph
03EE A8F0      1409            mov     r0,b
03F0 F9        1410            mov     r1,a
03F1 C006      1411            push    ar6
03F3 C007      1412            push    ar7
03F5 C000      1413            push    ar0
03F7 C001      1414            push    ar1
03F9 900000    1415            mov     dptr,#0x0000
03FC 75F080    1416            mov     b,#0x80
03FF 7447      1417            mov     a,#0x47
0401 120000    1418            lcall   ___fsmul
0404 AE82      1419            mov     r6,dpl
0406 AF83      1420            mov     r7,dph
0408 A8F0      1421            mov     r0,b
040A F9        1422            mov     r1,a
040B E581      1423            mov     a,sp
040D 24FC      1424            add     a,#0xfc
040F F581      1425            mov     sp,a
0411 858C82    1426            mov     dpl,_TH0
0414 C006      1427            push    ar6
0416 C007      1428            push    ar7
0418 C000      1429            push    ar0
041A C001      1430            push    ar1
041C 120000    1431            lcall   ___uchar2fs
041F AC82      1432            mov     r4,dpl
0421 AD83      1433            mov     r5,dph
0423 AAF0      1434            mov     r2,b
0425 FB        1435            mov     r3,a
0426 C004      1436            push    ar4
0428 C005      1437            push    ar5
042A C002      1438            push    ar2
042C C003      1439            push    ar3
042E 900000    1440            mov     dptr,#0x0000
0431 75F080    1441            mov     b,#0x80
0434 7443      1442            mov     a,#0x43
0436 120000    1443            lcall   ___fsmul
0439 AA82      1444            mov     r2,dpl
043B AB83      1445            mov     r3,dph
043D ACF0      1446            mov     r4,b
043F FD        1447            mov     r5,a
0440 E581      1448            mov     a,sp
0442 24FC      1449            add     a,#0xfc
0444 F581      1450            mov     sp,a
0446 D001      1451            pop     ar1
0448 D000      1452            pop     ar0
044A D007      1453            pop     ar7
044C D006      1454            pop     ar6
044E C002      1455            push    ar2
0450 C003      1456            push    ar3
0452 C004      1457            push    ar4
0454 C005      1458            push    ar5
0456 8E82      1459            mov     dpl,r6
0458 8F83      1460            mov     dph,r7
045A 88F0      1461            mov     b,r0
045C E9        1462            mov     a,r1
045D 120000    1463            lcall   ___fsadd
0460 AA82      1464            mov     r2,dpl
0462 AB83      1465            mov     r3,dph
0464 ACF0      1466            mov     r4,b
0466 FD        1467            mov     r5,a
0467 E581      1468            mov     a,sp
0469 24FC      1469            add     a,#0xfc
046B F581      1470            mov     sp,a
046D AE8A      1471            mov     r6,_TL0
046F 7F00      1472            mov     r7,#0x00
0471 8E82      1473            mov     dpl,r6
0473 8F83      1474            mov     dph,r7
0475 C002      1475            push    ar2
0477 C003      1476            push    ar3
0479 C004      1477            push    ar4
047B C005      1478            push    ar5
047D 120000    1479            lcall   ___sint2fs
0480 AE82      1480            mov     r6,dpl
0482 AF83      1481            mov     r7,dph
0484 A8F0      1482            mov     r0,b
0486 F9        1483            mov     r1,a
0487 D005      1484            pop     ar5
0489 D004      1485            pop     ar4
048B D003      1486            pop     ar3
048D D002      1487            pop     ar2
048F C006      1488            push    ar6
0491 C007      1489            push    ar7
0493 C000      1490            push    ar0
0495 C001      1491            push    ar1
0497 8A82      1492            mov     dpl,r2
0499 8B83      1493            mov     dph,r3
049B 8CF0      1494            mov     b,r4
049D ED        1495            mov     a,r5
049E 120000    1496            lcall   ___fsadd
04A1 AA82      1497            mov     r2,dpl
04A3 AB83      1498            mov     r3,dph
04A5 ACF0      1499            mov     r4,b
04A7 FD        1500            mov     r5,a
04A8 E581      1501            mov     a,sp
04AA 24FC      1502            add     a,#0xfc
04AC F581      1503            mov     sp,a
04AE C002      1504            push    ar2
04B0 C003      1505            push    ar3
04B2 C004      1506            push    ar4
04B4 C005      1507            push    ar5
04B6 90F4FC    1508            mov     dptr,#0xF4FC
04B9 75F032    1509            mov     b,#0x32
04BC 7434      1510            mov     a,#0x34
04BE 120000    1511            lcall   ___fsmul
04C1 AA82      1512            mov     r2,dpl
04C3 AB83      1513            mov     r3,dph
04C5 ACF0      1514            mov     r4,b
04C7 FD        1515            mov     r5,a
04C8 E581      1516            mov     a,sp
04CA 24FC      1517            add     a,#0xfc
04CC F581      1518            mov     sp,a
04CE           1519   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:370: overflow_count = 0;                       // reset timer post count for redundancy
04CE 759000    1520            mov     _overflow_count,#0x00
04D1           1521   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:371: TL0=0;
04D1 758A00    1522            mov     _TL0,#0x00
04D4           1523   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:372: TH0=0;
04D4 758C00    1524            mov     _TH0,#0x00
04D7           1525   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:373: period = 2.0*halfPeriod;          // period & freq calcs
04D7 C002      1526            push    ar2
04D9 C003      1527            push    ar3
04DB C004      1528            push    ar4
04DD C005      1529            push    ar5
04DF 900000    1530            mov     dptr,#(0x00&0x00ff)
04E2 E4        1531            clr     a
04E3 F5F0      1532            mov     b,a
04E5 7440      1533            mov     a,#0x40
04E7 120000    1534            lcall   ___fsmul
04EA 858230    1535            mov     _main_period_1_77,dpl
04ED 858331    1536            mov     (_main_period_1_77 + 1),dph
04F0 85F032    1537            mov     (_main_period_1_77 + 2),b
04F3 F533      1538            mov     (_main_period_1_77 + 3),a
04F5 E581      1539            mov     a,sp
04F7 24FC      1540            add     a,#0xfc
04F9 F581      1541            mov     sp,a
04FB           1542   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:374: if(period <= 0.0002){             // freq never exceeds 5000 Hz, ignore bad ones          
04FB 7417      1543            mov     a,#0x17
04FD C0E0      1544            push    acc
04FF 74B7      1545            mov     a,#0xB7
0501 C0E0      1546            push    acc
0503 7451      1547            mov     a,#0x51
0505 C0E0      1548            push    acc
0507 7439      1549            mov     a,#0x39
0509 C0E0      1550            push    acc
050B 853082    1551            mov     dpl,_main_period_1_77
050E 853183    1552            mov     dph,(_main_period_1_77 + 1)
0511 8532F0    1553            mov     b,(_main_period_1_77 + 2)
0514 E533      1554            mov     a,(_main_period_1_77 + 3)
0516 120000    1555            lcall   ___fsgt
0519 AE82      1556            mov     r6,dpl
051B E581      1557            mov     a,sp
051D 24FC      1558            add     a,#0xfc
051F F581      1559            mov     sp,a
0521 EE        1560            mov     a,r6
0522 7000      1561            jnz     L018016?
0524           1562   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:375: period = prev_period;     // noise correction
0524 851030    1563            mov     _main_period_1_77,_main_prev_period_1_77
0527 851131    1564            mov     (_main_period_1_77 + 1),(_main_prev_period_1_77 + 1)
052A 851232    1565            mov     (_main_period_1_77 + 2),(_main_prev_period_1_77 + 2)
052D 851333    1566            mov     (_main_period_1_77 + 3),(_main_prev_period_1_77 + 3)
0530 8000      1567            sjmp    L018017?
0532           1568   L018016?:
0532           1569   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:377: prev_period = period;
0532 853010    1570            mov     _main_prev_period_1_77,_main_period_1_77
0535 853111    1571            mov     (_main_prev_period_1_77 + 1),(_main_period_1_77 + 1)
0538 853212    1572            mov     (_main_prev_period_1_77 + 2),(_main_period_1_77 + 2)
053B 853313    1573            mov     (_main_prev_period_1_77 + 3),(_main_period_1_77 + 3)
053E           1574   L018017?:
053E           1575   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:379: freq = 1.0/period;
053E C030      1576            push    _main_period_1_77
0540 C031      1577            push    (_main_period_1_77 + 1)
0542 C032      1578            push    (_main_period_1_77 + 2)
0544 C033      1579            push    (_main_period_1_77 + 3)
0546 900000    1580            mov     dptr,#0x0000
0549 75F080    1581            mov     b,#0x80
054C 743F      1582            mov     a,#0x3F
054E 120000    1583            lcall   ___fsdiv
0551 858270    1584            mov     _main_freq_1_77,dpl
0554 858371    1585            mov     (_main_freq_1_77 + 1),dph
0557 85F072    1586            mov     (_main_freq_1_77 + 2),b
055A F573      1587            mov     (_main_freq_1_77 + 3),a
055C E581      1588            mov     a,sp
055E 24FC      1589            add     a,#0xfc
0560 F581      1590            mov     sp,a
0562           1591   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:380: quarterPeriod = period/4.0;
0562 E4        1592            clr     a
0563 C0E0      1593            push    acc
0565 C0E0      1594            push    acc
0567 7480      1595            mov     a,#0x80
0569 C0E0      1596            push    acc
056B 7440      1597            mov     a,#0x40
056D C0E0      1598            push    acc
056F 853082    1599            mov     dpl,_main_period_1_77
0572 853183    1600            mov     dph,(_main_period_1_77 + 1)
0575 8532F0    1601            mov     b,(_main_period_1_77 + 2)
0578 E533      1602            mov     a,(_main_period_1_77 + 3)
057A 120000    1603            lcall   ___fsdiv
057D 8582C0    1604            mov     _main_quarterPeriod_1_77,dpl
0580 8583C1    1605            mov     (_main_quarterPeriod_1_77 + 1),dph
0583 85F0C2    1606            mov     (_main_quarterPeriod_1_77 + 2),b
0586 F5C3      1607            mov     (_main_quarterPeriod_1_77 + 3),a
0588 E581      1608            mov     a,sp
058A 24FC      1609            add     a,#0xfc
058C F581      1610            mov     sp,a
058E           1611   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:383: ADINT = 0;
058E C2ED      1612            clr     _ADINT
0590           1613   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:384: ADBUSY=1;
0590 D2EC      1614            setb    _ADBUSY
0592           1615   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:385: while (!ADINT);                           // wait for conversion to complete
0592           1616   L018018?:
0592 30EDD0    1617            jnb     _ADINT,L018018?
0595           1618   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:387: while (Get_ADC()!=0);     // wait for signal to be 0
0595           1619   L018021?:
0595 120000    1620            lcall   _Get_ADC
0598 E582      1621            mov     a,dpl
059A 8583F0    1622            mov     b,dph
059D 45F0      1623            orl     a,b
059F 7000      1624            jnz     L018021?
05A1           1625   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:388: while (Get_ADC()==0);     // wait for signal to be pos
05A1           1626   L018024?:
05A1 120000    1627            lcall   _Get_ADC
05A4 E582      1628            mov     a,dpl
05A6 8583F0    1629            mov     b,dph
05A9 45F0      1630            orl     a,b
05AB 6000      1631            jz      L018024?
05AD           1632   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:389: Timer3us(20);                     
05AD 758214    1633            mov     dpl,#0x14
05B0 120000    1634            lcall   _Timer3us
05B3           1635   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:390: }while(Get_ADC()==0);             // (**SUPER NECESARY**) check if adc aint lying, mitigates noise
05B3 120000    1636            lcall   _Get_ADC
05B6 E582      1637            mov     a,dpl
05B8 8583F0    1638            mov     b,dph
05BB 45F0      1639            orl     a,b
05BD 6000      1640            jz      L018021?
05BF           1641   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:391: wait100us(quarterPeriod*1000*10);
05BF C0C0      1642            push    _main_quarterPeriod_1_77
05C1 C0C1      1643            push    (_main_quarterPeriod_1_77 + 1)
05C3 C0C2      1644            push    (_main_quarterPeriod_1_77 + 2)
05C5 C0C3      1645            push    (_main_quarterPeriod_1_77 + 3)
05C7 904000    1646            mov     dptr,#0x4000
05CA 75F01C    1647            mov     b,#0x1C
05CD 7446      1648            mov     a,#0x46
05CF 120000    1649            lcall   ___fsmul
05D2 AE82      1650            mov     r6,dpl
05D4 AF83      1651            mov     r7,dph
05D6 A8F0      1652            mov     r0,b
05D8 F9        1653            mov     r1,a
05D9 E581      1654            mov     a,sp
05DB 24FC      1655            add     a,#0xfc
05DD F581      1656            mov     sp,a
05DF 8E82      1657            mov     dpl,r6
05E1 8F83      1658            mov     dph,r7
05E3 88F0      1659            mov     b,r0
05E5 E9        1660            mov     a,r1
05E6 120000    1661            lcall   ___fs2ulong
05E9 AE82      1662            mov     r6,dpl
05EB AF83      1663            mov     r7,dph
05ED A8F0      1664            mov     r0,b
05EF F9        1665            mov     r1,a
05F0 C006      1666            push    ar6
05F2 C007      1667            push    ar7
05F4 C000      1668            push    ar0
05F6 C001      1669            push    ar1
05F8 120000    1670            lcall   _wait100us
05FB           1671   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:392: vrms_ref = Volts_at_Pin(REF_SIGNAL)*0.707106781187; // grabs vmax 1/4 T later from 0-cross
05FB 758212    1672            mov     dpl,#0x12
05FE 120000    1673            lcall   _Volts_at_Pin
0601 AA82      1674            mov     r2,dpl
0603 AB83      1675            mov     r3,dph
0605 ACF0      1676            mov     r4,b
0607 FD        1677            mov     r5,a
0608 C002      1678            push    ar2
060A C003      1679            push    ar3
060C C004      1680            push    ar4
060E C005      1681            push    ar5
0610 9004F3    1682            mov     dptr,#0x04F3
0613 75F035    1683            mov     b,#0x35
0616 743F      1684            mov     a,#0x3F
0618 120000    1685            lcall   ___fsmul
061B 8582B0    1686            mov     _main_vrms_ref_1_77,dpl
061E 8583B1    1687            mov     (_main_vrms_ref_1_77 + 1),dph
0621 85F0B2    1688            mov     (_main_vrms_ref_1_77 + 2),b
0624 F5B3      1689            mov     (_main_vrms_ref_1_77 + 3),a
0626 E581      1690            mov     a,sp
0628 24FC      1691            add     a,#0xfc
062A F581      1692            mov     sp,a
062C           1693   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:394: waitms(50); // some delay very good
062C 900032    1694            mov     dptr,#0x0032
062F 120000    1695            lcall   _waitms
0632 D001      1696            pop     ar1
0634 D000      1697            pop     ar0
0636 D007      1698            pop     ar7
0638 D006      1699            pop     ar6
063A           1700   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:397: ADC0MX=SPL_SIGNAL;                        // start tracking SPL signal
063A 75BB11    1701            mov     _ADC0MX,#0x11
063D           1702   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:398: ADINT = 0;
063D C2ED      1703            clr     _ADINT
063F           1704   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:399: ADBUSY=1;
063F D2EC      1705            setb    _ADBUSY
0641           1706   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:400: while (!ADINT);                           // wait for conversion to complete
0641           1707   L018030?:
0641 30EDD0    1708            jnb     _ADINT,L018030?
0644           1709   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:402: while (Get_ADC()!=0);     // wait for signal to be 0
0644           1710   L018033?:
0644 C006      1711            push    ar6
0646 C007      1712            push    ar7
0648 C000      1713            push    ar0
064A C001      1714            push    ar1
064C 120000    1715            lcall   _Get_ADC
064F E582      1716            mov     a,dpl
0651 8583F0    1717            mov     b,dph
0654 D001      1718            pop     ar1
0656 D000      1719            pop     ar0
0658 D007      1720            pop     ar7
065A D006      1721            pop     ar6
065C 45F0      1722            orl     a,b
065E 7000      1723            jnz     L018033?
0660           1724   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:403: while (Get_ADC()==0);     // wait for signal to be pos
0660           1725   L018036?:
0660 C006      1726            push    ar6
0662 C007      1727            push    ar7
0664 C000      1728            push    ar0
0666 C001      1729            push    ar1
0668 120000    1730            lcall   _Get_ADC
066B E582      1731            mov     a,dpl
066D 8583F0    1732            mov     b,dph
0670 D001      1733            pop     ar1
0672 D000      1734            pop     ar0
0674 D007      1735            pop     ar7
0676 D006      1736            pop     ar6
0678 45F0      1737            orl     a,b
067A 6000      1738            jz      L018036?
067C           1739   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:404: Timer3us(20);
067C 758214    1740            mov     dpl,#0x14
067F C006      1741            push    ar6
0681 C007      1742            push    ar7
0683 C000      1743            push    ar0
0685 C001      1744            push    ar1
0687 120000    1745            lcall   _Timer3us
068A           1746   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:405: }while(Get_ADC()==0);             // check if adc aint lying, mitigates noise
068A 120000    1747            lcall   _Get_ADC
068D E582      1748            mov     a,dpl
068F 8583F0    1749            mov     b,dph
0692 D001      1750            pop     ar1
0694 D000      1751            pop     ar0
0696 D007      1752            pop     ar7
0698 D006      1753            pop     ar6
069A 45F0      1754            orl     a,b
069C 6000      1755            jz      L018033?
069E           1756   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:406: wait100us(quarterPeriod*1000*10);
069E 8E82      1757            mov     dpl,r6
06A0 8F83      1758            mov     dph,r7
06A2 88F0      1759            mov     b,r0
06A4 E9        1760            mov     a,r1
06A5 120000    1761            lcall   _wait100us
06A8           1762   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:407: vrms_spl = Volts_at_Pin(SPL_SIGNAL)*0.707106781187; // grabs vrms 1/4 T later from 0-cross
06A8 758211    1763            mov     dpl,#0x11
06AB 120000    1764            lcall   _Volts_at_Pin
06AE AE82      1765            mov     r6,dpl
06B0 AF83      1766            mov     r7,dph
06B2 A8F0      1767            mov     r0,b
06B4 F9        1768            mov     r1,a
06B5 C006      1769            push    ar6
06B7 C007      1770            push    ar7
06B9 C000      1771            push    ar0
06BB C001      1772            push    ar1
06BD 9004F3    1773            mov     dptr,#0x04F3
06C0 75F035    1774            mov     b,#0x35
06C3 743F      1775            mov     a,#0x3F
06C5 120000    1776            lcall   ___fsmul
06C8 858260    1777            mov     _main_vrms_spl_1_77,dpl
06CB 858361    1778            mov     (_main_vrms_spl_1_77 + 1),dph
06CE 85F062    1779            mov     (_main_vrms_spl_1_77 + 2),b
06D1 F563      1780            mov     (_main_vrms_spl_1_77 + 3),a
06D3 E581      1781            mov     a,sp
06D5 24FC      1782            add     a,#0xfc
06D7 F581      1783            mov     sp,a
06D9           1784   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:413: ADINT = 0;
06D9 C2ED      1785            clr     _ADINT
06DB           1786   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:414: ADBUSY=1;
06DB D2EC      1787            setb    _ADBUSY
06DD           1788   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:415: while (!ADINT);                           // wait for adc conversion to complete
06DD           1789   L018042?:
06DD 30ED90    1790            jnb     _ADINT,L018042?
06E0           1791   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:417: while (Get_ADC()!=0);     // wait for 0 cross
06E0           1792   L018045?:
06E0 120000    1793            lcall   _Get_ADC
06E3 E582      1794            mov     a,dpl
06E5 8583F0    1795            mov     b,dph
06E8 45F0      1796            orl     a,b
06EA 7000      1797            jnz     L018045?
06EC           1798   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:418: while (Get_ADC()==0);     
06EC           1799   L018048?:
06EC 120000    1800            lcall   _Get_ADC
06EF E582      1801            mov     a,dpl
06F1 8583F0    1802            mov     b,dph
06F4 45F0      1803            orl     a,b
06F6 6000      1804            jz      L018048?
06F8           1805   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:419: Timer3us(20);
06F8 758214    1806            mov     dpl,#0x14
06FB 120000    1807            lcall   _Timer3us
06FE           1808   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:420: }while(Get_ADC()==0);
06FE 120000    1809            lcall   _Get_ADC
0701 E582      1810            mov     a,dpl
0703 8583F0    1811            mov     b,dph
0706 45F0      1812            orl     a,b
0708 6000      1813            jz      L018045?
070A           1814   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:423: overflow_count = 0;
070A 759000    1815            mov     _overflow_count,#0x00
070D           1816   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:425: TL0=0;                                    // clear timer 0
070D 758A00    1817            mov     _TL0,#0x00
0710           1818   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:426: TH0=0;
0710 758C00    1819            mov     _TH0,#0x00
0713           1820   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:427: TR0=1;                                    // start timer 0
0713 D28C      1821            setb    _TR0
0715           1822   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:430: ADC0MX=REF_SIGNAL;                        // start tracking REF signal
0715 75BB12    1823            mov     _ADC0MX,#0x12
0718           1824   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:431: ADINT = 0;
0718 C2ED      1825            clr     _ADINT
071A           1826   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:432: ADBUSY=1;
071A D2EC      1827            setb    _ADBUSY
071C           1828   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:433: while (!ADINT);                           // wait for adc conversion to complete
071C           1829   L018054?:
071C 30ED50    1830            jnb     _ADINT,L018054?
071F           1831   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:435: while (Get_ADC()!=0);             // wait for REF signal to be 0
071F           1832   L018057?:
071F 120000    1833            lcall   _Get_ADC
0722 E582      1834            mov     a,dpl
0724 8583F0    1835            mov     b,dph
0727 45F0      1836            orl     a,b
0729 7000      1837            jnz     L018057?
072B           1838   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:436: while (Get_ADC()==0){             // wait for REF signal to be positive
072B           1839   L018062?:
072B 120000    1840            lcall   _Get_ADC
072E E582      1841            mov     a,dpl
0730 8583F0    1842            mov     b,dph
0733 45F0      1843            orl     a,b
0735 7000      1844            jnz     L018066?
0737           1845   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:437: if (TF0==1){
0737           1846   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:438: TF0=0;
0737 108D50    1847            jbc     _TF0,L018184?
073A 8000      1848            sjmp    L018062?
073C           1849   L018184?:
073C           1850   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:439: overflow_count++;         // count overflows
073C 0590      1851            inc     _overflow_count
073E 8000      1852            sjmp    L018062?
0740           1853   L018066?:
0740           1854   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:442: }while(Get_ADC()==0); // Check if REALLYMREALLYM POSITIVE!!!!!!!! :DDDDDD
0740 120000    1855            lcall   _Get_ADC
0743 E582      1856            mov     a,dpl
0745 8583F0    1857            mov     b,dph
0748 45F0      1858            orl     a,b
074A 6000      1859            jz      L018057?
074C           1860   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:446: TR0=0; // stop timer 0    
074C C28C      1861            clr     _TR0
074E           1862   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:447: phase_diff_time = (overflow_count*65536.0 + TH0*256.0 + TL0)*(12.0/SYSCLK); 
074E 859082    1863            mov     dpl,_overflow_count
0751 120000    1864            lcall   ___uchar2fs
0754 AE82      1865            mov     r6,dpl
0756 AF83      1866            mov     r7,dph
0758 A8F0      1867            mov     r0,b
075A F9        1868            mov     r1,a
075B C006      1869            push    ar6
075D C007      1870            push    ar7
075F C000      1871            push    ar0
0761 C001      1872            push    ar1
0763 900000    1873            mov     dptr,#0x0000
0766 75F080    1874            mov     b,#0x80
0769 7447      1875            mov     a,#0x47
076B 120000    1876            lcall   ___fsmul
076E AE82      1877            mov     r6,dpl
0770 AF83      1878            mov     r7,dph
0772 A8F0      1879            mov     r0,b
0774 F9        1880            mov     r1,a
0775 E581      1881            mov     a,sp
0777 24FC      1882            add     a,#0xfc
0779 F581      1883            mov     sp,a
077B 858C82    1884            mov     dpl,_TH0
077E C006      1885            push    ar6
0780 C007      1886            push    ar7
0782 C000      1887            push    ar0
0784 C001      1888            push    ar1
0786 120000    1889            lcall   ___uchar2fs
0789 AA82      1890            mov     r2,dpl
078B AB83      1891            mov     r3,dph
078D ACF0      1892            mov     r4,b
078F FD        1893            mov     r5,a
0790 C002      1894            push    ar2
0792 C003      1895            push    ar3
0794 C004      1896            push    ar4
0796 C005      1897            push    ar5
0798 900000    1898            mov     dptr,#0x0000
079B 75F080    1899            mov     b,#0x80
079E 7443      1900            mov     a,#0x43
07A0 120000    1901            lcall   ___fsmul
07A3 AA82      1902            mov     r2,dpl
07A5 AB83      1903            mov     r3,dph
07A7 ACF0      1904            mov     r4,b
07A9 FD        1905            mov     r5,a
07AA E581      1906            mov     a,sp
07AC 24FC      1907            add     a,#0xfc
07AE F581      1908            mov     sp,a
07B0 D001      1909            pop     ar1
07B2 D000      1910            pop     ar0
07B4 D007      1911            pop     ar7
07B6 D006      1912            pop     ar6
07B8 C002      1913            push    ar2
07BA C003      1914            push    ar3
07BC C004      1915            push    ar4
07BE C005      1916            push    ar5
07C0 8E82      1917            mov     dpl,r6
07C2 8F83      1918            mov     dph,r7
07C4 88F0      1919            mov     b,r0
07C6 E9        1920            mov     a,r1
07C7 120000    1921            lcall   ___fsadd
07CA AA82      1922            mov     r2,dpl
07CC AB83      1923            mov     r3,dph
07CE ACF0      1924            mov     r4,b
07D0 FD        1925            mov     r5,a
07D1 E581      1926            mov     a,sp
07D3 24FC      1927            add     a,#0xfc
07D5 F581      1928            mov     sp,a
07D7 AE8A      1929            mov     r6,_TL0
07D9 7F00      1930            mov     r7,#0x00
07DB 8E82      1931            mov     dpl,r6
07DD 8F83      1932            mov     dph,r7
07DF C002      1933            push    ar2
07E1 C003      1934            push    ar3
07E3 C004      1935            push    ar4
07E5 C005      1936            push    ar5
07E7 120000    1937            lcall   ___sint2fs
07EA AE82      1938            mov     r6,dpl
07EC AF83      1939            mov     r7,dph
07EE A8F0      1940            mov     r0,b
07F0 F9        1941            mov     r1,a
07F1 D005      1942            pop     ar5
07F3 D004      1943            pop     ar4
07F5 D003      1944            pop     ar3
07F7 D002      1945            pop     ar2
07F9 C006      1946            push    ar6
07FB C007      1947            push    ar7
07FD C000      1948            push    ar0
07FF C001      1949            push    ar1
0801 8A82      1950            mov     dpl,r2
0803 8B83      1951            mov     dph,r3
0805 8CF0      1952            mov     b,r4
0807 ED        1953            mov     a,r5
0808 120000    1954            lcall   ___fsadd
080B AA82      1955            mov     r2,dpl
080D AB83      1956            mov     r3,dph
080F ACF0      1957            mov     r4,b
0811 FD        1958            mov     r5,a
0812 E581      1959            mov     a,sp
0814 24FC      1960            add     a,#0xfc
0816 F581      1961            mov     sp,a
0818 C002      1962            push    ar2
081A C003      1963            push    ar3
081C C004      1964            push    ar4
081E C005      1965            push    ar5
0820 90F4FC    1966            mov     dptr,#0xF4FC
0823 75F032    1967            mov     b,#0x32
0826 7434      1968            mov     a,#0x34
0828 120000    1969            lcall   ___fsmul
082B 858250    1970            mov     _main_phase_diff_time_1_77,dpl
082E 858351    1971            mov     (_main_phase_diff_time_1_77 + 1),dph
0831 85F052    1972            mov     (_main_phase_diff_time_1_77 + 2),b
0834 F553      1973            mov     (_main_phase_diff_time_1_77 + 3),a
0836 E581      1974            mov     a,sp
0838 24FC      1975            add     a,#0xfc
083A F581      1976            mov     sp,a
083C           1977   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:451: phase_diff_deg = (phase_diff_time * 360)/period;
083C C050      1978            push    _main_phase_diff_time_1_77
083E C051      1979            push    (_main_phase_diff_time_1_77 + 1)
0840 C052      1980            push    (_main_phase_diff_time_1_77 + 2)
0842 C053      1981            push    (_main_phase_diff_time_1_77 + 3)
0844 900000    1982            mov     dptr,#0x0000
0847 75F0B4    1983            mov     b,#0xB4
084A 7443      1984            mov     a,#0x43
084C 120000    1985            lcall   ___fsmul
084F AE82      1986            mov     r6,dpl
0851 AF83      1987            mov     r7,dph
0853 A8F0      1988            mov     r0,b
0855 F9        1989            mov     r1,a
0856 E581      1990            mov     a,sp
0858 24FC      1991            add     a,#0xfc
085A F581      1992            mov     sp,a
085C C030      1993            push    _main_period_1_77
085E C031      1994            push    (_main_period_1_77 + 1)
0860 C032      1995            push    (_main_period_1_77 + 2)
0862 C033      1996            push    (_main_period_1_77 + 3)
0864 8E82      1997            mov     dpl,r6
0866 8F83      1998            mov     dph,r7
0868 88F0      1999            mov     b,r0
086A E9        2000            mov     a,r1
086B 120000    2001            lcall   ___fsdiv
086E 858200    2002            mov     _main_phase_diff_deg_1_77,dpl
0871 858301    2003            mov     (_main_phase_diff_deg_1_77 + 1),dph
0874 85F002    2004            mov     (_main_phase_diff_deg_1_77 + 2),b
0877 F503      2005            mov     (_main_phase_diff_deg_1_77 + 3),a
0879 E581      2006            mov     a,sp
087B 24FC      2007            add     a,#0xfc
087D F581      2008            mov     sp,a
087F           2009   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:452: TL0=0;
087F 758A00    2010            mov     _TL0,#0x00
0882           2011   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:453: TH0=0;
0882 758C00    2012            mov     _TH0,#0x00
0885           2013   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:454: overflow_count = 0;       // stop timer
0885 759000    2014            mov     _overflow_count,#0x00
0888           2015   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:457: while(phase_diff_deg < -180){
0888           2016   L018068?:
0888 E4        2017            clr     a
0889 C0E0      2018            push    acc
088B C0E0      2019            push    acc
088D 7434      2020            mov     a,#0x34
088F C0E0      2021            push    acc
0891 74C3      2022            mov     a,#0xC3
0893 C0E0      2023            push    acc
0895 850082    2024            mov     dpl,_main_phase_diff_deg_1_77
0898 850183    2025            mov     dph,(_main_phase_diff_deg_1_77 + 1)
089B 8502F0    2026            mov     b,(_main_phase_diff_deg_1_77 + 2)
089E E503      2027            mov     a,(_main_phase_diff_deg_1_77 + 3)
08A0 120000    2028            lcall   ___fslt
08A3 AA82      2029            mov     r2,dpl
08A5 E581      2030            mov     a,sp
08A7 24FC      2031            add     a,#0xfc
08A9 F581      2032            mov     sp,a
08AB EA        2033            mov     a,r2
08AC 6000      2034            jz      L018071?
08AE           2035   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:458: phase_diff_deg += 360;
08AE E4        2036            clr     a
08AF C0E0      2037            push    acc
08B1 C0E0      2038            push    acc
08B3 74B4      2039            mov     a,#0xB4
08B5 C0E0      2040            push    acc
08B7 7443      2041            mov     a,#0x43
08B9 C0E0      2042            push    acc
08BB 850082    2043            mov     dpl,_main_phase_diff_deg_1_77
08BE 850183    2044            mov     dph,(_main_phase_diff_deg_1_77 + 1)
08C1 8502F0    2045            mov     b,(_main_phase_diff_deg_1_77 + 2)
08C4 E503      2046            mov     a,(_main_phase_diff_deg_1_77 + 3)
08C6 120000    2047            lcall   ___fsadd
08C9 858200    2048            mov     _main_phase_diff_deg_1_77,dpl
08CC 858301    2049            mov     (_main_phase_diff_deg_1_77 + 1),dph
08CF 85F002    2050            mov     (_main_phase_diff_deg_1_77 + 2),b
08D2 F503      2051            mov     (_main_phase_diff_deg_1_77 + 3),a
08D4 E581      2052            mov     a,sp
08D6 24FC      2053            add     a,#0xfc
08D8 F581      2054            mov     sp,a
08DA           2055   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:461: while(phase_diff_deg > 180){
08DA 8000      2056            sjmp    L018068?
08DC           2057   L018071?:
08DC E4        2058            clr     a
08DD C0E0      2059            push    acc
08DF C0E0      2060            push    acc
08E1 7434      2061            mov     a,#0x34
08E3 C0E0      2062            push    acc
08E5 7443      2063            mov     a,#0x43
08E7 C0E0      2064            push    acc
08E9 850082    2065            mov     dpl,_main_phase_diff_deg_1_77
08EC 850183    2066            mov     dph,(_main_phase_diff_deg_1_77 + 1)
08EF 8502F0    2067            mov     b,(_main_phase_diff_deg_1_77 + 2)
08F2 E503      2068            mov     a,(_main_phase_diff_deg_1_77 + 3)
08F4 120000    2069            lcall   ___fsgt
08F7 AA82      2070            mov     r2,dpl
08F9 E581      2071            mov     a,sp
08FB 24FC      2072            add     a,#0xfc
08FD F581      2073            mov     sp,a
08FF EA        2074            mov     a,r2
0900 6000      2075            jz      L018073?
0902           2076   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:462: phase_diff_deg -= 360;
0902 E4        2077            clr     a
0903 C0E0      2078            push    acc
0905 C0E0      2079            push    acc
0907 74B4      2080            mov     a,#0xB4
0909 C0E0      2081            push    acc
090B 7443      2082            mov     a,#0x43
090D C0E0      2083            push    acc
090F 850082    2084            mov     dpl,_main_phase_diff_deg_1_77
0912 850183    2085            mov     dph,(_main_phase_diff_deg_1_77 + 1)
0915 8502F0    2086            mov     b,(_main_phase_diff_deg_1_77 + 2)
0918 E503      2087            mov     a,(_main_phase_diff_deg_1_77 + 3)
091A 120000    2088            lcall   ___fssub
091D 858200    2089            mov     _main_phase_diff_deg_1_77,dpl
0920 858301    2090            mov     (_main_phase_diff_deg_1_77 + 1),dph
0923 85F002    2091            mov     (_main_phase_diff_deg_1_77 + 2),b
0926 F503      2092            mov     (_main_phase_diff_deg_1_77 + 3),a
0928 E581      2093            mov     a,sp
092A 24FC      2094            add     a,#0xfc
092C F581      2095            mov     sp,a
092E 8000      2096            sjmp    L018071?
0930           2097   L018073?:
0930           2098   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:465: if(phase_diff_deg > 0){
0930 E4        2099            clr     a
0931 C0E0      2100            push    acc
0933 C0E0      2101            push    acc
0935 C0E0      2102            push    acc
0937 C0E0      2103            push    acc
0939 850082    2104            mov     dpl,_main_phase_diff_deg_1_77
093C 850183    2105            mov     dph,(_main_phase_diff_deg_1_77 + 1)
093F 8502F0    2106            mov     b,(_main_phase_diff_deg_1_77 + 2)
0942 E503      2107            mov     a,(_main_phase_diff_deg_1_77 + 3)
0944 120000    2108            lcall   ___fsgt
0947 AA82      2109            mov     r2,dpl
0949 E581      2110            mov     a,sp
094B 24FC      2111            add     a,#0xfc
094D F581      2112            mov     sp,a
094F EA        2113            mov     a,r2
0950 6000      2114            jz      L018077?
0952           2115   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:466: phase_diff_deg += 0.5;
0952 E4        2116            clr     a
0953 C0E0      2117            push    acc
0955 C0E0      2118            push    acc
0957 C0E0      2119            push    acc
0959 743F      2120            mov     a,#0x3F
095B C0E0      2121            push    acc
095D 850082    2122            mov     dpl,_main_phase_diff_deg_1_77
0960 850183    2123            mov     dph,(_main_phase_diff_deg_1_77 + 1)
0963 8502F0    2124            mov     b,(_main_phase_diff_deg_1_77 + 2)
0966 E503      2125            mov     a,(_main_phase_diff_deg_1_77 + 3)
0968 120000    2126            lcall   ___fsadd
096B 858200    2127            mov     _main_phase_diff_deg_1_77,dpl
096E 858301    2128            mov     (_main_phase_diff_deg_1_77 + 1),dph
0971 85F002    2129            mov     (_main_phase_diff_deg_1_77 + 2),b
0974 F503      2130            mov     (_main_phase_diff_deg_1_77 + 3),a
0976 E581      2131            mov     a,sp
0978 24FC      2132            add     a,#0xfc
097A F581      2133            mov     sp,a
097C 8000      2134            sjmp    L018078?
097E           2135   L018077?:
097E           2136   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:467: }else if(phase_diff_deg < 0){
097E E4        2137            clr     a
097F C0E0      2138            push    acc
0981 C0E0      2139            push    acc
0983 C0E0      2140            push    acc
0985 C0E0      2141            push    acc
0987 850082    2142            mov     dpl,_main_phase_diff_deg_1_77
098A 850183    2143            mov     dph,(_main_phase_diff_deg_1_77 + 1)
098D 8502F0    2144            mov     b,(_main_phase_diff_deg_1_77 + 2)
0990 E503      2145            mov     a,(_main_phase_diff_deg_1_77 + 3)
0992 120000    2146            lcall   ___fslt
0995 AA82      2147            mov     r2,dpl
0997 E581      2148            mov     a,sp
0999 24FC      2149            add     a,#0xfc
099B F581      2150            mov     sp,a
099D EA        2151            mov     a,r2
099E 6000      2152            jz      L018078?
09A0           2153   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:468: phase_diff_deg -= 1.5;
09A0 E4        2154            clr     a
09A1 C0E0      2155            push    acc
09A3 C0E0      2156            push    acc
09A5 74C0      2157            mov     a,#0xC0
09A7 C0E0      2158            push    acc
09A9 743F      2159            mov     a,#0x3F
09AB C0E0      2160            push    acc
09AD 850082    2161            mov     dpl,_main_phase_diff_deg_1_77
09B0 850183    2162            mov     dph,(_main_phase_diff_deg_1_77 + 1)
09B3 8502F0    2163            mov     b,(_main_phase_diff_deg_1_77 + 2)
09B6 E503      2164            mov     a,(_main_phase_diff_deg_1_77 + 3)
09B8 120000    2165            lcall   ___fssub
09BB 858200    2166            mov     _main_phase_diff_deg_1_77,dpl
09BE 858301    2167            mov     (_main_phase_diff_deg_1_77 + 1),dph
09C1 85F002    2168            mov     (_main_phase_diff_deg_1_77 + 2),b
09C4 F503      2169            mov     (_main_phase_diff_deg_1_77 + 3),a
09C6 E581      2170            mov     a,sp
09C8 24FC      2171            add     a,#0xfc
09CA F581      2172            mov     sp,a
09CC           2173   L018078?:
09CC           2174   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:471: if((BT1 == 0) && (bsel == 0)){
09CC 20B350    2175            jb      _P3_3,L018087?
09CF E5A0      2176            mov     a,_main_bsel_1_77
09D1 45A1      2177            orl     a,(_main_bsel_1_77 + 1)
09D3 7000      2178            jnz     L018087?
09D5           2179   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:472: bsel = 1;
09D5 75A001    2180            mov     _main_bsel_1_77,#0x01
09D8 E4        2181            clr     a
09D9 F5A1      2182            mov     (_main_bsel_1_77 + 1),a
09DB 8000      2183            sjmp    L018088?
09DD           2184   L018087?:
09DD           2185   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:473: } else if((BT1 == 0) && (bsel == 1)){
09DD 20B3D0    2186            jb      _P3_3,L018083?
09E0 7401      2187            mov     a,#0x01
09E2 B5A010    2188            cjne    a,_main_bsel_1_77,L018193?
09E5 E4        2189            clr     a
09E6 B5A110    2190            cjne    a,(_main_bsel_1_77 + 1),L018193?
09E9 8000      2191            sjmp    L018194?
09EB           2192   L018193?:
09EB 8000      2193            sjmp    L018083?
09ED           2194   L018194?:
09ED           2195   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:474: bsel = 2;
09ED 75A002    2196            mov     _main_bsel_1_77,#0x02
09F0 E4        2197            clr     a
09F1 F5A1      2198            mov     (_main_bsel_1_77 + 1),a
09F3 8000      2199            sjmp    L018088?
09F5           2200   L018083?:
09F5           2201   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:475: } else if((BT1 == 0) && (bsel == 2)){
09F5 20B390    2202            jb      _P3_3,L018088?
09F8 7402      2203            mov     a,#0x02
09FA B5A090    2204            cjne    a,_main_bsel_1_77,L018196?
09FD E4        2205            clr     a
09FE B5A190    2206            cjne    a,(_main_bsel_1_77 + 1),L018196?
0A01 8000      2207            sjmp    L018197?
0A03           2208   L018196?:
0A03 8000      2209            sjmp    L018088?
0A05           2210   L018197?:
0A05           2211   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:476: bsel = 0;
0A05 E4        2212            clr     a
0A06 F5A0      2213            mov     _main_bsel_1_77,a
0A08 F5A1      2214            mov     (_main_bsel_1_77 + 1),a
0A0A           2215   L018088?:
0A0A           2216   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:479: if((BT2 == 0) && (led == 0)){
0A0A 20B010    2217            jb      _P3_0,L018094?
0A0D E5E0      2218            mov     a,_main_led_1_77
0A0F 45E1      2219            orl     a,(_main_led_1_77 + 1)
0A11 7000      2220            jnz     L018094?
0A13           2221   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:480: led = 1;
0A13 75E001    2222            mov     _main_led_1_77,#0x01
0A16 E4        2223            clr     a
0A17 F5E1      2224            mov     (_main_led_1_77 + 1),a
0A19 8000      2225            sjmp    L018095?
0A1B           2226   L018094?:
0A1B           2227   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:481: }else if((BT2 == 0) && (led == 1)){
0A1B 20B050    2228            jb      _P3_0,L018095?
0A1E 7401      2229            mov     a,#0x01
0A20 B5E090    2230            cjne    a,_main_led_1_77,L018201?
0A23 E4        2231            clr     a
0A24 B5E190    2232            cjne    a,(_main_led_1_77 + 1),L018201?
0A27 8000      2233            sjmp    L018202?
0A29           2234   L018201?:
0A29 8000      2235            sjmp    L018095?
0A2B           2236   L018202?:
0A2B           2237   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:482: led = 0;
0A2B E4        2238            clr     a
0A2C F5E0      2239            mov     _main_led_1_77,a
0A2E F5E1      2240            mov     (_main_led_1_77 + 1),a
0A30           2241   L018095?:
0A30           2242   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:486: printf("Period(T):  %7.6f ms  Freq(f):  %7.6f Hz \n",period*1000, freq);
0A30 C030      2243            push    _main_period_1_77
0A32 C031      2244            push    (_main_period_1_77 + 1)
0A34 C032      2245            push    (_main_period_1_77 + 2)
0A36 C033      2246            push    (_main_period_1_77 + 3)
0A38 900000    2247            mov     dptr,#0x0000
0A3B 75F07A    2248            mov     b,#0x7A
0A3E 7444      2249            mov     a,#0x44
0A40 120000    2250            lcall   ___fsmul
0A43 AA82      2251            mov     r2,dpl
0A45 AB83      2252            mov     r3,dph
0A47 ACF0      2253            mov     r4,b
0A49 FD        2254            mov     r5,a
0A4A E581      2255            mov     a,sp
0A4C 24FC      2256            add     a,#0xfc
0A4E F581      2257            mov     sp,a
0A50 C002      2258            push    ar2
0A52 C003      2259            push    ar3
0A54 C004      2260            push    ar4
0A56 C005      2261            push    ar5
0A58 C070      2262            push    _main_freq_1_77
0A5A C071      2263            push    (_main_freq_1_77 + 1)
0A5C C072      2264            push    (_main_freq_1_77 + 2)
0A5E C073      2265            push    (_main_freq_1_77 + 3)
0A60 C002      2266            push    ar2
0A62 C003      2267            push    ar3
0A64 C004      2268            push    ar4
0A66 C005      2269            push    ar5
0A68 7410      2270            mov     a,#__str_5
0A6A C0E0      2271            push    acc
0A6C 74CE      2272            mov     a,#(__str_5 >> 8)
0A6E C0E0      2273            push    acc
0A70 7480      2274            mov     a,#0x80
0A72 C0E0      2275            push    acc
0A74 120000    2276            lcall   _printf
0A77 E581      2277            mov     a,sp
0A79 24F5      2278            add     a,#0xf5
0A7B F581      2279            mov     sp,a
0A7D           2280   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:487: printf("1/4 Period: %7.6f ms\n", quarterPeriod*1000);
0A7D C0C0      2281            push    _main_quarterPeriod_1_77
0A7F C0C1      2282            push    (_main_quarterPeriod_1_77 + 1)
0A81 C0C2      2283            push    (_main_quarterPeriod_1_77 + 2)
0A83 C0C3      2284            push    (_main_quarterPeriod_1_77 + 3)
0A85 900000    2285            mov     dptr,#0x0000
0A88 75F07A    2286            mov     b,#0x7A
0A8B 7444      2287            mov     a,#0x44
0A8D 120000    2288            lcall   ___fsmul
0A90 AE82      2289            mov     r6,dpl
0A92 AF83      2290            mov     r7,dph
0A94 A8F0      2291            mov     r0,b
0A96 F9        2292            mov     r1,a
0A97 E581      2293            mov     a,sp
0A99 24FC      2294            add     a,#0xfc
0A9B F581      2295            mov     sp,a
0A9D C006      2296            push    ar6
0A9F C007      2297            push    ar7
0AA1 C000      2298            push    ar0
0AA3 C001      2299            push    ar1
0AA5 7450      2300            mov     a,#__str_6
0AA7 C0E0      2301            push    acc
0AA9 74CE      2302            mov     a,#(__str_6 >> 8)
0AAB C0E0      2303            push    acc
0AAD 7480      2304            mov     a,#0x80
0AAF C0E0      2305            push    acc
0AB1 120000    2306            lcall   _printf
0AB4 E581      2307            mov     a,sp
0AB6 24F9      2308            add     a,#0xf9
0AB8 F581      2309            mov     sp,a
0ABA           2310   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:488: printf("Vrms (ref):  %4.4f V  Vrms (spl): %4.4f V \n",vrms_ref, vrms_spl);
0ABA C060      2311            push    _main_vrms_spl_1_77
0ABC C061      2312            push    (_main_vrms_spl_1_77 + 1)
0ABE C062      2313            push    (_main_vrms_spl_1_77 + 2)
0AC0 C063      2314            push    (_main_vrms_spl_1_77 + 3)
0AC2 C0B0      2315            push    _main_vrms_ref_1_77
0AC4 C0B1      2316            push    (_main_vrms_ref_1_77 + 1)
0AC6 C0B2      2317            push    (_main_vrms_ref_1_77 + 2)
0AC8 C0B3      2318            push    (_main_vrms_ref_1_77 + 3)
0ACA 7490      2319            mov     a,#__str_7
0ACC C0E0      2320            push    acc
0ACE 74CE      2321            mov     a,#(__str_7 >> 8)
0AD0 C0E0      2322            push    acc
0AD2 7480      2323            mov     a,#0x80
0AD4 C0E0      2324            push    acc
0AD6 120000    2325            lcall   _printf
0AD9 E581      2326            mov     a,sp
0ADB 24F5      2327            add     a,#0xf5
0ADD F581      2328            mov     sp,a
0ADF           2329   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:489: printf("Phase Difference: %7.6f degrees  Phase diff time: %7.6f s \n", phase_diff_deg, phase_diff_time);
0ADF C050      2330            push    _main_phase_diff_time_1_77
0AE1 C051      2331            push    (_main_phase_diff_time_1_77 + 1)
0AE3 C052      2332            push    (_main_phase_diff_time_1_77 + 2)
0AE5 C053      2333            push    (_main_phase_diff_time_1_77 + 3)
0AE7 C000      2334            push    _main_phase_diff_deg_1_77
0AE9 C001      2335            push    (_main_phase_diff_deg_1_77 + 1)
0AEB C002      2336            push    (_main_phase_diff_deg_1_77 + 2)
0AED C003      2337            push    (_main_phase_diff_deg_1_77 + 3)
0AEF 74D0      2338            mov     a,#__str_8
0AF1 C0E0      2339            push    acc
0AF3 74CE      2340            mov     a,#(__str_8 >> 8)
0AF5 C0E0      2341            push    acc
0AF7 7480      2342            mov     a,#0x80
0AF9 C0E0      2343            push    acc
0AFB 120000    2344            lcall   _printf
0AFE E581      2345            mov     a,sp
0B00 24F5      2346            add     a,#0xf5
0B02 F581      2347            mov     sp,a
0B04           2348   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:491: printf("\033[A");
0B04 7410      2349            mov     a,#__str_9
0B06 C0E0      2350            push    acc
0B08 74CF      2351            mov     a,#(__str_9 >> 8)
0B0A C0E0      2352            push    acc
0B0C 7480      2353            mov     a,#0x80
0B0E C0E0      2354            push    acc
0B10 120000    2355            lcall   _printf
0B13 1581      2356            dec     sp
0B15 1581      2357            dec     sp
0B17 1581      2358            dec     sp
0B19           2359   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:492: printf("\033[A");
0B19 7410      2360            mov     a,#__str_9
0B1B C0E0      2361            push    acc
0B1D 74CF      2362            mov     a,#(__str_9 >> 8)
0B1F C0E0      2363            push    acc
0B21 7480      2364            mov     a,#0x80
0B23 C0E0      2365            push    acc
0B25 120000    2366            lcall   _printf
0B28 1581      2367            dec     sp
0B2A 1581      2368            dec     sp
0B2C 1581      2369            dec     sp
0B2E           2370   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:493: printf("\033[A");
0B2E 7410      2371            mov     a,#__str_9
0B30 C0E0      2372            push    acc
0B32 74CF      2373            mov     a,#(__str_9 >> 8)
0B34 C0E0      2374            push    acc
0B36 7480      2375            mov     a,#0x80
0B38 C0E0      2376            push    acc
0B3A 120000    2377            lcall   _printf
0B3D 1581      2378            dec     sp
0B3F 1581      2379            dec     sp
0B41 1581      2380            dec     sp
0B43           2381   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:494: printf("\033[A");
0B43 7410      2382            mov     a,#__str_9
0B45 C0E0      2383            push    acc
0B47 74CF      2384            mov     a,#(__str_9 >> 8)
0B49 C0E0      2385            push    acc
0B4B 7480      2386            mov     a,#0x80
0B4D C0E0      2387            push    acc
0B4F 120000    2388            lcall   _printf
0B52 1581      2389            dec     sp
0B54 1581      2390            dec     sp
0B56 1581      2391            dec     sp
0B58 D005      2392            pop     ar5
0B5A D004      2393            pop     ar4
0B5C D003      2394            pop     ar3
0B5E D002      2395            pop     ar2
0B60           2396   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:496: if(bsel == 0){
0B60 E5A0      2397            mov     a,_main_bsel_1_77
0B62 45A1      2398            orl     a,(_main_bsel_1_77 + 1)
0B64 6000      2399            jz      L018203?
0B66 020000    2400            ljmp    L018103?
0B69           2401   L018203?:
0B69           2402   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:497: sprintf(buffer,"F: %3dHz T: %2dms",(int)freq%1000, (int)(period*1000)%1000);
0B69 8A82      2403            mov     dpl,r2
0B6B 8B83      2404            mov     dph,r3
0B6D 8CF0      2405            mov     b,r4
0B6F ED        2406            mov     a,r5
0B70 120000    2407            lcall   ___fs2sint
0B73 7500E8    2408            mov     __modsint_PARM_2,#0xE8
0B76 750103    2409            mov     (__modsint_PARM_2 + 1),#0x03
0B79 120000    2410            lcall   __modsint
0B7C AA82      2411            mov     r2,dpl
0B7E AB83      2412            mov     r3,dph
0B80 857082    2413            mov     dpl,_main_freq_1_77
0B83 857183    2414            mov     dph,(_main_freq_1_77 + 1)
0B86 8572F0    2415            mov     b,(_main_freq_1_77 + 2)
0B89 E573      2416            mov     a,(_main_freq_1_77 + 3)
0B8B C002      2417            push    ar2
0B8D C003      2418            push    ar3
0B8F 120000    2419            lcall   ___fs2sint
0B92 7500E8    2420            mov     __modsint_PARM_2,#0xE8
0B95 750103    2421            mov     (__modsint_PARM_2 + 1),#0x03
0B98 120000    2422            lcall   __modsint
0B9B AC82      2423            mov     r4,dpl
0B9D AD83      2424            mov     r5,dph
0B9F C004      2425            push    ar4
0BA1 C005      2426            push    ar5
0BA3 74A0      2427            mov     a,#__str_10
0BA5 C0E0      2428            push    acc
0BA7 74D0      2429            mov     a,#(__str_10 >> 8)
0BA9 C0E0      2430            push    acc
0BAB 7480      2431            mov     a,#0x80
0BAD C0E0      2432            push    acc
0BAF 7460      2433            mov     a,#_main_buffer_1_77
0BB1 C0E0      2434            push    acc
0BB3 74B4      2435            mov     a,#(_main_buffer_1_77 >> 8)
0BB5 C0E0      2436            push    acc
0BB7 7440      2437            mov     a,#0x40
0BB9 C0E0      2438            push    acc
0BBB 120000    2439            lcall   _sprintf
0BBE E581      2440            mov     a,sp
0BC0 24F6      2441            add     a,#0xf6
0BC2 F581      2442            mov     sp,a
0BC4           2443   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:498: LCDprint(buffer,1,1);
0BC4 755001    2444            mov     _LCDprint_PARM_2,#0x01
0BC7 D200      2445            setb    _LCDprint_PARM_3
0BC9 90B460    2446            mov     dptr,#_main_buffer_1_77
0BCC 75F040    2447            mov     b,#0x40
0BCF 120000    2448            lcall   _LCDprint
0BD2           2449   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:499: sprintf(buffer,"Phase dif: %3.2f deg",phase_diff_deg);
0BD2 C000      2450            push    _main_phase_diff_deg_1_77
0BD4 C001      2451            push    (_main_phase_diff_deg_1_77 + 1)
0BD6 C002      2452            push    (_main_phase_diff_deg_1_77 + 2)
0BD8 C003      2453            push    (_main_phase_diff_deg_1_77 + 3)
0BDA 7420      2454            mov     a,#__str_11
0BDC C0E0      2455            push    acc
0BDE 74D1      2456            mov     a,#(__str_11 >> 8)
0BE0 C0E0      2457            push    acc
0BE2 7480      2458            mov     a,#0x80
0BE4 C0E0      2459            push    acc
0BE6 7460      2460            mov     a,#_main_buffer_1_77
0BE8 C0E0      2461            push    acc
0BEA 74B4      2462            mov     a,#(_main_buffer_1_77 >> 8)
0BEC C0E0      2463            push    acc
0BEE 7440      2464            mov     a,#0x40
0BF0 C0E0      2465            push    acc
0BF2 120000    2466            lcall   _sprintf
0BF5 E581      2467            mov     a,sp
0BF7 24F6      2468            add     a,#0xf6
0BF9 F581      2469            mov     sp,a
0BFB           2470   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:500: LCDprint(buffer,2,1);
0BFB 755002    2471            mov     _LCDprint_PARM_2,#0x02
0BFE D200      2472            setb    _LCDprint_PARM_3
0C00 90B460    2473            mov     dptr,#_main_buffer_1_77
0C03 75F040    2474            mov     b,#0x40
0C06 120000    2475            lcall   _LCDprint
0C09 020000    2476            ljmp    L018104?
0C0C           2477   L018103?:
0C0C           2478   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:501: }else if(bsel == 1){
0C0C 7401      2479            mov     a,#0x01
0C0E B5A0A0    2480            cjne    a,_main_bsel_1_77,L018204?
0C11 E4        2481            clr     a
0C12 B5A1A0    2482            cjne    a,(_main_bsel_1_77 + 1),L018204?
0C15 8000      2483            sjmp    L018205?
0C17           2484   L018204?:
0C17 8000      2485            sjmp    L018100?
0C19           2486   L018205?:
0C19           2487   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:502: sprintf(buffer,"Vrms(s): %2.2f V",vrms_spl);
0C19 C060      2488            push    _main_vrms_spl_1_77
0C1B C061      2489            push    (_main_vrms_spl_1_77 + 1)
0C1D C062      2490            push    (_main_vrms_spl_1_77 + 2)
0C1F C063      2491            push    (_main_vrms_spl_1_77 + 3)
0C21 7460      2492            mov     a,#__str_12
0C23 C0E0      2493            push    acc
0C25 74D2      2494            mov     a,#(__str_12 >> 8)
0C27 C0E0      2495            push    acc
0C29 7480      2496            mov     a,#0x80
0C2B C0E0      2497            push    acc
0C2D 7460      2498            mov     a,#_main_buffer_1_77
0C2F C0E0      2499            push    acc
0C31 74B4      2500            mov     a,#(_main_buffer_1_77 >> 8)
0C33 C0E0      2501            push    acc
0C35 7440      2502            mov     a,#0x40
0C37 C0E0      2503            push    acc
0C39 120000    2504            lcall   _sprintf
0C3C E581      2505            mov     a,sp
0C3E 24F6      2506            add     a,#0xf6
0C40 F581      2507            mov     sp,a
0C42           2508   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:503: LCDprint(buffer,1,1);
0C42 755001    2509            mov     _LCDprint_PARM_2,#0x01
0C45 D200      2510            setb    _LCDprint_PARM_3
0C47 90B460    2511            mov     dptr,#_main_buffer_1_77
0C4A 75F040    2512            mov     b,#0x40
0C4D 120000    2513            lcall   _LCDprint
0C50           2514   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:504: sprintf(buffer,"Vrms(r): %2.2f V",vrms_ref);
0C50 C0B0      2515            push    _main_vrms_ref_1_77
0C52 C0B1      2516            push    (_main_vrms_ref_1_77 + 1)
0C54 C0B2      2517            push    (_main_vrms_ref_1_77 + 2)
0C56 C0B3      2518            push    (_main_vrms_ref_1_77 + 3)
0C58 74A0      2519            mov     a,#__str_13
0C5A C0E0      2520            push    acc
0C5C 74D2      2521            mov     a,#(__str_13 >> 8)
0C5E C0E0      2522            push    acc
0C60 7480      2523            mov     a,#0x80
0C62 C0E0      2524            push    acc
0C64 7460      2525            mov     a,#_main_buffer_1_77
0C66 C0E0      2526            push    acc
0C68 74B4      2527            mov     a,#(_main_buffer_1_77 >> 8)
0C6A C0E0      2528            push    acc
0C6C 7440      2529            mov     a,#0x40
0C6E C0E0      2530            push    acc
0C70 120000    2531            lcall   _sprintf
0C73 E581      2532            mov     a,sp
0C75 24F6      2533            add     a,#0xf6
0C77 F581      2534            mov     sp,a
0C79           2535   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:505: LCDprint(buffer,2,1);
0C79 755002    2536            mov     _LCDprint_PARM_2,#0x02
0C7C D200      2537            setb    _LCDprint_PARM_3
0C7E 90B460    2538            mov     dptr,#_main_buffer_1_77
0C81 75F040    2539            mov     b,#0x40
0C84 120000    2540            lcall   _LCDprint
0C87 8000      2541            sjmp    L018104?
0C89           2542   L018100?:
0C89           2543   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:506: }else if(bsel == 2){
0C89 7402      2544            mov     a,#0x02
0C8B B5A0E0    2545            cjne    a,_main_bsel_1_77,L018206?
0C8E E4        2546            clr     a
0C8F B5A1E0    2547            cjne    a,(_main_bsel_1_77 + 1),L018206?
0C92 8000      2548            sjmp    L018207?
0C94           2549   L018206?:
0C94 8000      2550            sjmp    L018104?
0C96           2551   L018207?:
0C96           2552   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:507: sprintf(buffer,"Connect Guide");
0C96 7460      2553            mov     a,#__str_14
0C98 C0E0      2554            push    acc
0C9A 74D3      2555            mov     a,#(__str_14 >> 8)
0C9C C0E0      2556            push    acc
0C9E 7480      2557            mov     a,#0x80
0CA0 C0E0      2558            push    acc
0CA2 7460      2559            mov     a,#_main_buffer_1_77
0CA4 C0E0      2560            push    acc
0CA6 74B4      2561            mov     a,#(_main_buffer_1_77 >> 8)
0CA8 C0E0      2562            push    acc
0CAA 7440      2563            mov     a,#0x40
0CAC C0E0      2564            push    acc
0CAE 120000    2565            lcall   _sprintf
0CB1 E581      2566            mov     a,sp
0CB3 24FA      2567            add     a,#0xfa
0CB5 F581      2568            mov     sp,a
0CB7           2569   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:508: LCDprint(buffer,1,1);
0CB7 755001    2570            mov     _LCDprint_PARM_2,#0x01
0CBA D200      2571            setb    _LCDprint_PARM_3
0CBC 90B460    2572            mov     dptr,#_main_buffer_1_77
0CBF 75F040    2573            mov     b,#0x40
0CC2 120000    2574            lcall   _LCDprint
0CC5           2575   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:509: sprintf(buffer,"SAMPLE | REF");
0CC5 74A0      2576            mov     a,#__str_15
0CC7 C0E0      2577            push    acc
0CC9 74D3      2578            mov     a,#(__str_15 >> 8)
0CCB C0E0      2579            push    acc
0CCD 7480      2580            mov     a,#0x80
0CCF C0E0      2581            push    acc
0CD1 7460      2582            mov     a,#_main_buffer_1_77
0CD3 C0E0      2583            push    acc
0CD5 74B4      2584            mov     a,#(_main_buffer_1_77 >> 8)
0CD7 C0E0      2585            push    acc
0CD9 7440      2586            mov     a,#0x40
0CDB C0E0      2587            push    acc
0CDD 120000    2588            lcall   _sprintf
0CE0 E581      2589            mov     a,sp
0CE2 24FA      2590            add     a,#0xfa
0CE4 F581      2591            mov     sp,a
0CE6           2592   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:510: LCDprint(buffer,2,1);
0CE6 755002    2593            mov     _LCDprint_PARM_2,#0x02
0CE9 D200      2594            setb    _LCDprint_PARM_3
0CEB 90B460    2595            mov     dptr,#_main_buffer_1_77
0CEE 75F040    2596            mov     b,#0x40
0CF1 120000    2597            lcall   _LCDprint
0CF4           2598   L018104?:
0CF4           2599   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:515: if(phase_diff_deg < 0){
0CF4 E4        2600            clr     a
0CF5 C0E0      2601            push    acc
0CF7 C0E0      2602            push    acc
0CF9 C0E0      2603            push    acc
0CFB C0E0      2604            push    acc
0CFD 850082    2605            mov     dpl,_main_phase_diff_deg_1_77
0D00 850183    2606            mov     dph,(_main_phase_diff_deg_1_77 + 1)
0D03 8502F0    2607            mov     b,(_main_phase_diff_deg_1_77 + 2)
0D06 E503      2608            mov     a,(_main_phase_diff_deg_1_77 + 3)
0D08 120000    2609            lcall   ___fslt
0D0B AA82      2610            mov     r2,dpl
0D0D E581      2611            mov     a,sp
0D0F 24FC      2612            add     a,#0xfc
0D11 F581      2613            mov     sp,a
0D13 EA        2614            mov     a,r2
0D14 6000      2615            jz      L018106?
0D16           2616   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:516: RED = 0;
0D16 C283      2617            clr     _P0_3
0D18           2618   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:517: GREEN = 1;
0D18 D282      2619            setb    _P0_2
0D1A 8000      2620            sjmp    L018107?
0D1C           2621   L018106?:
0D1C           2622   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:519: RED = 1;
0D1C D283      2623            setb    _P0_3
0D1E           2624   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:520: GREEN = 0;
0D1E C282      2625            clr     _P0_2
0D20           2626   L018107?:
0D20           2627   ;        C:\Users\cosr3\Documents\GitHub\ELEC-291-Lab5\EFM8_ADC.c:529: waitms(500);
0D20 9001F4    2628            mov     dptr,#0x01F4
0D23 120000    2629            lcall   _waitms
0D26 020000    2630            ljmp    L018109?
0D29           2631            rseg R_CSEG
0D29           2632   
0000           2633            rseg R_XINIT
0000           2634   
0000           2635            rseg R_CONST
0000           2636   __str_0:
0000 1B        2637            db 0x1B
0001 5B324A    2638            db '[2J'
0004 00        2639            db 0x00
0005           2640   __str_1:
0005 41444320  2641            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        2642            db 0x0A
0016 46696C65  2643            db 'File: %s'
     3A202573
001E 0A        2644            db 0x0A
001F 436F6D70  2645            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        2646            db 0x0A
0030 0A        2647            db 0x0A
0031 00        2648            db 0x00
0032           2649   __str_2:
0032 433A      2650            db 'C:'
0034 5C        2651            db 0x5C
0035 55736572  2652            db 'Users'
     73
003A 5C        2653            db 0x5C
003B 636F7372  2654            db 'cosr3'
     33
0040 5C        2655            db 0x5C
0041 446F6375  2656            db 'Documents'
     6D656E74
     73
004A 5C        2657            db 0x5C
004B 47697448  2658            db 'GitHub'
     7562
0051 5C        2659            db 0x5C
0052 454C4543  2660            db 'ELEC-291-Lab5'
     2D323931
     2D4C6162
     35
005F 5C        2661            db 0x5C
0060 45464D38  2662            db 'EFM8_ADC.c'
     5F414443
     2E63
006A 00        2663            db 0x00
006B           2664   __str_3:
006B 4D617220  2665            db 'Mar  7 2024'
     20372032
     303234
0076 00        2666            db 0x00
0077           2667   __str_4:
0077 31353A35  2668            db '15:55:11'
     353A3131
007F 00        2669            db 0x00
0080           2670   __str_5:
0080 50657269  2671            db 'Period(T):  %7.6f ms  Freq(f):  %7.6f Hz '
     6F642854
     293A2020
     25372E36
     66206D73
     20204672
     65712866
     293A2020
     25372E36
     6620487A
     20
00A9 0A        2672            db 0x0A
00AA 00        2673            db 0x00
00AB           2674   __str_6:
00AB 312F3420  2675            db '1/4 Period: %7.6f ms'
     50657269
     6F643A20
     25372E36
     66206D73
00BF 0A        2676            db 0x0A
00C0 00        2677            db 0x00
00C1           2678   __str_7:
00C1 56726D73  2679            db 'Vrms (ref):  %4.4f V  Vrms (spl): %4.4f V '
     20287265
     66293A20
     2025342E
     34662056
     20205672
     6D732028
     73706C29
     3A202534
     2E346620
     5620
00EB 0A        2680            db 0x0A
00EC 00        2681            db 0x00
00ED           2682   __str_8:
00ED 50686173  2683            db 'Phase Difference: %7.6f degrees  Phase diff time: %7.6f s '
     65204469
     66666572
     656E6365
     3A202537
     2E366620
     64656772
     65657320
     20506861
     73652064
     69666620
     74696D65
     3A202537
     2E366620
     7320
0127 0A        2684            db 0x0A
0128 00        2685            db 0x00
0129           2686   __str_9:
0129 1B        2687            db 0x1B
012A 5B41      2688            db '[A'
012C 00        2689            db 0x00
012D           2690   __str_10:
012D 463A2025  2691            db 'F: %3dHz T: %2dms'
     3364487A
     20543A20
     2532646D
     73
013E 00        2692            db 0x00
013F           2693   __str_11:
013F 50686173  2694            db 'Phase dif: %3.2f deg'
     65206469
     663A2025
     332E3266
     20646567
0153 00        2695            db 0x00
0154           2696   __str_12:
0154 56726D73  2697            db 'Vrms(s): %2.2f V'
     2873293A
     2025322E
     32662056
0164 00        2698            db 0x00
0165           2699   __str_13:
0165 56726D73  2700            db 'Vrms(r): %2.2f V'
     2872293A
     2025322E
     32662056
0175 00        2701            db 0x00
0176           2702   __str_14:
0176 436F6E6E  2703            db 'Connect Guide'
     65637420
     47756964
     65
0183 00        2704            db 0x00
0184           2705   __str_15:
0184 53414D50  2706            db 'SAMPLE | REF'
     4C45207C
     20524546
0190 00        2707            db 0x00
0191           2708   
0003           2709            CSEG
0003           2710   
0003           2711   end
